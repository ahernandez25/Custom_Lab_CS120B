
Hangman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  000009e6  00000a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080035a  0080035a  00000cd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ac  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b12  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cee  00000000  00000000  00002f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000727  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088c  00000000  00000000  000045e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004e6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>
   2:	00 00       	nop
   4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
   6:	00 00       	nop
   8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
   a:	00 00       	nop
   c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
   e:	00 00       	nop
  10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
  12:	00 00       	nop
  14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
  16:	00 00       	nop
  18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
  1e:	00 00       	nop
  20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
  22:	00 00       	nop
  24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
  26:	00 00       	nop
  28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
  2e:	00 00       	nop
  30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
  32:	00 00       	nop
  34:	10 c1       	rjmp	.+544    	; 0x256 <__vector_13>
  36:	00 00       	nop
  38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
  3e:	00 00       	nop
  40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
  42:	00 00       	nop
  44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
  46:	00 00       	nop
  48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
  4e:	00 00       	nop
  50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
  52:	00 00       	nop
  54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
  56:	00 00       	nop
  58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
  5e:	00 00       	nop
  60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
  62:	00 00       	nop
  64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
  66:	00 00       	nop
  68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
  6e:	00 00       	nop
  70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
  72:	00 00       	nop
  74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
  76:	00 00       	nop
  78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
  7e:	00 00       	nop
  80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
  82:	00 00       	nop
  84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
  86:	00 00       	nop
  88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e5 01       	movw	r28, r10
  8e:	0e 03       	fmul	r16, r22
  90:	0e 03       	fmul	r16, r22
  92:	0e 03       	fmul	r16, r22
  94:	0e 03       	fmul	r16, r22
  96:	0e 03       	fmul	r16, r22
  98:	0e 03       	fmul	r16, r22
  9a:	0e 03       	fmul	r16, r22
  9c:	0e 03       	fmul	r16, r22
  9e:	0e 03       	fmul	r16, r22
  a0:	0e 03       	fmul	r16, r22
  a2:	0e 03       	fmul	r16, r22
  a4:	0e 03       	fmul	r16, r22
  a6:	0e 03       	fmul	r16, r22
  a8:	0e 03       	fmul	r16, r22
  aa:	0e 03       	fmul	r16, r22
  ac:	0e 03       	fmul	r16, r22
  ae:	0e 03       	fmul	r16, r22
  b0:	0e 03       	fmul	r16, r22
  b2:	0e 03       	fmul	r16, r22
  b4:	0e 03       	fmul	r16, r22
  b6:	0e 03       	fmul	r16, r22
  b8:	0e 03       	fmul	r16, r22
  ba:	0e 03       	fmul	r16, r22
  bc:	0e 03       	fmul	r16, r22
  be:	0e 03       	fmul	r16, r22
  c0:	0e 03       	fmul	r16, r22
  c2:	0e 03       	fmul	r16, r22
  c4:	0e 03       	fmul	r16, r22
  c6:	0e 03       	fmul	r16, r22
  c8:	0e 03       	fmul	r16, r22
  ca:	0e 03       	fmul	r16, r22
  cc:	0e 03       	fmul	r16, r22
  ce:	0e 03       	fmul	r16, r22
  d0:	0e 03       	fmul	r16, r22
  d2:	0e 03       	fmul	r16, r22
  d4:	0e 03       	fmul	r16, r22
  d6:	0e 03       	fmul	r16, r22
  d8:	0e 03       	fmul	r16, r22
  da:	0e 03       	fmul	r16, r22
  dc:	0e 03       	fmul	r16, r22
  de:	0e 03       	fmul	r16, r22
  e0:	0e 03       	fmul	r16, r22
  e2:	0e 03       	fmul	r16, r22
  e4:	0e 03       	fmul	r16, r22
  e6:	0e 03       	fmul	r16, r22
  e8:	0e 03       	fmul	r16, r22
  ea:	0e 03       	fmul	r16, r22
  ec:	0e 03       	fmul	r16, r22
  ee:	eb 01       	movw	r28, r22
  f0:	f1 01       	movw	r30, r2
  f2:	14 02       	muls	r17, r20
  f4:	37 02       	muls	r19, r23
  f6:	5a 02       	muls	r21, r26
  f8:	7d 02       	muls	r23, r29
  fa:	a0 02       	muls	r26, r16
  fc:	c3 02       	muls	r28, r19
  fe:	e7 02       	muls	r30, r23

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf ef       	ldi	r28, 0xFF	; 255
 106:	d0 e4       	ldi	r29, 0x40	; 64
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
 10c:	13 e0       	ldi	r17, 0x03	; 3
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	e6 ee       	ldi	r30, 0xE6	; 230
 114:	f9 e0       	ldi	r31, 0x09	; 9
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	0b bf       	out	0x3b, r16	; 59
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x14>
 11c:	07 90       	elpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	aa 35       	cpi	r26, 0x5A	; 90
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x10>

00000126 <__do_clear_bss>:
 126:	23 e0       	ldi	r18, 0x03	; 3
 128:	aa e5       	ldi	r26, 0x5A	; 90
 12a:	b3 e0       	ldi	r27, 0x03	; 3
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	ad 37       	cpi	r26, 0x7D	; 125
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	cb d3       	rcall	.+1942   	; 0x8ce <main>
 138:	54 c4       	rjmp	.+2216   	; 0x9e2 <_exit>

0000013a <__bad_interrupt>:
 13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <delay_ms>:
	{
		SPI_Write(image_data[k]);
	}
	PORTB &= ~(1<<DC);
	SPI_SS_Disable();
}
 13c:	18 16       	cp	r1, r24
 13e:	19 06       	cpc	r1, r25
 140:	5c f0       	brlt	.+22     	; 0x158 <delay_ms+0x1c>
 142:	08 95       	ret
 144:	00 00       	nop
 146:	21 50       	subi	r18, 0x01	; 1
 148:	31 09       	sbc	r19, r1
 14a:	e1 f7       	brne	.-8      	; 0x144 <delay_ms+0x8>
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	84 17       	cp	r24, r20
 152:	95 07       	cpc	r25, r21
 154:	19 f4       	brne	.+6      	; 0x15c <delay_ms+0x20>
 156:	08 95       	ret
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	27 e0       	ldi	r18, 0x07	; 7
 15e:	33 e0       	ldi	r19, 0x03	; 3
 160:	f1 cf       	rjmp	.-30     	; 0x144 <delay_ms+0x8>

00000162 <LCD_WriteCommand>:
 162:	10 98       	cbi	0x02, 0	; 2
 164:	8b b9       	out	0x0b, r24	; 11
 166:	11 9a       	sbi	0x02, 1	; 2
 168:	00 00       	nop
 16a:	11 98       	cbi	0x02, 1	; 2
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	e5 cf       	rjmp	.-54     	; 0x13c <delay_ms>
 172:	08 95       	ret

00000174 <LCD_ClearScreen>:
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	f5 cf       	rjmp	.-22     	; 0x162 <LCD_WriteCommand>
 178:	08 95       	ret

0000017a <LCD_Cursor>:
 17a:	81 31       	cpi	r24, 0x11	; 17
 17c:	18 f4       	brcc	.+6      	; 0x184 <LCD_Cursor+0xa>
 17e:	81 58       	subi	r24, 0x81	; 129
 180:	f0 cf       	rjmp	.-32     	; 0x162 <LCD_WriteCommand>
 182:	08 95       	ret
 184:	81 55       	subi	r24, 0x51	; 81
 186:	ed cf       	rjmp	.-38     	; 0x162 <LCD_WriteCommand>
 188:	08 95       	ret

0000018a <LCD_init>:
 18a:	84 e6       	ldi	r24, 0x64	; 100
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	d6 df       	rcall	.-84     	; 0x13c <delay_ms>
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	e7 df       	rcall	.-50     	; 0x162 <LCD_WriteCommand>
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	e5 df       	rcall	.-54     	; 0x162 <LCD_WriteCommand>
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	e3 df       	rcall	.-58     	; 0x162 <LCD_WriteCommand>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	e1 df       	rcall	.-62     	; 0x162 <LCD_WriteCommand>
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	cb cf       	rjmp	.-106    	; 0x13c <delay_ms>
 1a6:	08 95       	ret

000001a8 <LCD_WriteData>:
 1a8:	10 9a       	sbi	0x02, 0	; 2
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	11 9a       	sbi	0x02, 1	; 2
 1ae:	00 00       	nop
 1b0:	11 98       	cbi	0x02, 1	; 2
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	c2 cf       	rjmp	.-124    	; 0x13c <delay_ms>
 1b8:	08 95       	ret

000001ba <LCD_DisplayString>:
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	18 2f       	mov	r17, r24
 1c4:	eb 01       	movw	r28, r22
 1c6:	d6 df       	rcall	.-84     	; 0x174 <LCD_ClearScreen>
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	51 f0       	breq	.+20     	; 0x1e2 <LCD_DisplayString+0x28>
 1ce:	01 e0       	ldi	r16, 0x01	; 1
 1d0:	01 0f       	add	r16, r17
 1d2:	81 2f       	mov	r24, r17
 1d4:	d2 df       	rcall	.-92     	; 0x17a <LCD_Cursor>
 1d6:	89 91       	ld	r24, Y+
 1d8:	e7 df       	rcall	.-50     	; 0x1a8 <LCD_WriteData>
 1da:	10 2f       	mov	r17, r16
 1dc:	88 81       	ld	r24, Y
 1de:	81 11       	cpse	r24, r1
 1e0:	f6 cf       	rjmp	.-20     	; 0x1ce <LCD_DisplayString+0x14>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <TimerSet>:
 1ec:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <_avr_timer_M>
 1f0:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <_avr_timer_M+0x1>
 1f4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_M+0x2>
 1f8:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_M+0x3>
 1fc:	60 93 74 03 	sts	0x0374, r22	; 0x800374 <_avr_timer_cntcurr>
 200:	70 93 75 03 	sts	0x0375, r23	; 0x800375 <_avr_timer_cntcurr+0x1>
 204:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <_avr_timer_cntcurr+0x2>
 208:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <_avr_timer_cntcurr+0x3>
 20c:	08 95       	ret

0000020e <TimerOn>:
 20e:	8b e0       	ldi	r24, 0x0B	; 11
 210:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 214:	8d e7       	ldi	r24, 0x7D	; 125
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 21c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 226:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 22a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 22e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <_avr_timer_M>
 232:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <_avr_timer_M+0x1>
 236:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <_avr_timer_M+0x2>
 23a:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <_avr_timer_M+0x3>
 23e:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <_avr_timer_cntcurr>
 242:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <_avr_timer_cntcurr+0x1>
 246:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <_avr_timer_cntcurr+0x2>
 24a:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <_avr_timer_cntcurr+0x3>
 24e:	8f b7       	in	r24, 0x3f	; 63
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8f bf       	out	0x3f, r24	; 63
 254:	08 95       	ret

00000256 <__vector_13>:
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <_avr_timer_cntcurr>
 26c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <_avr_timer_cntcurr+0x1>
 270:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <_avr_timer_cntcurr+0x2>
 274:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <_avr_timer_cntcurr+0x3>
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	a1 09       	sbc	r26, r1
 27c:	b1 09       	sbc	r27, r1
 27e:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <_avr_timer_cntcurr>
 282:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <_avr_timer_cntcurr+0x1>
 286:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <_avr_timer_cntcurr+0x2>
 28a:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <_avr_timer_cntcurr+0x3>
 28e:	89 2b       	or	r24, r25
 290:	8a 2b       	or	r24, r26
 292:	8b 2b       	or	r24, r27
 294:	99 f4       	brne	.+38     	; 0x2bc <__vector_13+0x66>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <TimerFlag>
 29c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <_avr_timer_M>
 2a0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <_avr_timer_M+0x1>
 2a4:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <_avr_timer_M+0x2>
 2a8:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <_avr_timer_M+0x3>
 2ac:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <_avr_timer_cntcurr>
 2b0:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <_avr_timer_cntcurr+0x1>
 2b4:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <_avr_timer_cntcurr+0x2>
 2b8:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <_avr_timer_cntcurr+0x3>
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <GetKeypadKey>:
 2ce:	8f ee       	ldi	r24, 0xEF	; 239
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	00 00       	nop
 2d4:	30 9b       	sbis	0x06, 0	; 6
 2d6:	2e c0       	rjmp	.+92     	; 0x334 <GetKeypadKey+0x66>
 2d8:	31 9b       	sbis	0x06, 1	; 6
 2da:	2e c0       	rjmp	.+92     	; 0x338 <GetKeypadKey+0x6a>
 2dc:	32 9b       	sbis	0x06, 2	; 6
 2de:	2e c0       	rjmp	.+92     	; 0x33c <GetKeypadKey+0x6e>
 2e0:	33 9b       	sbis	0x06, 3	; 6
 2e2:	2e c0       	rjmp	.+92     	; 0x340 <GetKeypadKey+0x72>
 2e4:	8f ed       	ldi	r24, 0xDF	; 223
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	00 00       	nop
 2ea:	30 9b       	sbis	0x06, 0	; 6
 2ec:	2b c0       	rjmp	.+86     	; 0x344 <GetKeypadKey+0x76>
 2ee:	31 9b       	sbis	0x06, 1	; 6
 2f0:	2b c0       	rjmp	.+86     	; 0x348 <GetKeypadKey+0x7a>
 2f2:	32 9b       	sbis	0x06, 2	; 6
 2f4:	2b c0       	rjmp	.+86     	; 0x34c <GetKeypadKey+0x7e>
 2f6:	33 9b       	sbis	0x06, 3	; 6
 2f8:	2b c0       	rjmp	.+86     	; 0x350 <GetKeypadKey+0x82>
 2fa:	8f eb       	ldi	r24, 0xBF	; 191
 2fc:	88 b9       	out	0x08, r24	; 8
 2fe:	00 00       	nop
 300:	30 9b       	sbis	0x06, 0	; 6
 302:	28 c0       	rjmp	.+80     	; 0x354 <GetKeypadKey+0x86>
 304:	31 9b       	sbis	0x06, 1	; 6
 306:	28 c0       	rjmp	.+80     	; 0x358 <GetKeypadKey+0x8a>
 308:	32 9b       	sbis	0x06, 2	; 6
 30a:	28 c0       	rjmp	.+80     	; 0x35c <GetKeypadKey+0x8e>
 30c:	33 9b       	sbis	0x06, 3	; 6
 30e:	28 c0       	rjmp	.+80     	; 0x360 <GetKeypadKey+0x92>
 310:	8f e7       	ldi	r24, 0x7F	; 127
 312:	88 b9       	out	0x08, r24	; 8
 314:	00 00       	nop
 316:	30 9b       	sbis	0x06, 0	; 6
 318:	25 c0       	rjmp	.+74     	; 0x364 <GetKeypadKey+0x96>
 31a:	31 9b       	sbis	0x06, 1	; 6
 31c:	25 c0       	rjmp	.+74     	; 0x368 <GetKeypadKey+0x9a>
 31e:	32 9b       	sbis	0x06, 2	; 6
 320:	25 c0       	rjmp	.+74     	; 0x36c <GetKeypadKey+0x9e>
 322:	33 9b       	sbis	0x06, 3	; 6
 324:	25 c0       	rjmp	.+74     	; 0x370 <GetKeypadKey+0xa2>
 326:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <click>
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <click>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
 334:	81 e3       	ldi	r24, 0x31	; 49
 336:	08 95       	ret
 338:	84 e3       	ldi	r24, 0x34	; 52
 33a:	08 95       	ret
 33c:	87 e3       	ldi	r24, 0x37	; 55
 33e:	08 95       	ret
 340:	8a e2       	ldi	r24, 0x2A	; 42
 342:	08 95       	ret
 344:	82 e3       	ldi	r24, 0x32	; 50
 346:	08 95       	ret
 348:	85 e3       	ldi	r24, 0x35	; 53
 34a:	08 95       	ret
 34c:	88 e3       	ldi	r24, 0x38	; 56
 34e:	08 95       	ret
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	08 95       	ret
 354:	83 e3       	ldi	r24, 0x33	; 51
 356:	08 95       	ret
 358:	86 e3       	ldi	r24, 0x36	; 54
 35a:	08 95       	ret
 35c:	89 e3       	ldi	r24, 0x39	; 57
 35e:	08 95       	ret
 360:	83 e2       	ldi	r24, 0x23	; 35
 362:	08 95       	ret
 364:	81 e4       	ldi	r24, 0x41	; 65
 366:	08 95       	ret
 368:	82 e4       	ldi	r24, 0x42	; 66
 36a:	08 95       	ret
 36c:	83 e4       	ldi	r24, 0x43	; 67
 36e:	08 95       	ret
 370:	84 e4       	ldi	r24, 0x44	; 68
 372:	08 95       	ret

00000374 <KeypadTick>:
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	91 05       	cpc	r25, r1
 37e:	c9 f0       	breq	.+50     	; 0x3b2 <KeypadTick+0x3e>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	91 05       	cpc	r25, r1
 384:	31 f0       	breq	.+12     	; 0x392 <KeypadTick+0x1e>
 386:	89 2b       	or	r24, r25
 388:	21 f0       	breq	.+8      	; 0x392 <KeypadTick+0x1e>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <State>
 390:	02 c0       	rjmp	.+4      	; 0x396 <KeypadTick+0x22>
 392:	c1 e0       	ldi	r28, 0x01	; 1
 394:	d0 e0       	ldi	r29, 0x00	; 0
 396:	c1 30       	cpi	r28, 0x01	; 1
 398:	d1 05       	cpc	r29, r1
 39a:	39 f0       	breq	.+14     	; 0x3aa <KeypadTick+0x36>
 39c:	c2 30       	cpi	r28, 0x02	; 2
 39e:	d1 05       	cpc	r29, r1
 3a0:	41 f0       	breq	.+16     	; 0x3b2 <KeypadTick+0x3e>
 3a2:	20 97       	sbiw	r28, 0x00	; 0
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <KeypadTick+0x34>
 3a6:	54 c1       	rjmp	.+680    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3a8:	35 c1       	rjmp	.+618    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 3aa:	91 df       	rcall	.-222    	; 0x2ce <GetKeypadKey>
 3ac:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <x>
 3b0:	4f c1       	rjmp	.+670    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3b2:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <x>
 3b6:	8e 2f       	mov	r24, r30
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	8a 33       	cpi	r24, 0x3A	; 58
 3bc:	91 05       	cpc	r25, r1
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <KeypadTick+0x4e>
 3c0:	2d c1       	rjmp	.+602    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 3c2:	fc 01       	movw	r30, r24
 3c4:	ea 5b       	subi	r30, 0xBA	; 186
 3c6:	ff 4f       	sbci	r31, 0xFF	; 255
 3c8:	03 c3       	rjmp	.+1542   	; 0x9d0 <__tablejump2__>
 3ca:	80 e2       	ldi	r24, 0x20	; 32
 3cc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 3d0:	c2 e0       	ldi	r28, 0x02	; 2
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	3d c1       	rjmp	.+634    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3d6:	80 e2       	ldi	r24, 0x20	; 32
 3d8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 3dc:	c2 e0       	ldi	r28, 0x02	; 2
 3de:	d0 e0       	ldi	r29, 0x00	; 0
 3e0:	37 c1       	rjmp	.+622    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3e2:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <click>
 3e6:	8b ea       	ldi	r24, 0xAB	; 171
 3e8:	98 9f       	mul	r25, r24
 3ea:	81 2d       	mov	r24, r1
 3ec:	11 24       	eor	r1, r1
 3ee:	86 95       	lsr	r24
 3f0:	28 2f       	mov	r18, r24
 3f2:	22 0f       	add	r18, r18
 3f4:	82 0f       	add	r24, r18
 3f6:	98 1b       	sub	r25, r24
 3f8:	91 30       	cpi	r25, 0x01	; 1
 3fa:	31 f4       	brne	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	81 e4       	ldi	r24, 0x41	; 65
 3fe:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 402:	c2 e0       	ldi	r28, 0x02	; 2
 404:	d0 e0       	ldi	r29, 0x00	; 0
 406:	24 c1       	rjmp	.+584    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 408:	92 30       	cpi	r25, 0x02	; 2
 40a:	31 f4       	brne	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40c:	82 e4       	ldi	r24, 0x42	; 66
 40e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 412:	c2 e0       	ldi	r28, 0x02	; 2
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	1c c1       	rjmp	.+568    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 418:	91 11       	cpse	r25, r1
 41a:	03 c1       	rjmp	.+518    	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 41c:	83 e4       	ldi	r24, 0x43	; 67
 41e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 422:	c2 e0       	ldi	r28, 0x02	; 2
 424:	d0 e0       	ldi	r29, 0x00	; 0
 426:	14 c1       	rjmp	.+552    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 428:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <click>
 42c:	8b ea       	ldi	r24, 0xAB	; 171
 42e:	98 9f       	mul	r25, r24
 430:	81 2d       	mov	r24, r1
 432:	11 24       	eor	r1, r1
 434:	86 95       	lsr	r24
 436:	28 2f       	mov	r18, r24
 438:	22 0f       	add	r18, r18
 43a:	82 0f       	add	r24, r18
 43c:	98 1b       	sub	r25, r24
 43e:	91 30       	cpi	r25, 0x01	; 1
 440:	31 f4       	brne	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 442:	84 e4       	ldi	r24, 0x44	; 68
 444:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 448:	c2 e0       	ldi	r28, 0x02	; 2
 44a:	d0 e0       	ldi	r29, 0x00	; 0
 44c:	01 c1       	rjmp	.+514    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 44e:	92 30       	cpi	r25, 0x02	; 2
 450:	31 f4       	brne	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 452:	85 e4       	ldi	r24, 0x45	; 69
 454:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 458:	c2 e0       	ldi	r28, 0x02	; 2
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	f9 c0       	rjmp	.+498    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 45e:	91 11       	cpse	r25, r1
 460:	e3 c0       	rjmp	.+454    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 462:	86 e4       	ldi	r24, 0x46	; 70
 464:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 468:	c2 e0       	ldi	r28, 0x02	; 2
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	f1 c0       	rjmp	.+482    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 46e:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <click>
 472:	8b ea       	ldi	r24, 0xAB	; 171
 474:	98 9f       	mul	r25, r24
 476:	81 2d       	mov	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	86 95       	lsr	r24
 47c:	28 2f       	mov	r18, r24
 47e:	22 0f       	add	r18, r18
 480:	82 0f       	add	r24, r18
 482:	98 1b       	sub	r25, r24
 484:	91 30       	cpi	r25, 0x01	; 1
 486:	31 f4       	brne	.+12     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 488:	87 e4       	ldi	r24, 0x47	; 71
 48a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 48e:	c2 e0       	ldi	r28, 0x02	; 2
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	de c0       	rjmp	.+444    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 494:	92 30       	cpi	r25, 0x02	; 2
 496:	31 f4       	brne	.+12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 498:	88 e4       	ldi	r24, 0x48	; 72
 49a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 49e:	c2 e0       	ldi	r28, 0x02	; 2
 4a0:	d0 e0       	ldi	r29, 0x00	; 0
 4a2:	d6 c0       	rjmp	.+428    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4a4:	91 11       	cpse	r25, r1
 4a6:	c3 c0       	rjmp	.+390    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 4a8:	89 e4       	ldi	r24, 0x49	; 73
 4aa:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 4ae:	c2 e0       	ldi	r28, 0x02	; 2
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
 4b2:	ce c0       	rjmp	.+412    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4b4:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <click>
 4b8:	8b ea       	ldi	r24, 0xAB	; 171
 4ba:	98 9f       	mul	r25, r24
 4bc:	81 2d       	mov	r24, r1
 4be:	11 24       	eor	r1, r1
 4c0:	86 95       	lsr	r24
 4c2:	28 2f       	mov	r18, r24
 4c4:	22 0f       	add	r18, r18
 4c6:	82 0f       	add	r24, r18
 4c8:	98 1b       	sub	r25, r24
 4ca:	91 30       	cpi	r25, 0x01	; 1
 4cc:	31 f4       	brne	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ce:	8a e4       	ldi	r24, 0x4A	; 74
 4d0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 4d4:	c2 e0       	ldi	r28, 0x02	; 2
 4d6:	d0 e0       	ldi	r29, 0x00	; 0
 4d8:	bb c0       	rjmp	.+374    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4da:	92 30       	cpi	r25, 0x02	; 2
 4dc:	31 f4       	brne	.+12     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4de:	8b e4       	ldi	r24, 0x4B	; 75
 4e0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 4e4:	c2 e0       	ldi	r28, 0x02	; 2
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	b3 c0       	rjmp	.+358    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4ea:	91 11       	cpse	r25, r1
 4ec:	a3 c0       	rjmp	.+326    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 4ee:	8c e4       	ldi	r24, 0x4C	; 76
 4f0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 4f4:	c2 e0       	ldi	r28, 0x02	; 2
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
 4f8:	ab c0       	rjmp	.+342    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4fa:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <click>
 4fe:	8b ea       	ldi	r24, 0xAB	; 171
 500:	98 9f       	mul	r25, r24
 502:	81 2d       	mov	r24, r1
 504:	11 24       	eor	r1, r1
 506:	86 95       	lsr	r24
 508:	28 2f       	mov	r18, r24
 50a:	22 0f       	add	r18, r18
 50c:	82 0f       	add	r24, r18
 50e:	98 1b       	sub	r25, r24
 510:	91 30       	cpi	r25, 0x01	; 1
 512:	31 f4       	brne	.+12     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 514:	8d e4       	ldi	r24, 0x4D	; 77
 516:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 51a:	c2 e0       	ldi	r28, 0x02	; 2
 51c:	d0 e0       	ldi	r29, 0x00	; 0
 51e:	98 c0       	rjmp	.+304    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 520:	92 30       	cpi	r25, 0x02	; 2
 522:	31 f4       	brne	.+12     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 524:	8e e4       	ldi	r24, 0x4E	; 78
 526:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 52a:	c2 e0       	ldi	r28, 0x02	; 2
 52c:	d0 e0       	ldi	r29, 0x00	; 0
 52e:	90 c0       	rjmp	.+288    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 530:	91 11       	cpse	r25, r1
 532:	83 c0       	rjmp	.+262    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 534:	80 e3       	ldi	r24, 0x30	; 48
 536:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 53a:	c2 e0       	ldi	r28, 0x02	; 2
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	88 c0       	rjmp	.+272    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 540:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <click>
 544:	83 70       	andi	r24, 0x03	; 3
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	31 f4       	brne	.+12     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 54a:	80 e5       	ldi	r24, 0x50	; 80
 54c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 550:	c2 e0       	ldi	r28, 0x02	; 2
 552:	d0 e0       	ldi	r29, 0x00	; 0
 554:	7d c0       	rjmp	.+250    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	31 f4       	brne	.+12     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 55a:	81 e5       	ldi	r24, 0x51	; 81
 55c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 560:	c2 e0       	ldi	r28, 0x02	; 2
 562:	d0 e0       	ldi	r29, 0x00	; 0
 564:	75 c0       	rjmp	.+234    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 566:	83 30       	cpi	r24, 0x03	; 3
 568:	31 f4       	brne	.+12     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 56a:	82 e5       	ldi	r24, 0x52	; 82
 56c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 570:	c2 e0       	ldi	r28, 0x02	; 2
 572:	d0 e0       	ldi	r29, 0x00	; 0
 574:	6d c0       	rjmp	.+218    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 576:	81 11       	cpse	r24, r1
 578:	63 c0       	rjmp	.+198    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 57a:	83 e5       	ldi	r24, 0x53	; 83
 57c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 580:	c2 e0       	ldi	r28, 0x02	; 2
 582:	d0 e0       	ldi	r29, 0x00	; 0
 584:	65 c0       	rjmp	.+202    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 586:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <click>
 58a:	8b ea       	ldi	r24, 0xAB	; 171
 58c:	98 9f       	mul	r25, r24
 58e:	81 2d       	mov	r24, r1
 590:	11 24       	eor	r1, r1
 592:	86 95       	lsr	r24
 594:	28 2f       	mov	r18, r24
 596:	22 0f       	add	r18, r18
 598:	82 0f       	add	r24, r18
 59a:	98 1b       	sub	r25, r24
 59c:	91 30       	cpi	r25, 0x01	; 1
 59e:	31 f4       	brne	.+12     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a0:	84 e5       	ldi	r24, 0x54	; 84
 5a2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5a6:	c2 e0       	ldi	r28, 0x02	; 2
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
 5aa:	52 c0       	rjmp	.+164    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5ac:	92 30       	cpi	r25, 0x02	; 2
 5ae:	31 f4       	brne	.+12     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5b0:	85 e5       	ldi	r24, 0x55	; 85
 5b2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5b6:	c2 e0       	ldi	r28, 0x02	; 2
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	4a c0       	rjmp	.+148    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5bc:	93 30       	cpi	r25, 0x03	; 3
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c0:	42 c0       	rjmp	.+132    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 5c2:	86 e5       	ldi	r24, 0x56	; 86
 5c4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5c8:	c2 e0       	ldi	r28, 0x02	; 2
 5ca:	d0 e0       	ldi	r29, 0x00	; 0
 5cc:	41 c0       	rjmp	.+130    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5ce:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <click>
 5d2:	83 70       	andi	r24, 0x03	; 3
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	31 f4       	brne	.+12     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5d8:	87 e5       	ldi	r24, 0x57	; 87
 5da:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5de:	c2 e0       	ldi	r28, 0x02	; 2
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	36 c0       	rjmp	.+108    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5e4:	82 30       	cpi	r24, 0x02	; 2
 5e6:	31 f4       	brne	.+12     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5e8:	88 e5       	ldi	r24, 0x58	; 88
 5ea:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5ee:	c2 e0       	ldi	r28, 0x02	; 2
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
 5f2:	2e c0       	rjmp	.+92     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5f4:	83 30       	cpi	r24, 0x03	; 3
 5f6:	31 f4       	brne	.+12     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5f8:	89 e5       	ldi	r24, 0x59	; 89
 5fa:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5fe:	c2 e0       	ldi	r28, 0x02	; 2
 600:	d0 e0       	ldi	r29, 0x00	; 0
 602:	26 c0       	rjmp	.+76     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 604:	81 11       	cpse	r24, r1
 606:	22 c0       	rjmp	.+68     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 608:	8a e5       	ldi	r24, 0x5A	; 90
 60a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 60e:	c2 e0       	ldi	r28, 0x02	; 2
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	1e c0       	rjmp	.+60     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <State>
 61a:	1a c0       	rjmp	.+52     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 61c:	c2 e0       	ldi	r28, 0x02	; 2
 61e:	d0 e0       	ldi	r29, 0x00	; 0
 620:	17 c0       	rjmp	.+46     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 622:	c2 e0       	ldi	r28, 0x02	; 2
 624:	d0 e0       	ldi	r29, 0x00	; 0
 626:	14 c0       	rjmp	.+40     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 628:	c2 e0       	ldi	r28, 0x02	; 2
 62a:	d0 e0       	ldi	r29, 0x00	; 0
 62c:	11 c0       	rjmp	.+34     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 62e:	c2 e0       	ldi	r28, 0x02	; 2
 630:	d0 e0       	ldi	r29, 0x00	; 0
 632:	0e c0       	rjmp	.+28     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 634:	c2 e0       	ldi	r28, 0x02	; 2
 636:	d0 e0       	ldi	r29, 0x00	; 0
 638:	0b c0       	rjmp	.+22     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 63a:	c2 e0       	ldi	r28, 0x02	; 2
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	08 c0       	rjmp	.+16     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 640:	c2 e0       	ldi	r28, 0x02	; 2
 642:	d0 e0       	ldi	r29, 0x00	; 0
 644:	05 c0       	rjmp	.+10     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 646:	c2 e0       	ldi	r28, 0x02	; 2
 648:	d0 e0       	ldi	r29, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64c:	c2 e0       	ldi	r28, 0x02	; 2
 64e:	d0 e0       	ldi	r29, 0x00	; 0
 650:	ce 01       	movw	r24, r28
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <N5110_Cmnd>:
 658:	cf 93       	push	r28
 65a:	c8 2f       	mov	r28, r24
 65c:	29 98       	cbi	0x05, 1	; 5
 65e:	a7 d1       	rcall	.+846    	; 0x9ae <SPI_SS_Enable>
 660:	8c 2f       	mov	r24, r28
 662:	b1 d1       	rcall	.+866    	; 0x9c6 <SPI_Write>
 664:	29 9a       	sbi	0x05, 1	; 5
 666:	a5 d1       	rcall	.+842    	; 0x9b2 <SPI_SS_Disable>
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <N5110_Data>:
 66c:	ef 92       	push	r14
 66e:	ff 92       	push	r15
 670:	0f 93       	push	r16
 672:	1f 93       	push	r17
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	8c 01       	movw	r16, r24
 67a:	29 9a       	sbi	0x05, 1	; 5
 67c:	98 d1       	rcall	.+816    	; 0x9ae <SPI_SS_Enable>
 67e:	f8 01       	movw	r30, r16
 680:	01 90       	ld	r0, Z+
 682:	00 20       	and	r0, r0
 684:	e9 f7       	brne	.-6      	; 0x680 <N5110_Data+0x14>
 686:	31 97       	sbiw	r30, 0x01	; 1
 688:	e0 1b       	sub	r30, r16
 68a:	f1 0b       	sbc	r31, r17
 68c:	1e 16       	cp	r1, r30
 68e:	1f 06       	cpc	r1, r31
 690:	2c f5       	brge	.+74     	; 0x6dc <N5110_Data+0x70>
 692:	e8 01       	movw	r28, r16
 694:	0e 0f       	add	r16, r30
 696:	1f 1f       	adc	r17, r31
 698:	1e c0       	rjmp	.+60     	; 0x6d6 <N5110_Data+0x6a>
 69a:	28 81       	ld	r18, Y
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	20 52       	subi	r18, 0x20	; 32
 6a0:	31 09       	sbc	r19, r1
 6a2:	f9 01       	movw	r30, r18
 6a4:	ee 0f       	add	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	ee 0f       	add	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	e2 0f       	add	r30, r18
 6ae:	f3 1f       	adc	r31, r19
 6b0:	e7 58       	subi	r30, 0x87	; 135
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	ee 0d       	add	r30, r14
 6b6:	ff 1d       	adc	r31, r15
 6b8:	80 81       	ld	r24, Z
 6ba:	85 d1       	rcall	.+778    	; 0x9c6 <SPI_Write>
 6bc:	8f ef       	ldi	r24, 0xFF	; 255
 6be:	e8 1a       	sub	r14, r24
 6c0:	f8 0a       	sbc	r15, r24
 6c2:	85 e0       	ldi	r24, 0x05	; 5
 6c4:	e8 16       	cp	r14, r24
 6c6:	f1 04       	cpc	r15, r1
 6c8:	41 f7       	brne	.-48     	; 0x69a <N5110_Data+0x2e>
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	7c d1       	rcall	.+760    	; 0x9c6 <SPI_Write>
 6ce:	21 96       	adiw	r28, 0x01	; 1
 6d0:	0c 17       	cp	r16, r28
 6d2:	1d 07       	cpc	r17, r29
 6d4:	19 f0       	breq	.+6      	; 0x6dc <N5110_Data+0x70>
 6d6:	e1 2c       	mov	r14, r1
 6d8:	f1 2c       	mov	r15, r1
 6da:	df cf       	rjmp	.-66     	; 0x69a <N5110_Data+0x2e>
 6dc:	6a d1       	rcall	.+724    	; 0x9b2 <SPI_SS_Disable>
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	08 95       	ret

000006ec <N5110_Reset>:
 6ec:	28 98       	cbi	0x05, 0	; 5
 6ee:	2f ef       	ldi	r18, 0xFF	; 255
 6f0:	80 e7       	ldi	r24, 0x70	; 112
 6f2:	92 e0       	ldi	r25, 0x02	; 2
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <N5110_Reset+0x8>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <N5110_Reset+0x12>
 6fe:	00 00       	nop
 700:	28 9a       	sbi	0x05, 0	; 5
 702:	08 95       	ret

00000704 <N5110_init>:
 704:	f3 df       	rcall	.-26     	; 0x6ec <N5110_Reset>
 706:	81 e2       	ldi	r24, 0x21	; 33
 708:	a7 df       	rcall	.-178    	; 0x658 <N5110_Cmnd>
 70a:	80 ec       	ldi	r24, 0xC0	; 192
 70c:	a5 df       	rcall	.-182    	; 0x658 <N5110_Cmnd>
 70e:	87 e0       	ldi	r24, 0x07	; 7
 710:	a3 df       	rcall	.-186    	; 0x658 <N5110_Cmnd>
 712:	83 e1       	ldi	r24, 0x13	; 19
 714:	a1 df       	rcall	.-190    	; 0x658 <N5110_Cmnd>
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	9f df       	rcall	.-194    	; 0x658 <N5110_Cmnd>
 71a:	8c e0       	ldi	r24, 0x0C	; 12
 71c:	9d cf       	rjmp	.-198    	; 0x658 <N5110_Cmnd>
 71e:	08 95       	ret

00000720 <lcd_setXY>:
 720:	cf 93       	push	r28
 722:	c6 2f       	mov	r28, r22
 724:	99 df       	rcall	.-206    	; 0x658 <N5110_Cmnd>
 726:	8c 2f       	mov	r24, r28
 728:	97 df       	rcall	.-210    	; 0x658 <N5110_Cmnd>
 72a:	cf 91       	pop	r28
 72c:	08 95       	ret

0000072e <N5110_clear>:
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	3d d1       	rcall	.+634    	; 0x9ae <SPI_SS_Enable>
 734:	29 9a       	sbi	0x05, 1	; 5
 736:	c8 ef       	ldi	r28, 0xF8	; 248
 738:	d1 e0       	ldi	r29, 0x01	; 1
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	44 d1       	rcall	.+648    	; 0x9c6 <SPI_Write>
 73e:	21 97       	sbiw	r28, 0x01	; 1
 740:	e1 f7       	brne	.-8      	; 0x73a <N5110_clear+0xc>
 742:	29 98       	cbi	0x05, 1	; 5
 744:	36 d1       	rcall	.+620    	; 0x9b2 <SPI_SS_Disable>
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	08 95       	ret

0000074c <LCDBuildChar>:
unsigned char wordToGuess[17] = {' '};
unsigned char WTG_Index = 0;
unsigned char lastClicked;

void LCDBuildChar(unsigned char loc, unsigned char *p)
{
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
	unsigned char i;
	if(loc<8) //If valid address
 754:	88 30       	cpi	r24, 0x08	; 8
 756:	70 f4       	brcc	.+28     	; 0x774 <LCDBuildChar+0x28>
 758:	8b 01       	movw	r16, r22
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
 75a:	88 0f       	add	r24, r24
 75c:	88 0f       	add	r24, r24
 75e:	88 0f       	add	r24, r24
 760:	80 5c       	subi	r24, 0xC0	; 192
 762:	ff dc       	rcall	.-1538   	; 0x162 <LCD_WriteCommand>
 764:	e8 01       	movw	r28, r16
 766:	08 5f       	subi	r16, 0xF8	; 248
 768:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
 76a:	89 91       	ld	r24, Y+
 76c:	1d dd       	rcall	.-1478   	; 0x1a8 <LCD_WriteData>
{
	unsigned char i;
	if(loc<8) //If valid address
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		for(i=0;i<8;i++)
 76e:	c0 17       	cp	r28, r16
 770:	d1 07       	cpc	r29, r17
 772:	d9 f7       	brne	.-10     	; 0x76a <LCDBuildChar+0x1e>
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
}
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	08 95       	ret

0000077e <LCD_Tick>:
enum LCD_States{Init, Wait, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
	switch (state)
 77e:	82 30       	cpi	r24, 0x02	; 2
 780:	91 05       	cpc	r25, r1
 782:	81 f0       	breq	.+32     	; 0x7a4 <LCD_Tick+0x26>
 784:	83 30       	cpi	r24, 0x03	; 3
 786:	91 05       	cpc	r25, r1
 788:	b1 f0       	breq	.+44     	; 0x7b6 <LCD_Tick+0x38>
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	11 f5       	brne	.+68     	; 0x7d2 <LCD_Tick+0x54>
	{
		case Init : state = WelcomeLCD;
					LCD_ClearScreen();
 78e:	f2 dc       	rcall	.-1564   	; 0x174 <LCD_ClearScreen>
					SPI_Init();
 790:	12 d1       	rcall	.+548    	; 0x9b6 <SPI_Init>
					N5110_init();
 792:	b8 df       	rcall	.-144    	; 0x704 <N5110_init>
 794:	cc df       	rcall	.-104    	; 0x72e <N5110_clear>
					N5110_clear();
 796:	60 e8       	ldi	r22, 0x80	; 128
					lcd_setXY(0x40,0x80);
 798:	80 e4       	ldi	r24, 0x40	; 64
 79a:	c2 df       	rcall	.-124    	; 0x720 <lcd_setXY>
 79c:	81 e6       	ldi	r24, 0x61	; 97
					N5110_Data("Hangman!");
 79e:	91 e0       	ldi	r25, 0x01	; 1
 7a0:	65 df       	rcall	.-310    	; 0x66c <N5110_Data>
 7a2:	1f c0       	rjmp	.+62     	; 0x7e2 <LCD_Tick+0x64>
					
					
					
		break;
 7a4:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <count>
		case Wait : 
		break;
		case WelcomeLCD : if(count <= 51){ state = WelcomeLCD;}
 7a8:	84 33       	cpi	r24, 0x34	; 52
 7aa:	d8 f0       	brcs	.+54     	; 0x7e2 <LCD_Tick+0x64>
 7ac:	e3 dc       	rcall	.-1594   	; 0x174 <LCD_ClearScreen>
						  else if(count > 51){state = P1InputLCD;
						  LCD_ClearScreen(); 
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <LCDindex>
						  LCDindex = 1;}
 7b4:	60 c0       	rjmp	.+192    	; 0x876 <LCD_Tick+0xf8>
 7b6:	80 b1       	in	r24, 0x00	; 0
		break;
		case P1InputLCD : state = P1InputLCD;
						if(GetBit(~PINA, 6)){
 7b8:	80 95       	com	r24
 7ba:	86 ff       	sbrs	r24, 6
 7bc:	5c c0       	rjmp	.+184    	; 0x876 <LCD_Tick+0xf8>
							state = P2InputLCD;
							LCD_ClearScreen();
 7be:	da dc       	rcall	.-1612   	; 0x174 <LCD_ClearScreen>
 7c0:	6a e6       	ldi	r22, 0x6A	; 106
							LCD_DisplayString(17,"16 Letters MAX");	
 7c2:	71 e0       	ldi	r23, 0x01	; 1
 7c4:	81 e1       	ldi	r24, 0x11	; 17
 7c6:	f9 dc       	rcall	.-1550   	; 0x1ba <LCD_DisplayString>
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	d7 dc       	rcall	.-1618   	; 0x17a <LCD_Cursor>
							LCD_Cursor(1);
 7cc:	84 e0       	ldi	r24, 0x04	; 4
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	08 95       	ret
						  LCD_ClearScreen(); 
						  LCDindex = 1;}
		break;
		case P1InputLCD : state = P1InputLCD;
						if(GetBit(~PINA, 6)){
							state = P2InputLCD;
 7d2:	82 30       	cpi	r24, 0x02	; 2
 7d4:	91 05       	cpc	r25, r1
 7d6:	29 f0       	breq	.+10     	; 0x7e2 <LCD_Tick+0x64>
		break;
		case LoseLCD :
		break;
	}//end Transitions
	
	switch (state)
 7d8:	83 30       	cpi	r24, 0x03	; 3
 7da:	91 05       	cpc	r25, r1
 7dc:	09 f0       	breq	.+2      	; 0x7e0 <LCD_Tick+0x62>
 7de:	76 c0       	rjmp	.+236    	; 0x8cc <LCD_Tick+0x14e>
 7e0:	4a c0       	rjmp	.+148    	; 0x876 <LCD_Tick+0xf8>
 7e2:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <LCDindex>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
			for(LCDindex = 0; LCDindex < 16; LCDindex++){
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	8f 5f       	subi	r24, 0xFF	; 255
				LCD_Cursor(LCDindex + 1);
 7ea:	c7 dc       	rcall	.-1650   	; 0x17a <LCD_Cursor>
 7ec:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <LCDindex>
				LCD_WriteData(welcomeMessage[LCDindex]);
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	e7 5e       	subi	r30, 0xE7	; 231
 7f4:	fe 4f       	sbci	r31, 0xFE	; 254
 7f6:	80 81       	ld	r24, Z
 7f8:	d7 dc       	rcall	.-1618   	; 0x1a8 <LCD_WriteData>
 7fa:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <LCDindex>
 7fe:	8f 5f       	subi	r24, 0xFF	; 255
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
			for(LCDindex = 0; LCDindex < 16; LCDindex++){
 800:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <LCDindex>
 804:	80 31       	cpi	r24, 0x10	; 16
 806:	80 f3       	brcs	.-32     	; 0x7e8 <LCD_Tick+0x6a>
 808:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <welcomeMessage>
 80c:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <front>
				LCD_WriteData(welcomeMessage[LCDindex]);
			}
		
		
		
		front = welcomeMessage[0];
 810:	e9 e1       	ldi	r30, 0x19	; 25
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	2c e5       	ldi	r18, 0x5C	; 92
 816:	31 e0       	ldi	r19, 0x01	; 1
 818:	81 81       	ldd	r24, Z+1	; 0x01
 81a:	81 93       	st	Z+, r24
		
		for (unsigned char j = 0; j < 67; j++) {
			welcomeMessage[j] = welcomeMessage[j + 1];
 81c:	2e 17       	cp	r18, r30
		
		
		
		front = welcomeMessage[0];
		
		for (unsigned char j = 0; j < 67; j++) {
 81e:	3f 07       	cpc	r19, r31
 820:	d9 f7       	brne	.-10     	; 0x818 <LCD_Tick+0x9a>
			welcomeMessage[j] = welcomeMessage[j + 1];
		}
		// put the saved character on the end
		welcomeMessage[67] = front;
 822:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <character>
		
		LCDBuildChar(0, customChar);
 826:	61 e1       	ldi	r22, 0x11	; 17
 828:	71 e0       	ldi	r23, 0x01	; 1
			LCD_Cursor(17);
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	8f df       	rcall	.-226    	; 0x74c <LCDBuildChar>
			LCD_WriteData(0x00);
 82e:	81 e1       	ldi	r24, 0x11	; 17
 830:	a4 dc       	rcall	.-1720   	; 0x17a <LCD_Cursor>
			LCD_Cursor(20);
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	b9 dc       	rcall	.-1678   	; 0x1a8 <LCD_WriteData>
			LCD_WriteData(0x00);
 836:	84 e1       	ldi	r24, 0x14	; 20
 838:	a0 dc       	rcall	.-1728   	; 0x17a <LCD_Cursor>
			LCD_Cursor(23);
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	b5 dc       	rcall	.-1686   	; 0x1a8 <LCD_WriteData>
			LCD_WriteData(0x00);
 83e:	87 e1       	ldi	r24, 0x17	; 23
 840:	9c dc       	rcall	.-1736   	; 0x17a <LCD_Cursor>
 842:	80 e0       	ldi	r24, 0x00	; 0
			LCD_Cursor(26);
 844:	b1 dc       	rcall	.-1694   	; 0x1a8 <LCD_WriteData>
 846:	8a e1       	ldi	r24, 0x1A	; 26
 848:	98 dc       	rcall	.-1744   	; 0x17a <LCD_Cursor>
			LCD_WriteData(0x00);
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	ad dc       	rcall	.-1702   	; 0x1a8 <LCD_WriteData>
 84e:	8d e1       	ldi	r24, 0x1D	; 29
			LCD_Cursor(29);
 850:	94 dc       	rcall	.-1752   	; 0x17a <LCD_Cursor>
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	a9 dc       	rcall	.-1710   	; 0x1a8 <LCD_WriteData>
			LCD_WriteData(0x00);
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	90 dc       	rcall	.-1760   	; 0x17a <LCD_Cursor>
 85a:	80 e0       	ldi	r24, 0x00	; 0
			LCD_Cursor(32);
 85c:	a5 dc       	rcall	.-1718   	; 0x1a8 <LCD_WriteData>
 85e:	83 e2       	ldi	r24, 0x23	; 35
 860:	8c dc       	rcall	.-1768   	; 0x17a <LCD_Cursor>
			LCD_WriteData(0x00);
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	a1 dc       	rcall	.-1726   	; 0x1a8 <LCD_WriteData>
 866:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <count>
			LCD_Cursor(35);
 86a:	8f 5f       	subi	r24, 0xFF	; 255
 86c:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <count>
			LCD_WriteData(0x00);
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	90 e0       	ldi	r25, 0x00	; 0
		
		count++;
 874:	08 95       	ret
 876:	80 b1       	in	r24, 0x00	; 0
 878:	80 95       	com	r24
 87a:	85 ff       	sbrs	r24, 5
 87c:	18 c0       	rjmp	.+48     	; 0x8ae <LCD_Tick+0x130>
		
			
		break;
 87e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <WTG_Index>
 882:	80 31       	cpi	r24, 0x10	; 16
		case P1InputLCD :
			
			if(GetBit(~PINA,5)){
 884:	a0 f4       	brcc	.+40     	; 0x8ae <LCD_Tick+0x130>
 886:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <LCDindex>
				if(WTG_Index < 16){
 88a:	9f 5f       	subi	r25, 0xFF	; 255
 88c:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <LCDindex>
 890:	e8 2f       	mov	r30, r24
					LCDindex++;
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	e0 50       	subi	r30, 0x00	; 0
 896:	ff 4f       	sbci	r31, 0xFF	; 255
 898:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <lastClicked>
					wordToGuess[WTG_Index] = lastClicked;
 89c:	90 83       	st	Z, r25
 89e:	8f 5f       	subi	r24, 0xFF	; 255
 8a0:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <WTG_Index>
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
					WTG_Index++;
 8aa:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <click>
					character = ' ';
 8ae:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <LCDindex>
 8b2:	63 dc       	rcall	.-1850   	; 0x17a <LCD_Cursor>
					click = 0;
 8b4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <character>
				}
				
			}
			LCD_Cursor(LCDindex);
 8b8:	80 32       	cpi	r24, 0x20	; 32
 8ba:	31 f0       	breq	.+12     	; 0x8c8 <LCD_Tick+0x14a>
 8bc:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <lastClicked>
			if(character != ' '){
 8c0:	73 dc       	rcall	.-1818   	; 0x1a8 <LCD_WriteData>
 8c2:	83 e0       	ldi	r24, 0x03	; 3
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	08 95       	ret
				lastClicked = character;
 8c8:	83 e0       	ldi	r24, 0x03	; 3
 8ca:	90 e0       	ldi	r25, 0x00	; 0
				LCD_WriteData(character);
 8cc:	08 95       	ret

000008ce <main>:
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	8a b9       	out	0x0a, r24	; 10
 8d2:	1b b8       	out	0x0b, r1	; 11
 8d4:	81 b9       	out	0x01, r24	; 1
 8d6:	82 b9       	out	0x02, r24	; 2
 8d8:	84 b9       	out	0x04, r24	; 4
		break;
	}//end Initializations
	
	
	return state;
}
 8da:	15 b8       	out	0x05, r1	; 5
int main(void)
{
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
	DDRA = 0xFF; PORTA = 0xFF; // LCD control lines
		DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
		DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 8dc:	80 ef       	ldi	r24, 0xF0	; 240
 8de:	87 b9       	out	0x07, r24	; 7
 8e0:	8f e0       	ldi	r24, 0x0F	; 15
 8e2:	88 b9       	out	0x08, r24	; 8
	unsigned long LCDPeriod = 500;
	unsigned long KPPeriod = 300;
	unsigned long period = 100;
	unsigned char i = 0;
	
	Tasks[i].state = Init;
 8e4:	ea e5       	ldi	r30, 0x5A	; 90
 8e6:	f3 e0       	ldi	r31, 0x03	; 3
 8e8:	10 82       	st	Z, r1
	Tasks[i].period = LCDPeriod;
 8ea:	84 ef       	ldi	r24, 0xF4	; 244
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	a0 e0       	ldi	r26, 0x00	; 0
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	81 83       	std	Z+1, r24	; 0x01
 8f4:	92 83       	std	Z+2, r25	; 0x02
 8f6:	a3 83       	std	Z+3, r26	; 0x03
 8f8:	b4 83       	std	Z+4, r27	; 0x04
	Tasks[i].elapsedTime = LCDPeriod;
 8fa:	85 83       	std	Z+5, r24	; 0x05
 8fc:	96 83       	std	Z+6, r25	; 0x06
 8fe:	a7 83       	std	Z+7, r26	; 0x07
 900:	b0 87       	std	Z+8, r27	; 0x08
	Tasks[i].TickFct = &LCD_Tick;
 902:	8f eb       	ldi	r24, 0xBF	; 191
 904:	93 e0       	ldi	r25, 0x03	; 3
 906:	92 87       	std	Z+10, r25	; 0x0a
 908:	81 87       	std	Z+9, r24	; 0x09
	i++;
	Tasks[i].state = Wait_KP;
 90a:	13 86       	std	Z+11, r1	; 0x0b
	Tasks[i].period = KPPeriod;
 90c:	8c e2       	ldi	r24, 0x2C	; 44
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	a0 e0       	ldi	r26, 0x00	; 0
 912:	b0 e0       	ldi	r27, 0x00	; 0
 914:	84 87       	std	Z+12, r24	; 0x0c
 916:	95 87       	std	Z+13, r25	; 0x0d
 918:	a6 87       	std	Z+14, r26	; 0x0e
 91a:	b7 87       	std	Z+15, r27	; 0x0f
	Tasks[i].elapsedTime = KPPeriod;
 91c:	80 8b       	std	Z+16, r24	; 0x10
 91e:	91 8b       	std	Z+17, r25	; 0x11
 920:	a2 8b       	std	Z+18, r26	; 0x12
 922:	b3 8b       	std	Z+19, r27	; 0x13
	Tasks[i].TickFct = &KeypadTick;
 924:	8a eb       	ldi	r24, 0xBA	; 186
 926:	91 e0       	ldi	r25, 0x01	; 1
 928:	95 8b       	std	Z+21, r25	; 0x15
 92a:	84 8b       	std	Z+20, r24	; 0x14
	
	//LCDBuildChar(0, customChar);
	TimerSet(period);
 92c:	64 e6       	ldi	r22, 0x64	; 100
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	5b dc       	rcall	.-1866   	; 0x1ec <TimerSet>
	TimerOn();
 936:	6b dc       	rcall	.-1834   	; 0x20e <TimerOn>
	LCD_init();
 938:	28 dc       	rcall	.-1968   	; 0x18a <LCD_init>
 93a:	0f 2e       	mov	r0, r31
 93c:	f0 e7       	ldi	r31, 0x70	; 112
 93e:	ef 2e       	mov	r14, r31
 940:	f3 e0       	ldi	r31, 0x03	; 3
 942:	ff 2e       	mov	r15, r31
 944:	f0 2d       	mov	r31, r0
 946:	ca e5       	ldi	r28, 0x5A	; 90
 948:	d3 e0       	ldi	r29, 0x03	; 3
 94a:	8e 01       	movw	r16, r28
 94c:	4d 81       	ldd	r20, Y+5	; 0x05
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 2; i++ ) {
			// Task is ready to tick
			if ( Tasks[i].elapsedTime == Tasks[i].period ) {
 94e:	5e 81       	ldd	r21, Y+6	; 0x06
 950:	6f 81       	ldd	r22, Y+7	; 0x07
 952:	78 85       	ldd	r23, Y+8	; 0x08
 954:	89 81       	ldd	r24, Y+1	; 0x01
 956:	9a 81       	ldd	r25, Y+2	; 0x02
 958:	ab 81       	ldd	r26, Y+3	; 0x03
 95a:	bc 81       	ldd	r27, Y+4	; 0x04
 95c:	48 17       	cp	r20, r24
 95e:	59 07       	cpc	r21, r25
 960:	6a 07       	cpc	r22, r26
 962:	7b 07       	cpc	r23, r27
 964:	61 f4       	brne	.+24     	; 0x97e <main+0xb0>
 966:	88 81       	ld	r24, Y
				// Setting next state for task
				Tasks[i].state = Tasks[i].TickFct(Tasks[i].state);
 968:	e9 85       	ldd	r30, Y+9	; 0x09
 96a:	fa 85       	ldd	r31, Y+10	; 0x0a
 96c:	08 2e       	mov	r0, r24
 96e:	00 0c       	add	r0, r0
 970:	99 0b       	sbc	r25, r25
 972:	09 95       	icall
 974:	88 83       	st	Y, r24
 976:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				Tasks[i].elapsedTime = 0;
 978:	1e 82       	std	Y+6, r1	; 0x06
 97a:	1f 82       	std	Y+7, r1	; 0x07
 97c:	18 86       	std	Y+8, r1	; 0x08
 97e:	f8 01       	movw	r30, r16
			}
			Tasks[i].elapsedTime += period;
 980:	85 81       	ldd	r24, Z+5	; 0x05
 982:	96 81       	ldd	r25, Z+6	; 0x06
 984:	a7 81       	ldd	r26, Z+7	; 0x07
 986:	b0 85       	ldd	r27, Z+8	; 0x08
 988:	8c 59       	subi	r24, 0x9C	; 156
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	af 4f       	sbci	r26, 0xFF	; 255
 98e:	bf 4f       	sbci	r27, 0xFF	; 255
 990:	85 83       	std	Z+5, r24	; 0x05
 992:	96 83       	std	Z+6, r25	; 0x06
 994:	a7 83       	std	Z+7, r26	; 0x07
 996:	b0 87       	std	Z+8, r27	; 0x08
 998:	2b 96       	adiw	r28, 0x0b	; 11
 99a:	ce 15       	cp	r28, r14
	
	
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 2; i++ ) {
 99c:	df 05       	cpc	r29, r15
 99e:	a9 f6       	brne	.-86     	; 0x94a <main+0x7c>
 9a0:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <TimerFlag>
				Tasks[i].elapsedTime = 0;
			}
			Tasks[i].elapsedTime += period;
		}
		
		while (!TimerFlag){}
 9a4:	88 23       	and	r24, r24
 9a6:	e1 f3       	breq	.-8      	; 0x9a0 <main+0xd2>
 9a8:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <TimerFlag>
		TimerFlag = 0;
 9ac:	cc cf       	rjmp	.-104    	; 0x946 <main+0x78>

000009ae <SPI_SS_Enable>:
		
	}
 9ae:	2c 98       	cbi	0x05, 4	; 5
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
 9b0:	08 95       	ret

000009b2 <SPI_SS_Disable>:
 9b2:	2c 9a       	sbi	0x05, 4	; 5
 9b4:	08 95       	ret

000009b6 <SPI_Init>:
 9b6:	83 eb       	ldi	r24, 0xB3	; 179
 9b8:	84 b9       	out	0x04, r24	; 4
 9ba:	28 9a       	sbi	0x05, 0	; 5
 9bc:	26 98       	cbi	0x04, 6	; 4
 9be:	2c 9a       	sbi	0x05, 4	; 5
 9c0:	81 e5       	ldi	r24, 0x51	; 81
 9c2:	8c bd       	out	0x2c, r24	; 44
 9c4:	08 95       	ret

000009c6 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
 9c6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
 9c8:	0d b4       	in	r0, 0x2d	; 45
 9ca:	07 fe       	sbrs	r0, 7
 9cc:	fd cf       	rjmp	.-6      	; 0x9c8 <SPI_Write+0x2>
}
 9ce:	08 95       	ret

000009d0 <__tablejump2__>:
 9d0:	ee 0f       	add	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	00 24       	eor	r0, r0
 9d6:	00 1c       	adc	r0, r0
 9d8:	0b be       	out	0x3b, r0	; 59
 9da:	07 90       	elpm	r0, Z+
 9dc:	f6 91       	elpm	r31, Z
 9de:	e0 2d       	mov	r30, r0
 9e0:	09 94       	ijmp

000009e2 <_exit>:
 9e2:	f8 94       	cli

000009e4 <__stop_program>:
 9e4:	ff cf       	rjmp	.-2      	; 0x9e4 <__stop_program>
