
Hangman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000eba  00800100  00001766  000017fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001766  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800fba  00800fba  000026b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00002728  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025f3  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba5  00000000  00000000  00004f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019eb  00000000  00000000  00005ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  000074c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a62  00000000  00000000  000078b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f5  00000000  00000000  00008312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00009507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
       2:	00 00       	nop
       4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c0       	rjmp	.+314    	; 0x164 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c0       	rjmp	.+310    	; 0x164 <__bad_interrupt>
      2e:	00 00       	nop
      30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
      32:	00 00       	nop
      34:	8d c1       	rjmp	.+794    	; 0x350 <__vector_13>
      36:	00 00       	nop
      38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c0       	rjmp	.+286    	; 0x164 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
      52:	00 00       	nop
      54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
      56:	00 00       	nop
      58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c0       	rjmp	.+262    	; 0x164 <__bad_interrupt>
      5e:	00 00       	nop
      60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
      62:	00 00       	nop
      64:	7f c0       	rjmp	.+254    	; 0x164 <__bad_interrupt>
      66:	00 00       	nop
      68:	7d c0       	rjmp	.+250    	; 0x164 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c0       	rjmp	.+238    	; 0x164 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c0       	rjmp	.+234    	; 0x164 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c0       	rjmp	.+230    	; 0x164 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c0       	rjmp	.+226    	; 0x164 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c0       	rjmp	.+222    	; 0x164 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c0       	rjmp	.+218    	; 0x164 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ae 02       	muls	r26, r30
      8e:	d7 03       	fmuls	r21, r23
      90:	d7 03       	fmuls	r21, r23
      92:	d7 03       	fmuls	r21, r23
      94:	d7 03       	fmuls	r21, r23
      96:	d7 03       	fmuls	r21, r23
      98:	d7 03       	fmuls	r21, r23
      9a:	d7 03       	fmuls	r21, r23
      9c:	d7 03       	fmuls	r21, r23
      9e:	d7 03       	fmuls	r21, r23
      a0:	d7 03       	fmuls	r21, r23
      a2:	d7 03       	fmuls	r21, r23
      a4:	d7 03       	fmuls	r21, r23
      a6:	d7 03       	fmuls	r21, r23
      a8:	d7 03       	fmuls	r21, r23
      aa:	d7 03       	fmuls	r21, r23
      ac:	d7 03       	fmuls	r21, r23
      ae:	d7 03       	fmuls	r21, r23
      b0:	d7 03       	fmuls	r21, r23
      b2:	d7 03       	fmuls	r21, r23
      b4:	d7 03       	fmuls	r21, r23
      b6:	d7 03       	fmuls	r21, r23
      b8:	d7 03       	fmuls	r21, r23
      ba:	d7 03       	fmuls	r21, r23
      bc:	d7 03       	fmuls	r21, r23
      be:	d7 03       	fmuls	r21, r23
      c0:	d7 03       	fmuls	r21, r23
      c2:	d7 03       	fmuls	r21, r23
      c4:	d7 03       	fmuls	r21, r23
      c6:	d7 03       	fmuls	r21, r23
      c8:	d7 03       	fmuls	r21, r23
      ca:	d7 03       	fmuls	r21, r23
      cc:	d7 03       	fmuls	r21, r23
      ce:	d7 03       	fmuls	r21, r23
      d0:	d7 03       	fmuls	r21, r23
      d2:	d7 03       	fmuls	r21, r23
      d4:	d7 03       	fmuls	r21, r23
      d6:	d7 03       	fmuls	r21, r23
      d8:	d7 03       	fmuls	r21, r23
      da:	d7 03       	fmuls	r21, r23
      dc:	d7 03       	fmuls	r21, r23
      de:	d7 03       	fmuls	r21, r23
      e0:	d7 03       	fmuls	r21, r23
      e2:	d7 03       	fmuls	r21, r23
      e4:	d7 03       	fmuls	r21, r23
      e6:	d7 03       	fmuls	r21, r23
      e8:	d7 03       	fmuls	r21, r23
      ea:	d7 03       	fmuls	r21, r23
      ec:	d7 03       	fmuls	r21, r23
      ee:	b4 02       	muls	r27, r20
      f0:	ba 02       	muls	r27, r26
      f2:	dd 02       	muls	r29, r29
      f4:	00 03       	mulsu	r16, r16
      f6:	23 03       	mulsu	r18, r19
      f8:	46 03       	mulsu	r20, r22
      fa:	69 03       	fmul	r22, r17
      fc:	8c 03       	fmulsu	r16, r20
      fe:	b0 03       	fmuls	r19, r16
     100:	4d 04       	cpc	r4, r13
     102:	59 04       	cpc	r5, r9
     104:	75 04       	cpc	r7, r5
     106:	91 04       	cpc	r9, r1
     108:	ad 04       	cpc	r10, r13
     10a:	c9 04       	cpc	r12, r9
     10c:	e5 04       	cpc	r14, r5
     10e:	ff 04       	cpc	r15, r15
     110:	12 05       	cpc	r17, r2
     112:	3d 05       	cpc	r19, r13
     114:	fb 06       	cpc	r15, r27
     116:	39 07       	cpc	r19, r25
     118:	45 07       	cpc	r20, r21
     11a:	6e 07       	cpc	r22, r30
     11c:	89 07       	cpc	r24, r25
     11e:	b9 07       	cpc	r27, r25
     120:	d8 07       	cpc	r29, r24
     122:	f0 07       	cpc	r31, r16
     124:	1f 08       	sbc	r1, r15

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d0 e4       	ldi	r29, 0x40	; 64
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	1f e0       	ldi	r17, 0x0F	; 15
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	e6 e6       	ldi	r30, 0x66	; 102
     13a:	f7 e1       	ldi	r31, 0x17	; 23
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0b bf       	out	0x3b, r16	; 59
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x14>
     142:	07 90       	elpm	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	aa 3b       	cpi	r26, 0xBA	; 186
     148:	b1 07       	cpc	r27, r17
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0x10>

0000014c <__do_clear_bss>:
     14c:	20 e1       	ldi	r18, 0x10	; 16
     14e:	aa eb       	ldi	r26, 0xBA	; 186
     150:	bf e0       	ldi	r27, 0x0F	; 15
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
     156:	a4 31       	cpi	r26, 0x14	; 20
     158:	b2 07       	cpc	r27, r18
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
     15c:	0e 94 45 09 	call	0x128a	; 0x128a <main>
     160:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <_exit>

00000164 <__bad_interrupt>:
     164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <LT_Tick>:
	set_PWM(0);
}

void PWM_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	91 05       	cpc	r25, r1
     16a:	a9 f0       	breq	.+42     	; 0x196 <LT_Tick+0x30>
     16c:	1c f4       	brge	.+6      	; 0x174 <LT_Tick+0xe>
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	49 f0       	breq	.+18     	; 0x184 <LT_Tick+0x1e>
     172:	24 c0       	rjmp	.+72     	; 0x1bc <LT_Tick+0x56>
     174:	82 30       	cpi	r24, 0x02	; 2
     176:	91 05       	cpc	r25, r1
     178:	99 f0       	breq	.+38     	; 0x1a0 <LT_Tick+0x3a>
     17a:	83 30       	cpi	r24, 0x03	; 3
     17c:	91 05       	cpc	r25, r1
     17e:	09 f4       	brne	.+2      	; 0x182 <LT_Tick+0x1c>
     180:	57 c0       	rjmp	.+174    	; 0x230 <LT_Tick+0xca>
     182:	1c c0       	rjmp	.+56     	; 0x1bc <LT_Tick+0x56>
     184:	10 92 0e 10 	sts	0x100E, r1	; 0x80100e <incrementTime+0x1>
     188:	10 92 0d 10 	sts	0x100D, r1	; 0x80100d <incrementTime>
     18c:	10 92 06 10 	sts	0x1006, r1	; 0x801006 <startTimer>
     190:	10 92 10 10 	sts	0x1010, r1	; 0x801010 <stopTimer>
     194:	4d c0       	rjmp	.+154    	; 0x230 <LT_Tick+0xca>
     196:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <startTimer>
     19a:	81 11       	cpse	r24, r1
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <LT_Tick+0x64>
     19e:	48 c0       	rjmp	.+144    	; 0x230 <LT_Tick+0xca>
     1a0:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <startTimer>
     1a4:	88 23       	and	r24, r24
     1a6:	29 f0       	breq	.+10     	; 0x1b2 <LT_Tick+0x4c>
     1a8:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <stopTimer>
     1ac:	88 23       	and	r24, r24
     1ae:	69 f0       	breq	.+26     	; 0x1ca <LT_Tick+0x64>
     1b0:	1c c0       	rjmp	.+56     	; 0x1ea <LT_Tick+0x84>
     1b2:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <stopTimer>
     1b6:	88 23       	and	r24, r24
     1b8:	81 f1       	breq	.+96     	; 0x21a <LT_Tick+0xb4>
     1ba:	07 c0       	rjmp	.+14     	; 0x1ca <LT_Tick+0x64>
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	91 05       	cpc	r25, r1
     1c0:	21 f0       	breq	.+8      	; 0x1ca <LT_Tick+0x64>
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	91 05       	cpc	r25, r1
     1c6:	69 f0       	breq	.+26     	; 0x1e2 <LT_Tick+0x7c>
     1c8:	08 95       	ret
     1ca:	80 91 0d 10 	lds	r24, 0x100D	; 0x80100d <incrementTime>
     1ce:	90 91 0e 10 	lds	r25, 0x100E	; 0x80100e <incrementTime+0x1>
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	90 93 0e 10 	sts	0x100E, r25	; 0x80100e <incrementTime+0x1>
     1d8:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <incrementTime>
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	08 95       	ret
     1e2:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <startTimer>
     1e6:	88 23       	and	r24, r24
     1e8:	c1 f0       	breq	.+48     	; 0x21a <LT_Tick+0xb4>
     1ea:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <stopTimer>
     1ee:	88 23       	and	r24, r24
     1f0:	a1 f0       	breq	.+40     	; 0x21a <LT_Tick+0xb4>
     1f2:	8e e2       	ldi	r24, 0x2E	; 46
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 86 0b 	call	0x170c	; 0x170c <eeprom_read_word>
     1fa:	80 93 11 10 	sts	0x1011, r24	; 0x801011 <prevHighScore>
     1fe:	60 91 0d 10 	lds	r22, 0x100D	; 0x80100d <incrementTime>
     202:	70 91 0e 10 	lds	r23, 0x100E	; 0x80100e <incrementTime+0x1>
     206:	99 27       	eor	r25, r25
     208:	68 17       	cp	r22, r24
     20a:	79 07       	cpc	r23, r25
     20c:	30 f4       	brcc	.+12     	; 0x21a <LT_Tick+0xb4>
     20e:	76 95       	lsr	r23
     210:	67 95       	ror	r22
     212:	8e e2       	ldi	r24, 0x2E	; 46
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 8b 0b 	call	0x1716	; 0x1716 <eeprom_update_word>
     21a:	10 92 0e 10 	sts	0x100E, r1	; 0x80100e <incrementTime+0x1>
     21e:	10 92 0d 10 	sts	0x100D, r1	; 0x80100d <incrementTime>
     222:	10 92 06 10 	sts	0x1006, r1	; 0x801006 <startTimer>
     226:	10 92 10 10 	sts	0x1010, r1	; 0x801010 <stopTimer>
     22a:	83 e0       	ldi	r24, 0x03	; 3
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	08 95       	ret
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	08 95       	ret

00000236 <delay_ms>:
     236:	18 16       	cp	r1, r24
     238:	19 06       	cpc	r1, r25
     23a:	5c f0       	brlt	.+22     	; 0x252 <delay_ms+0x1c>
     23c:	08 95       	ret
     23e:	00 00       	nop
     240:	21 50       	subi	r18, 0x01	; 1
     242:	31 09       	sbc	r19, r1
     244:	e1 f7       	brne	.-8      	; 0x23e <delay_ms+0x8>
     246:	4f 5f       	subi	r20, 0xFF	; 255
     248:	5f 4f       	sbci	r21, 0xFF	; 255
     24a:	84 17       	cp	r24, r20
     24c:	95 07       	cpc	r25, r21
     24e:	19 f4       	brne	.+6      	; 0x256 <delay_ms+0x20>
     250:	08 95       	ret
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	27 e0       	ldi	r18, 0x07	; 7
     258:	33 e0       	ldi	r19, 0x03	; 3
     25a:	f1 cf       	rjmp	.-30     	; 0x23e <delay_ms+0x8>

0000025c <LCD_WriteCommand>:
     25c:	10 98       	cbi	0x02, 0	; 2
     25e:	8b b9       	out	0x0b, r24	; 11
     260:	11 9a       	sbi	0x02, 1	; 2
     262:	00 00       	nop
     264:	11 98       	cbi	0x02, 1	; 2
     266:	82 e0       	ldi	r24, 0x02	; 2
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	e5 cf       	rjmp	.-54     	; 0x236 <delay_ms>
     26c:	08 95       	ret

0000026e <LCD_ClearScreen>:
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	f5 cf       	rjmp	.-22     	; 0x25c <LCD_WriteCommand>
     272:	08 95       	ret

00000274 <LCD_Cursor>:
     274:	81 31       	cpi	r24, 0x11	; 17
     276:	18 f4       	brcc	.+6      	; 0x27e <LCD_Cursor+0xa>
     278:	81 58       	subi	r24, 0x81	; 129
     27a:	f0 cf       	rjmp	.-32     	; 0x25c <LCD_WriteCommand>
     27c:	08 95       	ret
     27e:	81 55       	subi	r24, 0x51	; 81
     280:	ed cf       	rjmp	.-38     	; 0x25c <LCD_WriteCommand>
     282:	08 95       	ret

00000284 <LCD_init>:
     284:	84 e6       	ldi	r24, 0x64	; 100
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	d6 df       	rcall	.-84     	; 0x236 <delay_ms>
     28a:	88 e3       	ldi	r24, 0x38	; 56
     28c:	e7 df       	rcall	.-50     	; 0x25c <LCD_WriteCommand>
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	e5 df       	rcall	.-54     	; 0x25c <LCD_WriteCommand>
     292:	8f e0       	ldi	r24, 0x0F	; 15
     294:	e3 df       	rcall	.-58     	; 0x25c <LCD_WriteCommand>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	e1 df       	rcall	.-62     	; 0x25c <LCD_WriteCommand>
     29a:	8a e0       	ldi	r24, 0x0A	; 10
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	cb cf       	rjmp	.-106    	; 0x236 <delay_ms>
     2a0:	08 95       	ret

000002a2 <LCD_WriteData>:
     2a2:	10 9a       	sbi	0x02, 0	; 2
     2a4:	8b b9       	out	0x0b, r24	; 11
     2a6:	11 9a       	sbi	0x02, 1	; 2
     2a8:	00 00       	nop
     2aa:	11 98       	cbi	0x02, 1	; 2
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	c2 cf       	rjmp	.-124    	; 0x236 <delay_ms>
     2b2:	08 95       	ret

000002b4 <LCD_DisplayString>:
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	18 2f       	mov	r17, r24
     2be:	eb 01       	movw	r28, r22
     2c0:	d6 df       	rcall	.-84     	; 0x26e <LCD_ClearScreen>
     2c2:	88 81       	ld	r24, Y
     2c4:	88 23       	and	r24, r24
     2c6:	51 f0       	breq	.+20     	; 0x2dc <LCD_DisplayString+0x28>
     2c8:	01 e0       	ldi	r16, 0x01	; 1
     2ca:	01 0f       	add	r16, r17
     2cc:	81 2f       	mov	r24, r17
     2ce:	d2 df       	rcall	.-92     	; 0x274 <LCD_Cursor>
     2d0:	89 91       	ld	r24, Y+
     2d2:	e7 df       	rcall	.-50     	; 0x2a2 <LCD_WriteData>
     2d4:	10 2f       	mov	r17, r16
     2d6:	88 81       	ld	r24, Y
     2d8:	81 11       	cpse	r24, r1
     2da:	f6 cf       	rjmp	.-20     	; 0x2c8 <LCD_DisplayString+0x14>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <TimerSet>:
     2e6:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <_avr_timer_M>
     2ea:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <_avr_timer_M+0x1>
     2ee:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <_avr_timer_M+0x2>
     2f2:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <_avr_timer_M+0x3>
     2f6:	60 93 01 10 	sts	0x1001, r22	; 0x801001 <_avr_timer_cntcurr>
     2fa:	70 93 02 10 	sts	0x1002, r23	; 0x801002 <_avr_timer_cntcurr+0x1>
     2fe:	80 93 03 10 	sts	0x1003, r24	; 0x801003 <_avr_timer_cntcurr+0x2>
     302:	90 93 04 10 	sts	0x1004, r25	; 0x801004 <_avr_timer_cntcurr+0x3>
     306:	08 95       	ret

00000308 <TimerOn>:
     308:	8b e0       	ldi	r24, 0x0B	; 11
     30a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     30e:	8d e7       	ldi	r24, 0x7D	; 125
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     316:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     320:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     324:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     328:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_avr_timer_M>
     32c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_avr_timer_M+0x1>
     330:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <_avr_timer_M+0x2>
     334:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <_avr_timer_M+0x3>
     338:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <_avr_timer_cntcurr>
     33c:	90 93 02 10 	sts	0x1002, r25	; 0x801002 <_avr_timer_cntcurr+0x1>
     340:	a0 93 03 10 	sts	0x1003, r26	; 0x801003 <_avr_timer_cntcurr+0x2>
     344:	b0 93 04 10 	sts	0x1004, r27	; 0x801004 <_avr_timer_cntcurr+0x3>
     348:	8f b7       	in	r24, 0x3f	; 63
     34a:	80 68       	ori	r24, 0x80	; 128
     34c:	8f bf       	out	0x3f, r24	; 63
     34e:	08 95       	ret

00000350 <__vector_13>:
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	af 93       	push	r26
     360:	bf 93       	push	r27
     362:	80 91 01 10 	lds	r24, 0x1001	; 0x801001 <_avr_timer_cntcurr>
     366:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <_avr_timer_cntcurr+0x1>
     36a:	a0 91 03 10 	lds	r26, 0x1003	; 0x801003 <_avr_timer_cntcurr+0x2>
     36e:	b0 91 04 10 	lds	r27, 0x1004	; 0x801004 <_avr_timer_cntcurr+0x3>
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	a1 09       	sbc	r26, r1
     376:	b1 09       	sbc	r27, r1
     378:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <_avr_timer_cntcurr>
     37c:	90 93 02 10 	sts	0x1002, r25	; 0x801002 <_avr_timer_cntcurr+0x1>
     380:	a0 93 03 10 	sts	0x1003, r26	; 0x801003 <_avr_timer_cntcurr+0x2>
     384:	b0 93 04 10 	sts	0x1004, r27	; 0x801004 <_avr_timer_cntcurr+0x3>
     388:	89 2b       	or	r24, r25
     38a:	8a 2b       	or	r24, r26
     38c:	8b 2b       	or	r24, r27
     38e:	99 f4       	brne	.+38     	; 0x3b6 <__vector_13+0x66>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 05 10 	sts	0x1005, r24	; 0x801005 <TimerFlag>
     396:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_avr_timer_M>
     39a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_avr_timer_M+0x1>
     39e:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <_avr_timer_M+0x2>
     3a2:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <_avr_timer_M+0x3>
     3a6:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <_avr_timer_cntcurr>
     3aa:	90 93 02 10 	sts	0x1002, r25	; 0x801002 <_avr_timer_cntcurr+0x1>
     3ae:	a0 93 03 10 	sts	0x1003, r26	; 0x801003 <_avr_timer_cntcurr+0x2>
     3b2:	b0 93 04 10 	sts	0x1004, r27	; 0x801004 <_avr_timer_cntcurr+0x3>
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <GetKeypadKey>:
     3c8:	8f ee       	ldi	r24, 0xEF	; 239
     3ca:	88 b9       	out	0x08, r24	; 8
     3cc:	00 00       	nop
     3ce:	30 99       	sbic	0x06, 0	; 6
     3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <GetKeypadKey+0x18>
     3d2:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     3dc:	81 e3       	ldi	r24, 0x31	; 49
     3de:	08 95       	ret
     3e0:	31 99       	sbic	0x06, 1	; 6
     3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <GetKeypadKey+0x2a>
     3e4:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     3e8:	8f 5f       	subi	r24, 0xFF	; 255
     3ea:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     3ee:	84 e3       	ldi	r24, 0x34	; 52
     3f0:	08 95       	ret
     3f2:	32 99       	sbic	0x06, 2	; 6
     3f4:	07 c0       	rjmp	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f6:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     3fa:	8f 5f       	subi	r24, 0xFF	; 255
     3fc:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     400:	87 e3       	ldi	r24, 0x37	; 55
     402:	08 95       	ret
     404:	33 99       	sbic	0x06, 3	; 6
     406:	07 c0       	rjmp	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     408:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     412:	8a e2       	ldi	r24, 0x2A	; 42
     414:	08 95       	ret
     416:	8f ed       	ldi	r24, 0xDF	; 223
     418:	88 b9       	out	0x08, r24	; 8
     41a:	00 00       	nop
     41c:	30 99       	sbic	0x06, 0	; 6
     41e:	07 c0       	rjmp	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     420:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     42a:	82 e3       	ldi	r24, 0x32	; 50
     42c:	08 95       	ret
     42e:	31 99       	sbic	0x06, 1	; 6
     430:	07 c0       	rjmp	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     432:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     436:	8f 5f       	subi	r24, 0xFF	; 255
     438:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     43c:	85 e3       	ldi	r24, 0x35	; 53
     43e:	08 95       	ret
     440:	32 99       	sbic	0x06, 2	; 6
     442:	07 c0       	rjmp	.+14     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     444:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     44e:	88 e3       	ldi	r24, 0x38	; 56
     450:	08 95       	ret
     452:	33 99       	sbic	0x06, 3	; 6
     454:	07 c0       	rjmp	.+14     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     456:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     460:	80 e3       	ldi	r24, 0x30	; 48
     462:	08 95       	ret
     464:	8f eb       	ldi	r24, 0xBF	; 191
     466:	88 b9       	out	0x08, r24	; 8
     468:	00 00       	nop
     46a:	30 99       	sbic	0x06, 0	; 6
     46c:	07 c0       	rjmp	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     46e:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     478:	83 e3       	ldi	r24, 0x33	; 51
     47a:	08 95       	ret
     47c:	31 99       	sbic	0x06, 1	; 6
     47e:	07 c0       	rjmp	.+14     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     480:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     484:	8f 5f       	subi	r24, 0xFF	; 255
     486:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     48a:	86 e3       	ldi	r24, 0x36	; 54
     48c:	08 95       	ret
     48e:	32 99       	sbic	0x06, 2	; 6
     490:	07 c0       	rjmp	.+14     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     492:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     49c:	89 e3       	ldi	r24, 0x39	; 57
     49e:	08 95       	ret
     4a0:	33 99       	sbic	0x06, 3	; 6
     4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4a4:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     4ae:	83 e2       	ldi	r24, 0x23	; 35
     4b0:	08 95       	ret
     4b2:	8f e7       	ldi	r24, 0x7F	; 127
     4b4:	88 b9       	out	0x08, r24	; 8
     4b6:	00 00       	nop
     4b8:	30 99       	sbic	0x06, 0	; 6
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4bc:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     4c0:	8f 5f       	subi	r24, 0xFF	; 255
     4c2:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     4c6:	81 e4       	ldi	r24, 0x41	; 65
     4c8:	08 95       	ret
     4ca:	31 99       	sbic	0x06, 1	; 6
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4ce:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     4d2:	8f 5f       	subi	r24, 0xFF	; 255
     4d4:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     4d8:	82 e4       	ldi	r24, 0x42	; 66
     4da:	08 95       	ret
     4dc:	32 99       	sbic	0x06, 2	; 6
     4de:	07 c0       	rjmp	.+14     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4e0:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     4ea:	83 e4       	ldi	r24, 0x43	; 67
     4ec:	08 95       	ret
     4ee:	33 99       	sbic	0x06, 3	; 6
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4f2:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     4f6:	8f 5f       	subi	r24, 0xFF	; 255
     4f8:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     4fc:	84 e4       	ldi	r24, 0x44	; 68
     4fe:	08 95       	ret
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	08 95       	ret

00000504 <KeypadTick>:
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	91 05       	cpc	r25, r1
     50e:	c9 f0       	breq	.+50     	; 0x542 <KeypadTick+0x3e>
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	91 05       	cpc	r25, r1
     514:	31 f0       	breq	.+12     	; 0x522 <KeypadTick+0x1e>
     516:	89 2b       	or	r24, r25
     518:	21 f0       	breq	.+8      	; 0x522 <KeypadTick+0x1e>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 93 0b 10 	sts	0x100B, r24	; 0x80100b <State>
     520:	02 c0       	rjmp	.+4      	; 0x526 <KeypadTick+0x22>
     522:	c1 e0       	ldi	r28, 0x01	; 1
     524:	d0 e0       	ldi	r29, 0x00	; 0
     526:	c1 30       	cpi	r28, 0x01	; 1
     528:	d1 05       	cpc	r29, r1
     52a:	39 f0       	breq	.+14     	; 0x53a <KeypadTick+0x36>
     52c:	c2 30       	cpi	r28, 0x02	; 2
     52e:	d1 05       	cpc	r29, r1
     530:	41 f0       	breq	.+16     	; 0x542 <KeypadTick+0x3e>
     532:	20 97       	sbiw	r28, 0x00	; 0
     534:	09 f4       	brne	.+2      	; 0x538 <KeypadTick+0x34>
     536:	55 c1       	rjmp	.+682    	; 0x7e2 <KeypadTick+0x2de>
     538:	36 c1       	rjmp	.+620    	; 0x7a6 <KeypadTick+0x2a2>
     53a:	46 df       	rcall	.-372    	; 0x3c8 <GetKeypadKey>
     53c:	80 93 07 10 	sts	0x1007, r24	; 0x801007 <x>
     540:	50 c1       	rjmp	.+672    	; 0x7e2 <KeypadTick+0x2de>
     542:	e0 91 07 10 	lds	r30, 0x1007	; 0x801007 <x>
     546:	8e 2f       	mov	r24, r30
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	8a 33       	cpi	r24, 0x3A	; 58
     54c:	91 05       	cpc	r25, r1
     54e:	08 f0       	brcs	.+2      	; 0x552 <KeypadTick+0x4e>
     550:	2e c1       	rjmp	.+604    	; 0x7ae <KeypadTick+0x2aa>
     552:	fc 01       	movw	r30, r24
     554:	ea 5b       	subi	r30, 0xBA	; 186
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__tablejump2__>
     55c:	80 e2       	ldi	r24, 0x20	; 32
     55e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     562:	c2 e0       	ldi	r28, 0x02	; 2
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	3d c1       	rjmp	.+634    	; 0x7e2 <KeypadTick+0x2de>
     568:	80 e2       	ldi	r24, 0x20	; 32
     56a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     56e:	c2 e0       	ldi	r28, 0x02	; 2
     570:	d0 e0       	ldi	r29, 0x00	; 0
     572:	37 c1       	rjmp	.+622    	; 0x7e2 <KeypadTick+0x2de>
     574:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     578:	8b ea       	ldi	r24, 0xAB	; 171
     57a:	98 9f       	mul	r25, r24
     57c:	81 2d       	mov	r24, r1
     57e:	11 24       	eor	r1, r1
     580:	86 95       	lsr	r24
     582:	28 2f       	mov	r18, r24
     584:	22 0f       	add	r18, r18
     586:	82 0f       	add	r24, r18
     588:	98 1b       	sub	r25, r24
     58a:	91 30       	cpi	r25, 0x01	; 1
     58c:	31 f4       	brne	.+12     	; 0x59a <KeypadTick+0x96>
     58e:	81 e4       	ldi	r24, 0x41	; 65
     590:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     594:	c2 e0       	ldi	r28, 0x02	; 2
     596:	d0 e0       	ldi	r29, 0x00	; 0
     598:	24 c1       	rjmp	.+584    	; 0x7e2 <KeypadTick+0x2de>
     59a:	92 30       	cpi	r25, 0x02	; 2
     59c:	31 f4       	brne	.+12     	; 0x5aa <KeypadTick+0xa6>
     59e:	82 e4       	ldi	r24, 0x42	; 66
     5a0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5a4:	c2 e0       	ldi	r28, 0x02	; 2
     5a6:	d0 e0       	ldi	r29, 0x00	; 0
     5a8:	1c c1       	rjmp	.+568    	; 0x7e2 <KeypadTick+0x2de>
     5aa:	91 11       	cpse	r25, r1
     5ac:	03 c1       	rjmp	.+518    	; 0x7b4 <KeypadTick+0x2b0>
     5ae:	83 e4       	ldi	r24, 0x43	; 67
     5b0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5b4:	c2 e0       	ldi	r28, 0x02	; 2
     5b6:	d0 e0       	ldi	r29, 0x00	; 0
     5b8:	14 c1       	rjmp	.+552    	; 0x7e2 <KeypadTick+0x2de>
     5ba:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     5be:	8b ea       	ldi	r24, 0xAB	; 171
     5c0:	98 9f       	mul	r25, r24
     5c2:	81 2d       	mov	r24, r1
     5c4:	11 24       	eor	r1, r1
     5c6:	86 95       	lsr	r24
     5c8:	28 2f       	mov	r18, r24
     5ca:	22 0f       	add	r18, r18
     5cc:	82 0f       	add	r24, r18
     5ce:	98 1b       	sub	r25, r24
     5d0:	91 30       	cpi	r25, 0x01	; 1
     5d2:	31 f4       	brne	.+12     	; 0x5e0 <KeypadTick+0xdc>
     5d4:	84 e4       	ldi	r24, 0x44	; 68
     5d6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5da:	c2 e0       	ldi	r28, 0x02	; 2
     5dc:	d0 e0       	ldi	r29, 0x00	; 0
     5de:	01 c1       	rjmp	.+514    	; 0x7e2 <KeypadTick+0x2de>
     5e0:	92 30       	cpi	r25, 0x02	; 2
     5e2:	31 f4       	brne	.+12     	; 0x5f0 <KeypadTick+0xec>
     5e4:	85 e4       	ldi	r24, 0x45	; 69
     5e6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5ea:	c2 e0       	ldi	r28, 0x02	; 2
     5ec:	d0 e0       	ldi	r29, 0x00	; 0
     5ee:	f9 c0       	rjmp	.+498    	; 0x7e2 <KeypadTick+0x2de>
     5f0:	91 11       	cpse	r25, r1
     5f2:	e3 c0       	rjmp	.+454    	; 0x7ba <KeypadTick+0x2b6>
     5f4:	86 e4       	ldi	r24, 0x46	; 70
     5f6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5fa:	c2 e0       	ldi	r28, 0x02	; 2
     5fc:	d0 e0       	ldi	r29, 0x00	; 0
     5fe:	f1 c0       	rjmp	.+482    	; 0x7e2 <KeypadTick+0x2de>
     600:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     604:	8b ea       	ldi	r24, 0xAB	; 171
     606:	98 9f       	mul	r25, r24
     608:	81 2d       	mov	r24, r1
     60a:	11 24       	eor	r1, r1
     60c:	86 95       	lsr	r24
     60e:	28 2f       	mov	r18, r24
     610:	22 0f       	add	r18, r18
     612:	82 0f       	add	r24, r18
     614:	98 1b       	sub	r25, r24
     616:	91 30       	cpi	r25, 0x01	; 1
     618:	31 f4       	brne	.+12     	; 0x626 <KeypadTick+0x122>
     61a:	87 e4       	ldi	r24, 0x47	; 71
     61c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     620:	c2 e0       	ldi	r28, 0x02	; 2
     622:	d0 e0       	ldi	r29, 0x00	; 0
     624:	de c0       	rjmp	.+444    	; 0x7e2 <KeypadTick+0x2de>
     626:	92 30       	cpi	r25, 0x02	; 2
     628:	31 f4       	brne	.+12     	; 0x636 <KeypadTick+0x132>
     62a:	88 e4       	ldi	r24, 0x48	; 72
     62c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     630:	c2 e0       	ldi	r28, 0x02	; 2
     632:	d0 e0       	ldi	r29, 0x00	; 0
     634:	d6 c0       	rjmp	.+428    	; 0x7e2 <KeypadTick+0x2de>
     636:	91 11       	cpse	r25, r1
     638:	c3 c0       	rjmp	.+390    	; 0x7c0 <KeypadTick+0x2bc>
     63a:	89 e4       	ldi	r24, 0x49	; 73
     63c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     640:	c2 e0       	ldi	r28, 0x02	; 2
     642:	d0 e0       	ldi	r29, 0x00	; 0
     644:	ce c0       	rjmp	.+412    	; 0x7e2 <KeypadTick+0x2de>
     646:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     64a:	8b ea       	ldi	r24, 0xAB	; 171
     64c:	98 9f       	mul	r25, r24
     64e:	81 2d       	mov	r24, r1
     650:	11 24       	eor	r1, r1
     652:	86 95       	lsr	r24
     654:	28 2f       	mov	r18, r24
     656:	22 0f       	add	r18, r18
     658:	82 0f       	add	r24, r18
     65a:	98 1b       	sub	r25, r24
     65c:	91 30       	cpi	r25, 0x01	; 1
     65e:	31 f4       	brne	.+12     	; 0x66c <KeypadTick+0x168>
     660:	8a e4       	ldi	r24, 0x4A	; 74
     662:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     666:	c2 e0       	ldi	r28, 0x02	; 2
     668:	d0 e0       	ldi	r29, 0x00	; 0
     66a:	bb c0       	rjmp	.+374    	; 0x7e2 <KeypadTick+0x2de>
     66c:	92 30       	cpi	r25, 0x02	; 2
     66e:	31 f4       	brne	.+12     	; 0x67c <KeypadTick+0x178>
     670:	8b e4       	ldi	r24, 0x4B	; 75
     672:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     676:	c2 e0       	ldi	r28, 0x02	; 2
     678:	d0 e0       	ldi	r29, 0x00	; 0
     67a:	b3 c0       	rjmp	.+358    	; 0x7e2 <KeypadTick+0x2de>
     67c:	91 11       	cpse	r25, r1
     67e:	a3 c0       	rjmp	.+326    	; 0x7c6 <KeypadTick+0x2c2>
     680:	8c e4       	ldi	r24, 0x4C	; 76
     682:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     686:	c2 e0       	ldi	r28, 0x02	; 2
     688:	d0 e0       	ldi	r29, 0x00	; 0
     68a:	ab c0       	rjmp	.+342    	; 0x7e2 <KeypadTick+0x2de>
     68c:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     690:	8b ea       	ldi	r24, 0xAB	; 171
     692:	98 9f       	mul	r25, r24
     694:	81 2d       	mov	r24, r1
     696:	11 24       	eor	r1, r1
     698:	86 95       	lsr	r24
     69a:	28 2f       	mov	r18, r24
     69c:	22 0f       	add	r18, r18
     69e:	82 0f       	add	r24, r18
     6a0:	98 1b       	sub	r25, r24
     6a2:	91 30       	cpi	r25, 0x01	; 1
     6a4:	31 f4       	brne	.+12     	; 0x6b2 <KeypadTick+0x1ae>
     6a6:	8d e4       	ldi	r24, 0x4D	; 77
     6a8:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6ac:	c2 e0       	ldi	r28, 0x02	; 2
     6ae:	d0 e0       	ldi	r29, 0x00	; 0
     6b0:	98 c0       	rjmp	.+304    	; 0x7e2 <KeypadTick+0x2de>
     6b2:	92 30       	cpi	r25, 0x02	; 2
     6b4:	31 f4       	brne	.+12     	; 0x6c2 <KeypadTick+0x1be>
     6b6:	8e e4       	ldi	r24, 0x4E	; 78
     6b8:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6bc:	c2 e0       	ldi	r28, 0x02	; 2
     6be:	d0 e0       	ldi	r29, 0x00	; 0
     6c0:	90 c0       	rjmp	.+288    	; 0x7e2 <KeypadTick+0x2de>
     6c2:	91 11       	cpse	r25, r1
     6c4:	83 c0       	rjmp	.+262    	; 0x7cc <KeypadTick+0x2c8>
     6c6:	8f e4       	ldi	r24, 0x4F	; 79
     6c8:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6cc:	c2 e0       	ldi	r28, 0x02	; 2
     6ce:	d0 e0       	ldi	r29, 0x00	; 0
     6d0:	88 c0       	rjmp	.+272    	; 0x7e2 <KeypadTick+0x2de>
     6d2:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     6d6:	83 70       	andi	r24, 0x03	; 3
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	31 f4       	brne	.+12     	; 0x6e8 <KeypadTick+0x1e4>
     6dc:	80 e5       	ldi	r24, 0x50	; 80
     6de:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6e2:	c2 e0       	ldi	r28, 0x02	; 2
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
     6e6:	7d c0       	rjmp	.+250    	; 0x7e2 <KeypadTick+0x2de>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	31 f4       	brne	.+12     	; 0x6f8 <KeypadTick+0x1f4>
     6ec:	81 e5       	ldi	r24, 0x51	; 81
     6ee:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6f2:	c2 e0       	ldi	r28, 0x02	; 2
     6f4:	d0 e0       	ldi	r29, 0x00	; 0
     6f6:	75 c0       	rjmp	.+234    	; 0x7e2 <KeypadTick+0x2de>
     6f8:	83 30       	cpi	r24, 0x03	; 3
     6fa:	31 f4       	brne	.+12     	; 0x708 <KeypadTick+0x204>
     6fc:	82 e5       	ldi	r24, 0x52	; 82
     6fe:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     702:	c2 e0       	ldi	r28, 0x02	; 2
     704:	d0 e0       	ldi	r29, 0x00	; 0
     706:	6d c0       	rjmp	.+218    	; 0x7e2 <KeypadTick+0x2de>
     708:	81 11       	cpse	r24, r1
     70a:	63 c0       	rjmp	.+198    	; 0x7d2 <KeypadTick+0x2ce>
     70c:	83 e5       	ldi	r24, 0x53	; 83
     70e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     712:	c2 e0       	ldi	r28, 0x02	; 2
     714:	d0 e0       	ldi	r29, 0x00	; 0
     716:	65 c0       	rjmp	.+202    	; 0x7e2 <KeypadTick+0x2de>
     718:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     71c:	8b ea       	ldi	r24, 0xAB	; 171
     71e:	98 9f       	mul	r25, r24
     720:	81 2d       	mov	r24, r1
     722:	11 24       	eor	r1, r1
     724:	86 95       	lsr	r24
     726:	28 2f       	mov	r18, r24
     728:	22 0f       	add	r18, r18
     72a:	82 0f       	add	r24, r18
     72c:	98 1b       	sub	r25, r24
     72e:	91 30       	cpi	r25, 0x01	; 1
     730:	31 f4       	brne	.+12     	; 0x73e <KeypadTick+0x23a>
     732:	84 e5       	ldi	r24, 0x54	; 84
     734:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     738:	c2 e0       	ldi	r28, 0x02	; 2
     73a:	d0 e0       	ldi	r29, 0x00	; 0
     73c:	52 c0       	rjmp	.+164    	; 0x7e2 <KeypadTick+0x2de>
     73e:	92 30       	cpi	r25, 0x02	; 2
     740:	31 f4       	brne	.+12     	; 0x74e <KeypadTick+0x24a>
     742:	85 e5       	ldi	r24, 0x55	; 85
     744:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     748:	c2 e0       	ldi	r28, 0x02	; 2
     74a:	d0 e0       	ldi	r29, 0x00	; 0
     74c:	4a c0       	rjmp	.+148    	; 0x7e2 <KeypadTick+0x2de>
     74e:	93 30       	cpi	r25, 0x03	; 3
     750:	09 f0       	breq	.+2      	; 0x754 <KeypadTick+0x250>
     752:	42 c0       	rjmp	.+132    	; 0x7d8 <KeypadTick+0x2d4>
     754:	86 e5       	ldi	r24, 0x56	; 86
     756:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     75a:	c2 e0       	ldi	r28, 0x02	; 2
     75c:	d0 e0       	ldi	r29, 0x00	; 0
     75e:	41 c0       	rjmp	.+130    	; 0x7e2 <KeypadTick+0x2de>
     760:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     764:	83 70       	andi	r24, 0x03	; 3
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	31 f4       	brne	.+12     	; 0x776 <KeypadTick+0x272>
     76a:	87 e5       	ldi	r24, 0x57	; 87
     76c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     770:	c2 e0       	ldi	r28, 0x02	; 2
     772:	d0 e0       	ldi	r29, 0x00	; 0
     774:	36 c0       	rjmp	.+108    	; 0x7e2 <KeypadTick+0x2de>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	31 f4       	brne	.+12     	; 0x786 <KeypadTick+0x282>
     77a:	88 e5       	ldi	r24, 0x58	; 88
     77c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     780:	c2 e0       	ldi	r28, 0x02	; 2
     782:	d0 e0       	ldi	r29, 0x00	; 0
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <KeypadTick+0x2de>
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	31 f4       	brne	.+12     	; 0x796 <KeypadTick+0x292>
     78a:	89 e5       	ldi	r24, 0x59	; 89
     78c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     790:	c2 e0       	ldi	r28, 0x02	; 2
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	26 c0       	rjmp	.+76     	; 0x7e2 <KeypadTick+0x2de>
     796:	81 11       	cpse	r24, r1
     798:	22 c0       	rjmp	.+68     	; 0x7de <KeypadTick+0x2da>
     79a:	8a e5       	ldi	r24, 0x5A	; 90
     79c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     7a0:	c2 e0       	ldi	r28, 0x02	; 2
     7a2:	d0 e0       	ldi	r29, 0x00	; 0
     7a4:	1e c0       	rjmp	.+60     	; 0x7e2 <KeypadTick+0x2de>
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 0b 10 	sts	0x100B, r24	; 0x80100b <State>
     7ac:	1a c0       	rjmp	.+52     	; 0x7e2 <KeypadTick+0x2de>
     7ae:	c2 e0       	ldi	r28, 0x02	; 2
     7b0:	d0 e0       	ldi	r29, 0x00	; 0
     7b2:	17 c0       	rjmp	.+46     	; 0x7e2 <KeypadTick+0x2de>
     7b4:	c2 e0       	ldi	r28, 0x02	; 2
     7b6:	d0 e0       	ldi	r29, 0x00	; 0
     7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <KeypadTick+0x2de>
     7ba:	c2 e0       	ldi	r28, 0x02	; 2
     7bc:	d0 e0       	ldi	r29, 0x00	; 0
     7be:	11 c0       	rjmp	.+34     	; 0x7e2 <KeypadTick+0x2de>
     7c0:	c2 e0       	ldi	r28, 0x02	; 2
     7c2:	d0 e0       	ldi	r29, 0x00	; 0
     7c4:	0e c0       	rjmp	.+28     	; 0x7e2 <KeypadTick+0x2de>
     7c6:	c2 e0       	ldi	r28, 0x02	; 2
     7c8:	d0 e0       	ldi	r29, 0x00	; 0
     7ca:	0b c0       	rjmp	.+22     	; 0x7e2 <KeypadTick+0x2de>
     7cc:	c2 e0       	ldi	r28, 0x02	; 2
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
     7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <KeypadTick+0x2de>
     7d2:	c2 e0       	ldi	r28, 0x02	; 2
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <KeypadTick+0x2de>
     7d8:	c2 e0       	ldi	r28, 0x02	; 2
     7da:	d0 e0       	ldi	r29, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <KeypadTick+0x2de>
     7de:	c2 e0       	ldi	r28, 0x02	; 2
     7e0:	d0 e0       	ldi	r29, 0x00	; 0
     7e2:	ce 01       	movw	r24, r28
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <N5110_Cmnd>:
     7ea:	cf 93       	push	r28
     7ec:	c8 2f       	mov	r28, r24
     7ee:	29 98       	cbi	0x05, 1	; 5
     7f0:	eb d5       	rcall	.+3030   	; 0x13c8 <SPI_SS_Enable>
     7f2:	8c 2f       	mov	r24, r28
     7f4:	f5 d5       	rcall	.+3050   	; 0x13e0 <SPI_Write>
     7f6:	29 9a       	sbi	0x05, 1	; 5
     7f8:	e9 d5       	rcall	.+3026   	; 0x13cc <SPI_SS_Disable>
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <N5110_Reset>:
     7fe:	28 98       	cbi	0x05, 0	; 5
     800:	2f ef       	ldi	r18, 0xFF	; 255
     802:	80 e7       	ldi	r24, 0x70	; 112
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	21 50       	subi	r18, 0x01	; 1
     808:	80 40       	sbci	r24, 0x00	; 0
     80a:	90 40       	sbci	r25, 0x00	; 0
     80c:	e1 f7       	brne	.-8      	; 0x806 <N5110_Reset+0x8>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <N5110_Reset+0x12>
     810:	00 00       	nop
     812:	28 9a       	sbi	0x05, 0	; 5
     814:	08 95       	ret

00000816 <N5110_init>:
     816:	f3 df       	rcall	.-26     	; 0x7fe <N5110_Reset>
     818:	81 e2       	ldi	r24, 0x21	; 33
     81a:	e7 df       	rcall	.-50     	; 0x7ea <N5110_Cmnd>
     81c:	80 ec       	ldi	r24, 0xC0	; 192
     81e:	e5 df       	rcall	.-54     	; 0x7ea <N5110_Cmnd>
     820:	87 e0       	ldi	r24, 0x07	; 7
     822:	e3 df       	rcall	.-58     	; 0x7ea <N5110_Cmnd>
     824:	83 e1       	ldi	r24, 0x13	; 19
     826:	e1 df       	rcall	.-62     	; 0x7ea <N5110_Cmnd>
     828:	80 e2       	ldi	r24, 0x20	; 32
     82a:	df df       	rcall	.-66     	; 0x7ea <N5110_Cmnd>
     82c:	8c e0       	ldi	r24, 0x0C	; 12
     82e:	dd cf       	rjmp	.-70     	; 0x7ea <N5110_Cmnd>
     830:	08 95       	ret

00000832 <lcd_setXY>:
     832:	cf 93       	push	r28
     834:	c6 2f       	mov	r28, r22
     836:	d9 df       	rcall	.-78     	; 0x7ea <N5110_Cmnd>
     838:	8c 2f       	mov	r24, r28
     83a:	d7 df       	rcall	.-82     	; 0x7ea <N5110_Cmnd>
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <N5110_clear>:
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	c1 d5       	rcall	.+2946   	; 0x13c8 <SPI_SS_Enable>
     846:	29 9a       	sbi	0x05, 1	; 5
     848:	c8 ef       	ldi	r28, 0xF8	; 248
     84a:	d1 e0       	ldi	r29, 0x01	; 1
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	c8 d5       	rcall	.+2960   	; 0x13e0 <SPI_Write>
     850:	21 97       	sbiw	r28, 0x01	; 1
     852:	e1 f7       	brne	.-8      	; 0x84c <N5110_clear+0xc>
     854:	29 98       	cbi	0x05, 1	; 5
     856:	ba d5       	rcall	.+2932   	; 0x13cc <SPI_SS_Disable>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <N5110_image>:
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	8c 01       	movw	r16, r24
     868:	af d5       	rcall	.+2910   	; 0x13c8 <SPI_SS_Enable>
     86a:	29 9a       	sbi	0x05, 1	; 5
     86c:	e8 01       	movw	r28, r16
     86e:	08 50       	subi	r16, 0x08	; 8
     870:	1e 4f       	sbci	r17, 0xFE	; 254
     872:	89 91       	ld	r24, Y+
     874:	b5 d5       	rcall	.+2922   	; 0x13e0 <SPI_Write>
     876:	c0 17       	cp	r28, r16
     878:	d1 07       	cpc	r29, r17
     87a:	d9 f7       	brne	.-10     	; 0x872 <N5110_image+0x14>
     87c:	29 98       	cbi	0x05, 1	; 5
     87e:	a6 d5       	rcall	.+2892   	; 0x13cc <SPI_SS_Disable>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	08 95       	ret

0000088a <Nokia_Tick>:
     88a:	8a 30       	cpi	r24, 0x0A	; 10
     88c:	91 05       	cpc	r25, r1
     88e:	08 f0       	brcs	.+2      	; 0x892 <Nokia_Tick+0x8>
     890:	dd c0       	rjmp	.+442    	; 0xa4c <Nokia_Tick+0x1c2>
     892:	fc 01       	movw	r30, r24
     894:	e0 58       	subi	r30, 0x80	; 128
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	21 c7       	rjmp	.+3650   	; 0x16dc <__tablejump2__>
     89a:	9a d5       	rcall	.+2868   	; 0x13d0 <SPI_Init>
     89c:	bc df       	rcall	.-136    	; 0x816 <N5110_init>
     89e:	d0 df       	rcall	.-96     	; 0x840 <N5110_clear>
     8a0:	60 e8       	ldi	r22, 0x80	; 128
     8a2:	80 e4       	ldi	r24, 0x40	; 64
     8a4:	c6 df       	rcall	.-116    	; 0x832 <lcd_setXY>
     8a6:	82 ef       	ldi	r24, 0xF2	; 242
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	d9 df       	rcall	.-78     	; 0x85e <N5110_image>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	08 95       	ret
     8b2:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     8b6:	22 23       	and	r18, r18
     8b8:	49 f0       	breq	.+18     	; 0x8cc <Nokia_Tick+0x42>
     8ba:	82 2f       	mov	r24, r18
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     8c2:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     8c6:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     8ca:	da c0       	rjmp	.+436    	; 0xa80 <Nokia_Tick+0x1f6>
     8cc:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     8d0:	21 30       	cpi	r18, 0x01	; 1
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <Nokia_Tick+0x4c>
     8d4:	d8 c0       	rjmp	.+432    	; 0xa86 <Nokia_Tick+0x1fc>
     8d6:	b4 df       	rcall	.-152    	; 0x840 <N5110_clear>
     8d8:	60 e8       	ldi	r22, 0x80	; 128
     8da:	80 e4       	ldi	r24, 0x40	; 64
     8dc:	aa df       	rcall	.-172    	; 0x832 <lcd_setXY>
     8de:	82 ec       	ldi	r24, 0xC2	; 194
     8e0:	9d e0       	ldi	r25, 0x0D	; 13
     8e2:	bd df       	rcall	.-134    	; 0x85e <N5110_image>
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	08 95       	ret
     8ea:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     8ee:	22 23       	and	r18, r18
     8f0:	49 f0       	breq	.+18     	; 0x904 <Nokia_Tick+0x7a>
     8f2:	82 2f       	mov	r24, r18
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     8fa:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     8fe:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     902:	be c0       	rjmp	.+380    	; 0xa80 <Nokia_Tick+0x1f6>
     904:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     908:	22 30       	cpi	r18, 0x02	; 2
     90a:	09 f0       	breq	.+2      	; 0x90e <Nokia_Tick+0x84>
     90c:	bc c0       	rjmp	.+376    	; 0xa86 <Nokia_Tick+0x1fc>
     90e:	98 df       	rcall	.-208    	; 0x840 <N5110_clear>
     910:	60 e8       	ldi	r22, 0x80	; 128
     912:	80 e4       	ldi	r24, 0x40	; 64
     914:	8e df       	rcall	.-228    	; 0x832 <lcd_setXY>
     916:	8a ec       	ldi	r24, 0xCA	; 202
     918:	9b e0       	ldi	r25, 0x0B	; 11
     91a:	a1 df       	rcall	.-190    	; 0x85e <N5110_image>
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	08 95       	ret
     922:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     926:	22 23       	and	r18, r18
     928:	49 f0       	breq	.+18     	; 0x93c <Nokia_Tick+0xb2>
     92a:	82 2f       	mov	r24, r18
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     932:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     936:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     93a:	a2 c0       	rjmp	.+324    	; 0xa80 <Nokia_Tick+0x1f6>
     93c:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     940:	23 30       	cpi	r18, 0x03	; 3
     942:	09 f0       	breq	.+2      	; 0x946 <Nokia_Tick+0xbc>
     944:	a0 c0       	rjmp	.+320    	; 0xa86 <Nokia_Tick+0x1fc>
     946:	7c df       	rcall	.-264    	; 0x840 <N5110_clear>
     948:	60 e8       	ldi	r22, 0x80	; 128
     94a:	80 e4       	ldi	r24, 0x40	; 64
     94c:	72 df       	rcall	.-284    	; 0x832 <lcd_setXY>
     94e:	82 ed       	ldi	r24, 0xD2	; 210
     950:	99 e0       	ldi	r25, 0x09	; 9
     952:	85 df       	rcall	.-246    	; 0x85e <N5110_image>
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	08 95       	ret
     95a:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     95e:	22 23       	and	r18, r18
     960:	49 f0       	breq	.+18     	; 0x974 <Nokia_Tick+0xea>
     962:	82 2f       	mov	r24, r18
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     96a:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     96e:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     972:	86 c0       	rjmp	.+268    	; 0xa80 <Nokia_Tick+0x1f6>
     974:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     978:	24 30       	cpi	r18, 0x04	; 4
     97a:	09 f0       	breq	.+2      	; 0x97e <Nokia_Tick+0xf4>
     97c:	84 c0       	rjmp	.+264    	; 0xa86 <Nokia_Tick+0x1fc>
     97e:	60 df       	rcall	.-320    	; 0x840 <N5110_clear>
     980:	60 e8       	ldi	r22, 0x80	; 128
     982:	80 e4       	ldi	r24, 0x40	; 64
     984:	56 df       	rcall	.-340    	; 0x832 <lcd_setXY>
     986:	8a ed       	ldi	r24, 0xDA	; 218
     988:	97 e0       	ldi	r25, 0x07	; 7
     98a:	69 df       	rcall	.-302    	; 0x85e <N5110_image>
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	08 95       	ret
     992:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     996:	22 23       	and	r18, r18
     998:	49 f0       	breq	.+18     	; 0x9ac <Nokia_Tick+0x122>
     99a:	82 2f       	mov	r24, r18
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     9a2:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     9a6:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     9aa:	6a c0       	rjmp	.+212    	; 0xa80 <Nokia_Tick+0x1f6>
     9ac:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     9b0:	25 30       	cpi	r18, 0x05	; 5
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <Nokia_Tick+0x12c>
     9b4:	68 c0       	rjmp	.+208    	; 0xa86 <Nokia_Tick+0x1fc>
     9b6:	44 df       	rcall	.-376    	; 0x840 <N5110_clear>
     9b8:	60 e8       	ldi	r22, 0x80	; 128
     9ba:	80 e4       	ldi	r24, 0x40	; 64
     9bc:	3a df       	rcall	.-396    	; 0x832 <lcd_setXY>
     9be:	82 ee       	ldi	r24, 0xE2	; 226
     9c0:	95 e0       	ldi	r25, 0x05	; 5
     9c2:	4d df       	rcall	.-358    	; 0x85e <N5110_image>
     9c4:	86 e0       	ldi	r24, 0x06	; 6
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	08 95       	ret
     9ca:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     9ce:	22 23       	and	r18, r18
     9d0:	49 f0       	breq	.+18     	; 0x9e4 <Nokia_Tick+0x15a>
     9d2:	82 2f       	mov	r24, r18
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     9da:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     9de:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     9e2:	4e c0       	rjmp	.+156    	; 0xa80 <Nokia_Tick+0x1f6>
     9e4:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     9e8:	26 30       	cpi	r18, 0x06	; 6
     9ea:	09 f0       	breq	.+2      	; 0x9ee <Nokia_Tick+0x164>
     9ec:	4c c0       	rjmp	.+152    	; 0xa86 <Nokia_Tick+0x1fc>
     9ee:	28 df       	rcall	.-432    	; 0x840 <N5110_clear>
     9f0:	60 e8       	ldi	r22, 0x80	; 128
     9f2:	80 e4       	ldi	r24, 0x40	; 64
     9f4:	1e df       	rcall	.-452    	; 0x832 <lcd_setXY>
     9f6:	8a ee       	ldi	r24, 0xEA	; 234
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	31 df       	rcall	.-414    	; 0x85e <N5110_image>
     9fc:	2a c0       	rjmp	.+84     	; 0xa52 <Nokia_Tick+0x1c8>
     9fe:	80 91 fd 0f 	lds	r24, 0x0FFD	; 0x800ffd <NOKIAReset>
     a02:	88 23       	and	r24, r24
     a04:	41 f0       	breq	.+16     	; 0xa16 <Nokia_Tick+0x18c>
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     a0c:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     a10:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     a14:	35 c0       	rjmp	.+106    	; 0xa80 <Nokia_Tick+0x1f6>
     a16:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <counter>
     a1a:	85 31       	cpi	r24, 0x15	; 21
     a1c:	d0 f0       	brcs	.+52     	; 0xa52 <Nokia_Tick+0x1c8>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	08 95       	ret
     a24:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     a28:	22 23       	and	r18, r18
     a2a:	49 f0       	breq	.+18     	; 0xa3e <Nokia_Tick+0x1b4>
     a2c:	82 2f       	mov	r24, r18
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     a34:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     a38:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     a3c:	21 c0       	rjmp	.+66     	; 0xa80 <Nokia_Tick+0x1f6>
     a3e:	20 91 fe 0f 	lds	r18, 0x0FFE	; 0x800ffe <counter>
     a42:	25 31       	cpi	r18, 0x15	; 21
     a44:	00 f1       	brcs	.+64     	; 0xa86 <Nokia_Tick+0x1fc>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	08 95       	ret
     a4c:	87 30       	cpi	r24, 0x07	; 7
     a4e:	91 05       	cpc	r25, r1
     a50:	d1 f4       	brne	.+52     	; 0xa86 <Nokia_Tick+0x1fc>
     a52:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <counter>
     a56:	80 fd       	sbrc	r24, 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <Nokia_Tick+0x1d4>
     a5a:	f2 de       	rcall	.-540    	; 0x840 <N5110_clear>
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <Nokia_Tick+0x1e0>
     a5e:	60 e8       	ldi	r22, 0x80	; 128
     a60:	80 e4       	ldi	r24, 0x40	; 64
     a62:	e7 de       	rcall	.-562    	; 0x832 <lcd_setXY>
     a64:	8a ee       	ldi	r24, 0xEA	; 234
     a66:	93 e0       	ldi	r25, 0x03	; 3
     a68:	fa de       	rcall	.-524    	; 0x85e <N5110_image>
     a6a:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <counter>
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	80 93 fe 0f 	sts	0x0FFE, r24	; 0x800ffe <counter>
     a74:	87 e0       	ldi	r24, 0x07	; 7
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	08 95       	ret
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	08 95       	ret
     a80:	87 30       	cpi	r24, 0x07	; 7
     a82:	91 05       	cpc	r25, r1
     a84:	51 f3       	breq	.-44     	; 0xa5a <Nokia_Tick+0x1d0>
     a86:	08 95       	ret

00000a88 <ResetWelcomeMessage>:
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	dc 01       	movw	r26, r24
     a90:	ad 5b       	subi	r26, 0xBD	; 189
     a92:	bf 4f       	sbci	r27, 0xFF	; 255
     a94:	06 c0       	rjmp	.+12     	; 0xaa2 <ResetWelcomeMessage+0x1a>
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	91 93       	st	Z+, r25
     a9a:	ae 17       	cp	r26, r30
     a9c:	bf 07       	cpc	r27, r31
     a9e:	d9 f7       	brne	.-10     	; 0xa96 <ResetWelcomeMessage+0xe>
     aa0:	2c 93       	st	X, r18
     aa2:	28 81       	ld	r18, Y
     aa4:	2c 34       	cpi	r18, 0x4C	; 76
     aa6:	11 f0       	breq	.+4      	; 0xaac <ResetWelcomeMessage+0x24>
     aa8:	fe 01       	movw	r30, r28
     aaa:	f5 cf       	rjmp	.-22     	; 0xa96 <ResetWelcomeMessage+0xe>
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <EEPROM_read>:
     ab2:	f9 99       	sbic	0x1f, 1	; 31
     ab4:	fe cf       	rjmp	.-4      	; 0xab2 <EEPROM_read>
     ab6:	92 bd       	out	0x22, r25	; 34
     ab8:	81 bd       	out	0x21, r24	; 33
     aba:	f8 9a       	sbi	0x1f, 0	; 31
     abc:	80 b5       	in	r24, 0x20	; 32
     abe:	08 95       	ret

00000ac0 <ReturnHighScore>:
     ac0:	ac 01       	movw	r20, r24
     ac2:	9c 01       	movw	r18, r24
     ac4:	36 95       	lsr	r19
     ac6:	27 95       	ror	r18
     ac8:	36 95       	lsr	r19
     aca:	27 95       	ror	r18
     acc:	36 95       	lsr	r19
     ace:	27 95       	ror	r18
     ad0:	a5 ec       	ldi	r26, 0xC5	; 197
     ad2:	b0 e2       	ldi	r27, 0x20	; 32
     ad4:	0c d6       	rcall	.+3096   	; 0x16ee <__umulhisi3>
     ad6:	92 95       	swap	r25
     ad8:	82 95       	swap	r24
     ada:	8f 70       	andi	r24, 0x0F	; 15
     adc:	89 27       	eor	r24, r25
     ade:	9f 70       	andi	r25, 0x0F	; 15
     ae0:	89 27       	eor	r24, r25
     ae2:	80 93 13 10 	sts	0x1013, r24	; 0x801013 <thousands>
     ae6:	68 ee       	ldi	r22, 0xE8	; 232
     ae8:	73 e0       	ldi	r23, 0x03	; 3
     aea:	86 9f       	mul	r24, r22
     aec:	90 01       	movw	r18, r0
     aee:	87 9f       	mul	r24, r23
     af0:	30 0d       	add	r19, r0
     af2:	96 9f       	mul	r25, r22
     af4:	30 0d       	add	r19, r0
     af6:	11 24       	eor	r1, r1
     af8:	ca 01       	movw	r24, r20
     afa:	82 1b       	sub	r24, r18
     afc:	93 0b       	sbc	r25, r19
     afe:	9c 01       	movw	r18, r24
     b00:	36 95       	lsr	r19
     b02:	27 95       	ror	r18
     b04:	36 95       	lsr	r19
     b06:	27 95       	ror	r18
     b08:	ab e7       	ldi	r26, 0x7B	; 123
     b0a:	b4 e1       	ldi	r27, 0x14	; 20
     b0c:	f0 d5       	rcall	.+3040   	; 0x16ee <__umulhisi3>
     b0e:	96 95       	lsr	r25
     b10:	87 95       	ror	r24
     b12:	80 93 08 10 	sts	0x1008, r24	; 0x801008 <hundreds>
     b16:	9a 01       	movw	r18, r20
     b18:	36 95       	lsr	r19
     b1a:	27 95       	ror	r18
     b1c:	36 95       	lsr	r19
     b1e:	27 95       	ror	r18
     b20:	e6 d5       	rcall	.+3020   	; 0x16ee <__umulhisi3>
     b22:	96 95       	lsr	r25
     b24:	87 95       	ror	r24
     b26:	64 e6       	ldi	r22, 0x64	; 100
     b28:	68 9f       	mul	r22, r24
     b2a:	90 01       	movw	r18, r0
     b2c:	69 9f       	mul	r22, r25
     b2e:	30 0d       	add	r19, r0
     b30:	11 24       	eor	r1, r1
     b32:	ca 01       	movw	r24, r20
     b34:	82 1b       	sub	r24, r18
     b36:	93 0b       	sbc	r25, r19
     b38:	9c 01       	movw	r18, r24
     b3a:	ad ec       	ldi	r26, 0xCD	; 205
     b3c:	bc ec       	ldi	r27, 0xCC	; 204
     b3e:	d7 d5       	rcall	.+2990   	; 0x16ee <__umulhisi3>
     b40:	96 95       	lsr	r25
     b42:	87 95       	ror	r24
     b44:	96 95       	lsr	r25
     b46:	87 95       	ror	r24
     b48:	96 95       	lsr	r25
     b4a:	87 95       	ror	r24
     b4c:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <tens>
     b50:	9a 01       	movw	r18, r20
     b52:	cd d5       	rcall	.+2970   	; 0x16ee <__umulhisi3>
     b54:	96 95       	lsr	r25
     b56:	87 95       	ror	r24
     b58:	96 95       	lsr	r25
     b5a:	87 95       	ror	r24
     b5c:	96 95       	lsr	r25
     b5e:	87 95       	ror	r24
     b60:	9c 01       	movw	r18, r24
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	82 0f       	add	r24, r18
     b74:	93 1f       	adc	r25, r19
     b76:	48 1b       	sub	r20, r24
     b78:	59 0b       	sbc	r21, r25
     b7a:	40 93 09 10 	sts	0x1009, r20	; 0x801009 <ones>
     b7e:	08 95       	ret

00000b80 <set_PWM>:
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	6b 01       	movw	r12, r22
     b8a:	7c 01       	movw	r14, r24
     b8c:	9b 01       	movw	r18, r22
     b8e:	ac 01       	movw	r20, r24
     b90:	60 91 ba 0f 	lds	r22, 0x0FBA	; 0x800fba <__data_end>
     b94:	70 91 bb 0f 	lds	r23, 0x0FBB	; 0x800fbb <__data_end+0x1>
     b98:	80 91 bc 0f 	lds	r24, 0x0FBC	; 0x800fbc <__data_end+0x2>
     b9c:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <__data_end+0x3>
     ba0:	24 d4       	rcall	.+2120   	; 0x13ea <__cmpsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	09 f4       	brne	.+2      	; 0xba8 <set_PWM+0x28>
     ba6:	40 c0       	rjmp	.+128    	; 0xc28 <set_PWM+0xa8>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	a9 01       	movw	r20, r18
     bae:	c7 01       	movw	r24, r14
     bb0:	b6 01       	movw	r22, r12
     bb2:	1b d4       	rcall	.+2102   	; 0x13ea <__cmpsf2>
     bb4:	81 11       	cpse	r24, r1
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <set_PWM+0x40>
     bb8:	85 b5       	in	r24, 0x25	; 37
     bba:	88 70       	andi	r24, 0x08	; 8
     bbc:	85 bd       	out	0x25, r24	; 37
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <set_PWM+0x46>
     bc0:	85 b5       	in	r24, 0x25	; 37
     bc2:	83 60       	ori	r24, 0x03	; 3
     bc4:	85 bd       	out	0x25, r24	; 37
     bc6:	28 e5       	ldi	r18, 0x58	; 88
     bc8:	39 e3       	ldi	r19, 0x39	; 57
     bca:	44 e7       	ldi	r20, 0x74	; 116
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	c7 01       	movw	r24, r14
     bd0:	b6 01       	movw	r22, r12
     bd2:	0b d4       	rcall	.+2070   	; 0x13ea <__cmpsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	1c f4       	brge	.+6      	; 0xbde <set_PWM+0x5e>
     bd8:	8f ef       	ldi	r24, 0xFF	; 255
     bda:	87 bd       	out	0x27, r24	; 39
     bdc:	1c c0       	rjmp	.+56     	; 0xc16 <set_PWM+0x96>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	34 e2       	ldi	r19, 0x24	; 36
     be2:	44 ef       	ldi	r20, 0xF4	; 244
     be4:	56 e4       	ldi	r21, 0x46	; 70
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	11 d5       	rcall	.+2594   	; 0x160e <__gesf2>
     bec:	18 16       	cp	r1, r24
     bee:	14 f4       	brge	.+4      	; 0xbf4 <set_PWM+0x74>
     bf0:	17 bc       	out	0x27, r1	; 39
     bf2:	11 c0       	rjmp	.+34     	; 0xc16 <set_PWM+0x96>
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	53 e4       	ldi	r21, 0x43	; 67
     bfc:	c7 01       	movw	r24, r14
     bfe:	b6 01       	movw	r22, r12
     c00:	0a d5       	rcall	.+2580   	; 0x1616 <__mulsf3>
     c02:	9b 01       	movw	r18, r22
     c04:	ac 01       	movw	r20, r24
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	74 e2       	ldi	r23, 0x24	; 36
     c0a:	84 ef       	ldi	r24, 0xF4	; 244
     c0c:	9a e4       	ldi	r25, 0x4A	; 74
     c0e:	f1 d3       	rcall	.+2018   	; 0x13f2 <__divsf3>
     c10:	58 d4       	rcall	.+2224   	; 0x14c2 <__fixsfsi>
     c12:	61 50       	subi	r22, 0x01	; 1
     c14:	67 bd       	out	0x27, r22	; 39
     c16:	16 bc       	out	0x26, r1	; 38
     c18:	c0 92 ba 0f 	sts	0x0FBA, r12	; 0x800fba <__data_end>
     c1c:	d0 92 bb 0f 	sts	0x0FBB, r13	; 0x800fbb <__data_end+0x1>
     c20:	e0 92 bc 0f 	sts	0x0FBC, r14	; 0x800fbc <__data_end+0x2>
     c24:	f0 92 bd 0f 	sts	0x0FBD, r15	; 0x800fbd <__data_end+0x3>
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	08 95       	ret

00000c32 <WA_Tick>:
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	91 05       	cpc	r25, r1
     c36:	a9 f0       	breq	.+42     	; 0xc62 <WA_Tick+0x30>
     c38:	1c f4       	brge	.+6      	; 0xc40 <WA_Tick+0xe>
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	41 f0       	breq	.+16     	; 0xc4e <WA_Tick+0x1c>
     c3e:	27 c0       	rjmp	.+78     	; 0xc8e <WA_Tick+0x5c>
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	91 05       	cpc	r25, r1
     c44:	d9 f0       	breq	.+54     	; 0xc7c <WA_Tick+0x4a>
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	91 05       	cpc	r25, r1
     c4a:	79 f1       	breq	.+94     	; 0xcaa <WA_Tick+0x78>
     c4c:	20 c0       	rjmp	.+64     	; 0xc8e <WA_Tick+0x5c>
     c4e:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <WAReset>
     c52:	81 11       	cpse	r24, r1
     c54:	49 c0       	rjmp	.+146    	; 0xce8 <WA_Tick+0xb6>
     c56:	80 91 f9 0f 	lds	r24, 0x0FF9	; 0x800ff9 <wrong>
     c5a:	88 23       	and	r24, r24
     c5c:	31 f1       	breq	.+76     	; 0xcaa <WA_Tick+0x78>
     c5e:	12 9a       	sbi	0x02, 2	; 2
     c60:	2d c0       	rjmp	.+90     	; 0xcbc <WA_Tick+0x8a>
     c62:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <WAReset>
     c66:	81 11       	cpse	r24, r1
     c68:	3f c0       	rjmp	.+126    	; 0xce8 <WA_Tick+0xb6>
     c6a:	80 91 fb 0f 	lds	r24, 0x0FFB	; 0x800ffb <WA_Count>
     c6e:	8f 31       	cpi	r24, 0x1F	; 31
     c70:	28 f1       	brcs	.+74     	; 0xcbc <WA_Tick+0x8a>
     c72:	10 92 fb 0f 	sts	0x0FFB, r1	; 0x800ffb <WA_Count>
     c76:	10 92 f9 0f 	sts	0x0FF9, r1	; 0x800ff9 <wrong>
     c7a:	2e c0       	rjmp	.+92     	; 0xcd8 <WA_Tick+0xa6>
     c7c:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <WAReset>
     c80:	81 11       	cpse	r24, r1
     c82:	32 c0       	rjmp	.+100    	; 0xce8 <WA_Tick+0xb6>
     c84:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <letterFound>
     c88:	81 11       	cpse	r24, r1
     c8a:	26 c0       	rjmp	.+76     	; 0xcd8 <WA_Tick+0xa6>
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <WA_Tick+0x78>
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	91 05       	cpc	r25, r1
     c92:	a1 f0       	breq	.+40     	; 0xcbc <WA_Tick+0x8a>
     c94:	1c f4       	brge	.+6      	; 0xc9c <WA_Tick+0x6a>
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	89 f5       	brne	.+98     	; 0xcfc <WA_Tick+0xca>
     c9a:	07 c0       	rjmp	.+14     	; 0xcaa <WA_Tick+0x78>
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	91 05       	cpc	r25, r1
     ca0:	d9 f0       	breq	.+54     	; 0xcd8 <WA_Tick+0xa6>
     ca2:	83 30       	cpi	r24, 0x03	; 3
     ca4:	91 05       	cpc	r25, r1
     ca6:	51 f5       	brne	.+84     	; 0xcfc <WA_Tick+0xca>
     ca8:	1f c0       	rjmp	.+62     	; 0xce8 <WA_Tick+0xb6>
     caa:	10 92 fb 0f 	sts	0x0FFB, r1	; 0x800ffb <WA_Count>
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	cb 01       	movw	r24, r22
     cb4:	65 df       	rcall	.-310    	; 0xb80 <set_PWM>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	08 95       	ret
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 ed       	ldi	r23, 0xD0	; 208
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	94 e4       	ldi	r25, 0x44	; 68
     cc4:	5d df       	rcall	.-326    	; 0xb80 <set_PWM>
     cc6:	80 91 fb 0f 	lds	r24, 0x0FFB	; 0x800ffb <WA_Count>
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 93 fb 0f 	sts	0x0FFB, r24	; 0x800ffb <WA_Count>
     cd0:	12 9a       	sbi	0x02, 2	; 2
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	08 95       	ret
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	cb 01       	movw	r24, r22
     cde:	50 df       	rcall	.-352    	; 0xb80 <set_PWM>
     ce0:	12 98       	cbi	0x02, 2	; 2
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	08 95       	ret
     ce8:	10 92 fc 0f 	sts	0x0FFC, r1	; 0x800ffc <letterFound>
     cec:	10 92 fb 0f 	sts	0x0FFB, r1	; 0x800ffb <WA_Count>
     cf0:	10 92 fa 0f 	sts	0x0FFA, r1	; 0x800ffa <WAReset>
     cf4:	10 92 f9 0f 	sts	0x0FF9, r1	; 0x800ff9 <wrong>
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	08 95       	ret

00000cfe <PWM_on>:
     cfe:	81 e4       	ldi	r24, 0x41	; 65
     d00:	84 bd       	out	0x24, r24	; 36
     d02:	8b e0       	ldi	r24, 0x0B	; 11
     d04:	85 bd       	out	0x25, r24	; 37
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	cb 01       	movw	r24, r22
     d0c:	39 cf       	rjmp	.-398    	; 0xb80 <set_PWM>
     d0e:	08 95       	ret

00000d10 <LCDBuildChar>:
unsigned char win = 0;
unsigned char LCDReset = 0;


void LCDBuildChar(unsigned char loc, unsigned char *p)
{
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
	unsigned char i;
	if(loc<8) //If valid address
     d18:	88 30       	cpi	r24, 0x08	; 8
     d1a:	70 f4       	brcc	.+28     	; 0xd38 <LCDBuildChar+0x28>
     d1c:	8b 01       	movw	r16, r22
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
     d1e:	88 0f       	add	r24, r24
     d20:	88 0f       	add	r24, r24
     d22:	88 0f       	add	r24, r24
     d24:	80 5c       	subi	r24, 0xC0	; 192
     d26:	9a da       	rcall	.-2764   	; 0x25c <LCD_WriteCommand>
     d28:	e8 01       	movw	r28, r16
     d2a:	08 5f       	subi	r16, 0xF8	; 248
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
     d2e:	89 91       	ld	r24, Y+
     d30:	b8 da       	rcall	.-2704   	; 0x2a2 <LCD_WriteData>
{
	unsigned char i;
	if(loc<8) //If valid address
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		for(i=0;i<8;i++)
     d32:	c0 17       	cp	r28, r16
     d34:	d1 07       	cpc	r29, r17
     d36:	d9 f7       	brne	.-10     	; 0xd2e <LCDBuildChar+0x1e>
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <CheckGuessed>:

void CheckGuessed(){

	letterFound = 0; //letter exists in word
     d42:	10 92 fc 0f 	sts	0x0FFC, r1	; 0x800ffc <letterFound>
	unsigned char b = 0;
	while((b < WTG_Index)){
     d46:	20 91 f7 0f 	lds	r18, 0x0FF7	; 0x800ff7 <WTG_Index>
     d4a:	22 23       	and	r18, r18
     d4c:	c9 f0       	breq	.+50     	; 0xd80 <CheckGuessed+0x3e>
		if(wordToGuess[b] == P2Guess){
     d4e:	90 91 0c 10 	lds	r25, 0x100C	; 0x80100c <P2Guess>
     d52:	e7 e6       	ldi	r30, 0x67	; 103
     d54:	f1 e0       	ldi	r31, 0x01	; 1
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b1 e0       	ldi	r27, 0x01	; 1
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	28 59       	subi	r18, 0x98	; 152
     d60:	3e 4f       	sbci	r19, 0xFE	; 254
     d62:	40 e0       	ldi	r20, 0x00	; 0
			displayGuess[b] = wordToGuess[b];
			letterFound = 1;
     d64:	51 e0       	ldi	r21, 0x01	; 1
void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index)){
		if(wordToGuess[b] == P2Guess){
     d66:	81 91       	ld	r24, Z+
     d68:	89 13       	cpse	r24, r25
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <CheckGuessed+0x2e>
			displayGuess[b] = wordToGuess[b];
     d6c:	9c 93       	st	X, r25
			letterFound = 1;
     d6e:	45 2f       	mov	r20, r21
     d70:	11 96       	adiw	r26, 0x01	; 1

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index)){
     d72:	e2 17       	cp	r30, r18
     d74:	f3 07       	cpc	r31, r19
     d76:	b9 f7       	brne	.-18     	; 0xd66 <CheckGuessed+0x24>
     d78:	40 93 fc 0f 	sts	0x0FFC, r20	; 0x800ffc <letterFound>
			letterFound = 1;
		}
		b++;
	}//end while
	
	if(letterFound == 0){
     d7c:	41 11       	cpse	r20, r1
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <CheckGuessed+0x4e>
		strike++;
     d80:	80 91 ff 0f 	lds	r24, 0x0FFF	; 0x800fff <strike>
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	80 93 ff 0f 	sts	0x0FFF, r24	; 0x800fff <strike>
		wrong = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 93 f9 0f 	sts	0x0FF9, r24	; 0x800ff9 <wrong>
     d90:	08 95       	ret

00000d92 <CheckCorrect>:
	}
}

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
     d92:	10 92 f6 0f 	sts	0x0FF6, r1	; 0x800ff6 <win>
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     d96:	20 91 f7 0f 	lds	r18, 0x0FF7	; 0x800ff7 <WTG_Index>
     d9a:	22 23       	and	r18, r18
     d9c:	a9 f0       	breq	.+42     	; 0xdc8 <CheckCorrect+0x36>
     d9e:	e0 e0       	ldi	r30, 0x00	; 0
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	21 50       	subi	r18, 0x01	; 1
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	3e 4f       	sbci	r19, 0xFE	; 254
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <CheckCorrect+0x1e>
     dae:	89 2f       	mov	r24, r25
		if(displayGuess[b] == '_'){
     db0:	91 91       	ld	r25, Z+
     db2:	9f 35       	cpi	r25, 0x5F	; 95
     db4:	69 f0       	breq	.+26     	; 0xdd0 <CheckCorrect+0x3e>
     db6:	98 2f       	mov	r25, r24

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     db8:	e2 17       	cp	r30, r18
     dba:	f3 07       	cpc	r31, r19
     dbc:	19 f0       	breq	.+6      	; 0xdc4 <CheckCorrect+0x32>
     dbe:	81 11       	cpse	r24, r1
     dc0:	f6 cf       	rjmp	.-20     	; 0xdae <CheckCorrect+0x1c>
     dc2:	08 95       	ret
			checkWin = 0;
		}
		b++;
	}//end while
	
	if(checkWin){
     dc4:	88 23       	and	r24, r24
     dc6:	49 f0       	breq	.+18     	; 0xdda <CheckCorrect+0x48>
		win = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 f6 0f 	sts	0x0FF6, r24	; 0x800ff6 <win>
	}
}
     dce:	08 95       	ret

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     dd0:	e2 17       	cp	r30, r18
     dd2:	f3 07       	cpc	r31, r19
     dd4:	11 f4       	brne	.+4      	; 0xdda <CheckCorrect+0x48>
		if(displayGuess[b] == '_'){
			checkWin = 0;
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	f5 cf       	rjmp	.-22     	; 0xdc4 <CheckCorrect+0x32>
     dda:	08 95       	ret

00000ddc <LCD_Tick>:
enum LCD_States{Init, Wait, MenuLCD, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD, 
	ResetLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
	switch (state)
     de6:	89 30       	cpi	r24, 0x09	; 9
     de8:	91 05       	cpc	r25, r1
     dea:	08 f0       	brcs	.+2      	; 0xdee <LCD_Tick+0x12>
     dec:	11 c1       	rjmp	.+546    	; 0x1010 <LCD_Tick+0x234>
     dee:	fc 01       	movw	r30, r24
     df0:	e6 57       	subi	r30, 0x76	; 118
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	73 c4       	rjmp	.+2278   	; 0x16dc <__tablejump2__>
	{
		case Init : state = MenuLCD;
					LCD_ClearScreen();
     df6:	3b da       	rcall	.-2954   	; 0x26e <LCD_ClearScreen>
     df8:	12 98       	cbi	0x02, 2	; 2
					PORTA = SetBit(PORTA,2,0);
     dfa:	13 98       	cbi	0x02, 3	; 2
					PORTA = SetBit(PORTA,3,0);
     dfc:	6e e7       	ldi	r22, 0x7E	; 126
					LCD_DisplayString(1, "High Score ");
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	58 da       	rcall	.-2896   	; 0x2b4 <LCD_DisplayString>
					LCD_Cursor(12);
     e04:	8c e0       	ldi	r24, 0x0C	; 12
     e06:	36 da       	rcall	.-2964   	; 0x274 <LCD_Cursor>


					ReturnHighScore(eeprom_read_word(( short*)46 ));
     e08:	8e e2       	ldi	r24, 0x2E	; 46
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	7f d4       	rcall	.+2302   	; 0x170c <eeprom_read_word>
     e0e:	58 de       	rcall	.-848    	; 0xac0 <ReturnHighScore>
					
					if(EEPROM_read(eeprom_read_word(( short*)46 )) > 0){
     e10:	8e e2       	ldi	r24, 0x2E	; 46
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	7b d4       	rcall	.+2294   	; 0x170c <eeprom_read_word>
     e16:	4d de       	rcall	.-870    	; 0xab2 <EEPROM_read>
     e18:	88 23       	and	r24, r24
     e1a:	99 f0       	breq	.+38     	; 0xe42 <LCD_Tick+0x66>
     e1c:	80 91 13 10 	lds	r24, 0x1013	; 0x801013 <thousands>
						
						LCD_WriteData((thousands) + '0');
     e20:	80 5d       	subi	r24, 0xD0	; 208
     e22:	3f da       	rcall	.-2946   	; 0x2a2 <LCD_WriteData>
     e24:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <hundreds>
						LCD_WriteData(hundreds + '0');
     e28:	80 5d       	subi	r24, 0xD0	; 208
     e2a:	3b da       	rcall	.-2954   	; 0x2a2 <LCD_WriteData>
     e2c:	80 91 0f 10 	lds	r24, 0x100F	; 0x80100f <tens>
						LCD_WriteData(tens + '0');
     e30:	80 5d       	subi	r24, 0xD0	; 208
     e32:	37 da       	rcall	.-2962   	; 0x2a2 <LCD_WriteData>
     e34:	80 91 09 10 	lds	r24, 0x1009	; 0x801009 <ones>
						LCD_WriteData(ones + '0');
     e38:	80 5d       	subi	r24, 0xD0	; 208
     e3a:	33 da       	rcall	.-2970   	; 0x2a2 <LCD_WriteData>
						LCD_WriteData('s');
     e3c:	83 e7       	ldi	r24, 0x73	; 115
     e3e:	31 da       	rcall	.-2974   	; 0x2a2 <LCD_WriteData>
     e40:	14 c2       	rjmp	.+1064   	; 0x126a <LCD_Tick+0x48e>
					}else {
						//writes score to lcd screen
						LCD_WriteData(0 + '0');
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	2e da       	rcall	.-2980   	; 0x2a2 <LCD_WriteData>
     e46:	80 e3       	ldi	r24, 0x30	; 48
						LCD_WriteData(0 + '0');
     e48:	2c da       	rcall	.-2984   	; 0x2a2 <LCD_WriteData>
     e4a:	80 e3       	ldi	r24, 0x30	; 48
						LCD_WriteData(0 + '0');
     e4c:	2a da       	rcall	.-2988   	; 0x2a2 <LCD_WriteData>
     e4e:	80 e3       	ldi	r24, 0x30	; 48
     e50:	28 da       	rcall	.-2992   	; 0x2a2 <LCD_WriteData>
						LCD_WriteData(0 + '0');
     e52:	83 e7       	ldi	r24, 0x73	; 115
     e54:	26 da       	rcall	.-2996   	; 0x2a2 <LCD_WriteData>
     e56:	09 c2       	rjmp	.+1042   	; 0x126a <LCD_Tick+0x48e>
						LCD_WriteData('s');	
     e58:	8c 2f       	mov	r24, r28
     e5a:	0c da       	rcall	.-3048   	; 0x274 <LCD_Cursor>
     e5c:	f8 01       	movw	r30, r16
     e5e:	81 91       	ld	r24, Z+
					}
					

					for(unsigned char a = 0; a < 11; a++){
						LCD_Cursor(a + 17);
     e60:	8f 01       	movw	r16, r30
     e62:	1f da       	rcall	.-3010   	; 0x2a2 <LCD_WriteData>
     e64:	cf 5f       	subi	r28, 0xFF	; 255
						LCD_WriteData(pressEnter[a]);
     e66:	e0 16       	cp	r14, r16
     e68:	f1 06       	cpc	r15, r17
     e6a:	b1 f7       	brne	.-20     	; 0xe58 <LCD_Tick+0x7c>
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	06 c2       	rjmp	.+1036   	; 0x127e <LCD_Tick+0x4a2>
						LCD_WriteData(0 + '0');
						LCD_WriteData('s');	
					}
					

					for(unsigned char a = 0; a < 11; a++){
     e72:	20 b1       	in	r18, 0x00	; 0
     e74:	20 95       	com	r18


int LCD_Tick(int state){
	switch (state)
	{
		case Init : state = MenuLCD;
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	22 0f       	add	r18, r18
						LCD_WriteData(pressEnter[a]);
					}
					
					
		break;
		case Wait : if(GetBit(~PINA,7)){
     e7a:	23 2f       	mov	r18, r19
     e7c:	22 1f       	adc	r18, r18
     e7e:	33 0b       	sbc	r19, r19
     e80:	31 95       	neg	r19
     e82:	23 2b       	or	r18, r19
     e84:	09 f0       	breq	.+2      	; 0xe88 <LCD_Tick+0xac>
     e86:	93 c1       	rjmp	.+806    	; 0x11ae <LCD_Tick+0x3d2>
     e88:	fa c1       	rjmp	.+1012   	; 0x127e <LCD_Tick+0x4a2>
     e8a:	20 b1       	in	r18, 0x00	; 0
						state = ResetLCD;	
					}else{
						state = Wait;
					}
		break;
		case MenuLCD : if(GetBit(~PINA,6)){
     e8c:	20 95       	com	r18
     e8e:	26 ff       	sbrs	r18, 6
     e90:	f6 c1       	rjmp	.+1004   	; 0x127e <LCD_Tick+0x4a2>
							state = WelcomeLCD;
							LCD_ClearScreen();
     e92:	ed d9       	rcall	.-3110   	; 0x26e <LCD_ClearScreen>
							delay_ms(2);
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	ce d9       	rcall	.-3172   	; 0x236 <delay_ms>
 							LCDBuildChar(0, customChar);
     e9a:	6f e5       	ldi	r22, 0x5F	; 95
     e9c:	71 e0       	ldi	r23, 0x01	; 1
     e9e:	80 e0       	ldi	r24, 0x00	; 0
							LCD_Cursor(17);
     ea0:	37 df       	rcall	.-402    	; 0xd10 <LCDBuildChar>
     ea2:	81 e1       	ldi	r24, 0x11	; 17
							LCD_WriteData(0x00);
     ea4:	e7 d9       	rcall	.-3122   	; 0x274 <LCD_Cursor>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
							LCD_Cursor(20);
     ea8:	fc d9       	rcall	.-3080   	; 0x2a2 <LCD_WriteData>
     eaa:	84 e1       	ldi	r24, 0x14	; 20
     eac:	e3 d9       	rcall	.-3130   	; 0x274 <LCD_Cursor>
							LCD_WriteData(0x00);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	f8 d9       	rcall	.-3088   	; 0x2a2 <LCD_WriteData>
     eb2:	87 e1       	ldi	r24, 0x17	; 23
							LCD_Cursor(23);
     eb4:	df d9       	rcall	.-3138   	; 0x274 <LCD_Cursor>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	f4 d9       	rcall	.-3096   	; 0x2a2 <LCD_WriteData>
							LCD_WriteData(0x00);
     eba:	8a e1       	ldi	r24, 0x1A	; 26
     ebc:	db d9       	rcall	.-3146   	; 0x274 <LCD_Cursor>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
							LCD_Cursor(26);
     ec0:	f0 d9       	rcall	.-3104   	; 0x2a2 <LCD_WriteData>
     ec2:	8d e1       	ldi	r24, 0x1D	; 29
     ec4:	d7 d9       	rcall	.-3154   	; 0x274 <LCD_Cursor>
							LCD_WriteData(0x00);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	ec d9       	rcall	.-3112   	; 0x2a2 <LCD_WriteData>
							LCD_Cursor(29);
     eca:	80 e2       	ldi	r24, 0x20	; 32
     ecc:	d3 d9       	rcall	.-3162   	; 0x274 <LCD_Cursor>
							LCD_WriteData(0x00);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	e8 d9       	rcall	.-3120   	; 0x2a2 <LCD_WriteData>
							LCD_Cursor(32);
     ed2:	83 e2       	ldi	r24, 0x23	; 35
     ed4:	cf d9       	rcall	.-3170   	; 0x274 <LCD_Cursor>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
							LCD_WriteData(0x00);
     ed8:	e4 d9       	rcall	.-3128   	; 0x2a2 <LCD_WriteData>
     eda:	b1 c0       	rjmp	.+354    	; 0x103e <LCD_Tick+0x262>
     edc:	80 b1       	in	r24, 0x00	; 0
							LCD_Cursor(35);
     ede:	80 95       	com	r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	88 0f       	add	r24, r24
							LCD_WriteData(0x00);
     ee4:	89 2f       	mov	r24, r25
     ee6:	88 1f       	adc	r24, r24
     ee8:	99 0b       	sbc	r25, r25
     eea:	91 95       	neg	r25
						}else {
							state = MenuLCD;
						}
		break;
		case WelcomeLCD :	if(GetBit(~PINA,7)){
     eec:	89 2b       	or	r24, r25
     eee:	09 f0       	breq	.+2      	; 0xef2 <LCD_Tick+0x116>
     ef0:	5e c1       	rjmp	.+700    	; 0x11ae <LCD_Tick+0x3d2>
     ef2:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
     ef6:	84 33       	cpi	r24, 0x34	; 52
     ef8:	08 f4       	brcc	.+2      	; 0xefc <LCD_Tick+0x120>
     efa:	a1 c0       	rjmp	.+322    	; 0x103e <LCD_Tick+0x262>
     efc:	b8 d9       	rcall	.-3216   	; 0x26e <LCD_ClearScreen>
								state = ResetLCD;
							}else if(count <= 51){ 
     efe:	6a e8       	ldi	r22, 0x8A	; 138
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	81 e1       	ldi	r24, 0x11	; 17
     f04:	d7 d9       	rcall	.-3154   	; 0x2b4 <LCD_DisplayString>
     f06:	81 e0       	ldi	r24, 0x01	; 1
							  state = WelcomeLCD;
						  }
						  else if(count > 51){
							  state = P1InputLCD;
							  LCD_ClearScreen();
     f08:	b5 d9       	rcall	.-3222   	; 0x274 <LCD_Cursor>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
							  LCD_DisplayString(17,"16 Letters MAX");
     f0c:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <LCDindex>
     f10:	c3 c0       	rjmp	.+390    	; 0x1098 <LCD_Tick+0x2bc>
     f12:	80 b1       	in	r24, 0x00	; 0
							  LCD_Cursor(1);
     f14:	80 95       	com	r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
							  LCDindex = 1;
     f18:	88 0f       	add	r24, r24
     f1a:	89 2f       	mov	r24, r25
     f1c:	88 1f       	adc	r24, r24
     f1e:	99 0b       	sbc	r25, r25
						 }
		break;
		case P1InputLCD :	if(GetBit(~PINA,7)){
     f20:	91 95       	neg	r25
     f22:	89 2b       	or	r24, r25
     f24:	09 f0       	breq	.+2      	; 0xf28 <LCD_Tick+0x14c>
     f26:	43 c1       	rjmp	.+646    	; 0x11ae <LCD_Tick+0x3d2>
     f28:	80 b1       	in	r24, 0x00	; 0
     f2a:	80 95       	com	r24
     f2c:	86 ff       	sbrs	r24, 6
     f2e:	b4 c0       	rjmp	.+360    	; 0x1098 <LCD_Tick+0x2bc>
     f30:	9e d9       	rcall	.-3268   	; 0x26e <LCD_ClearScreen>
     f32:	82 e0       	ldi	r24, 0x02	; 2
								state = ResetLCD;
							}else if(GetBit(~PINA, 6)){
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	7f d9       	rcall	.-3330   	; 0x236 <delay_ms>
     f38:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
								LCD_ClearScreen();
     f3c:	88 23       	and	r24, r24
     f3e:	89 f0       	breq	.+34     	; 0xf62 <LCD_Tick+0x186>
								state = P2InputLCD;
								delay_ms(2);
     f40:	c0 e0       	ldi	r28, 0x00	; 0
     f42:	1f e5       	ldi	r17, 0x5F	; 95
     f44:	ec 2f       	mov	r30, r28
     f46:	f0 e0       	ldi	r31, 0x00	; 0
							
								for(unsigned char a = 0; a < WTG_Index; a++){
     f48:	e0 50       	subi	r30, 0x00	; 0
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	10 83       	st	Z, r17
     f4e:	81 e1       	ldi	r24, 0x11	; 17
     f50:	8c 0f       	add	r24, r28
									displayGuess[a] = '_';
     f52:	90 d9       	rcall	.-3296   	; 0x274 <LCD_Cursor>
     f54:	81 2f       	mov	r24, r17
     f56:	a5 d9       	rcall	.-3254   	; 0x2a2 <LCD_WriteData>
     f58:	cf 5f       	subi	r28, 0xFF	; 255
     f5a:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
									LCD_Cursor(a + 17);
     f5e:	c8 17       	cp	r28, r24
     f60:	88 f3       	brcs	.-30     	; 0xf44 <LCD_Tick+0x168>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	87 d9       	rcall	.-3314   	; 0x274 <LCD_Cursor>
									LCD_WriteData('_');
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <LCDindex>
							}else if(GetBit(~PINA, 6)){
								LCD_ClearScreen();
								state = P2InputLCD;
								delay_ms(2);
							
								for(unsigned char a = 0; a < WTG_Index; a++){
     f6c:	80 93 06 10 	sts	0x1006, r24	; 0x801006 <startTimer>
     f70:	c1 c0       	rjmp	.+386    	; 0x10f4 <LCD_Tick+0x318>
     f72:	80 b1       	in	r24, 0x00	; 0
     f74:	80 95       	com	r24
									displayGuess[a] = '_';
									LCD_Cursor(a + 17);
									LCD_WriteData('_');
								}
								
								LCD_Cursor(1);
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	88 0f       	add	r24, r24
     f7a:	89 2f       	mov	r24, r25
								LCDindex = 1;	
     f7c:	88 1f       	adc	r24, r24
     f7e:	99 0b       	sbc	r25, r25
     f80:	91 95       	neg	r25
								
								//starts timer
								startTimer = 1;				
     f82:	89 2b       	or	r24, r25
     f84:	09 f0       	breq	.+2      	; 0xf88 <LCD_Tick+0x1ac>
     f86:	13 c1       	rjmp	.+550    	; 0x11ae <LCD_Tick+0x3d2>
						}else{						
							state = P1InputLCD;
						}
		break;
		case P2InputLCD :	if(GetBit(~PINA,7)){
     f88:	80 91 ff 0f 	lds	r24, 0x0FFF	; 0x800fff <strike>
     f8c:	86 30       	cpi	r24, 0x06	; 6
     f8e:	29 f4       	brne	.+10     	; 0xf9a <LCD_Tick+0x1be>
     f90:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <count>
     f94:	10 92 06 10 	sts	0x1006, r1	; 0x801006 <startTimer>
     f98:	fc c0       	rjmp	.+504    	; 0x1192 <LCD_Tick+0x3b6>
								state = ResetLCD;
								
							}else if(strike == 6){
     f9a:	80 91 f6 0f 	lds	r24, 0x0FF6	; 0x800ff6 <win>
     f9e:	88 23       	and	r24, r24
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <LCD_Tick+0x1c8>
								state = LoseLCD;
								count = 0;
     fa2:	a8 c0       	rjmp	.+336    	; 0x10f4 <LCD_Tick+0x318>
     fa4:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <count>
								startTimer = 0;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 10 10 	sts	0x1010, r24	; 0x801010 <stopTimer>
							} else if(win){
     fae:	df c0       	rjmp	.+446    	; 0x116e <LCD_Tick+0x392>
     fb0:	80 b1       	in	r24, 0x00	; 0
     fb2:	80 95       	com	r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
								state = WinLCD;
								count = 0;
     fb6:	88 0f       	add	r24, r24
								stopTimer = 1;
     fb8:	89 2f       	mov	r24, r25
     fba:	88 1f       	adc	r24, r24
     fbc:	99 0b       	sbc	r25, r25
							else
							{
								state = P2InputLCD;
							}
		break;
		case WinLCD:	if(GetBit(~PINA,7)){
     fbe:	91 95       	neg	r25
     fc0:	89 2b       	or	r24, r25
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <LCD_Tick+0x1ea>
     fc4:	f4 c0       	rjmp	.+488    	; 0x11ae <LCD_Tick+0x3d2>
     fc6:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
     fca:	85 31       	cpi	r24, 0x15	; 21
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <LCD_Tick+0x1f4>
     fce:	cb c0       	rjmp	.+406    	; 0x1166 <LCD_Tick+0x38a>
     fd0:	4e d9       	rcall	.-3428   	; 0x26e <LCD_ClearScreen>
     fd2:	69 e9       	ldi	r22, 0x99	; 153
							state = ResetLCD;
						}else if(count <= 20){
     fd4:	71 e0       	ldi	r23, 0x01	; 1
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	6d d9       	rcall	.-3366   	; 0x2b4 <LCD_DisplayString>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
							state = WinLCD;
						}else if(count > 20){
							state = Wait;
							LCD_ClearScreen();
     fde:	4f c1       	rjmp	.+670    	; 0x127e <LCD_Tick+0x4a2>
     fe0:	80 b1       	in	r24, 0x00	; 0
							LCD_DisplayString(1, "Press RESET to start a new game");
     fe2:	80 95       	com	r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 0f       	add	r24, r24
     fe8:	89 2f       	mov	r24, r25
     fea:	88 1f       	adc	r24, r24
		case WinLCD:	if(GetBit(~PINA,7)){
							state = ResetLCD;
						}else if(count <= 20){
							state = WinLCD;
						}else if(count > 20){
							state = Wait;
     fec:	99 0b       	sbc	r25, r25
     fee:	91 95       	neg	r25
     ff0:	89 2b       	or	r24, r25
							LCD_ClearScreen();
							LCD_DisplayString(1, "Press RESET to start a new game");
						}
		break;
		case LoseLCD :	if(GetBit(~PINA,7)){
     ff2:	09 f0       	breq	.+2      	; 0xff6 <LCD_Tick+0x21a>
     ff4:	dc c0       	rjmp	.+440    	; 0x11ae <LCD_Tick+0x3d2>
     ff6:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
     ffa:	85 31       	cpi	r24, 0x15	; 21
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <LCD_Tick+0x224>
     ffe:	c5 c0       	rjmp	.+394    	; 0x118a <LCD_Tick+0x3ae>
    1000:	36 d9       	rcall	.-3476   	; 0x26e <LCD_ClearScreen>
    1002:	69 e9       	ldi	r22, 0x99	; 153
    1004:	71 e0       	ldi	r23, 0x01	; 1
							state = ResetLCD;
						}else if(count <= 20){
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	55 d9       	rcall	.-3414   	; 0x2b4 <LCD_DisplayString>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
							state = LoseLCD;
						}else if(count > 20)
						{
							state = Wait;
							LCD_ClearScreen();
    100e:	37 c1       	rjmp	.+622    	; 0x127e <LCD_Tick+0x4a2>
    1010:	85 30       	cpi	r24, 0x05	; 5
							LCD_DisplayString(1, "Press RESET to start a new game");
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <LCD_Tick+0x23c>
    1016:	6e c0       	rjmp	.+220    	; 0x10f4 <LCD_Tick+0x318>
    1018:	3c f4       	brge	.+14     	; 0x1028 <LCD_Tick+0x24c>
    101a:	83 30       	cpi	r24, 0x03	; 3
							state = ResetLCD;
						}else if(count <= 20){
							state = LoseLCD;
						}else if(count > 20)
						{
							state = Wait;
    101c:	91 05       	cpc	r25, r1
    101e:	79 f0       	breq	.+30     	; 0x103e <LCD_Tick+0x262>
    1020:	84 30       	cpi	r24, 0x04	; 4
		break;
		case ResetLCD : state = WelcomeLCD;
		break;
	}//end Transitions
	
	switch (state)
    1022:	91 05       	cpc	r25, r1
    1024:	c9 f1       	breq	.+114    	; 0x1098 <LCD_Tick+0x2bc>
    1026:	2b c1       	rjmp	.+598    	; 0x127e <LCD_Tick+0x4a2>
    1028:	87 30       	cpi	r24, 0x07	; 7
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <LCD_Tick+0x254>
    102e:	ad c0       	rjmp	.+346    	; 0x118a <LCD_Tick+0x3ae>
    1030:	0c f4       	brge	.+2      	; 0x1034 <LCD_Tick+0x258>
    1032:	99 c0       	rjmp	.+306    	; 0x1166 <LCD_Tick+0x38a>
    1034:	88 30       	cpi	r24, 0x08	; 8
    1036:	91 05       	cpc	r25, r1
    1038:	09 f0       	breq	.+2      	; 0x103c <LCD_Tick+0x260>
    103a:	21 c1       	rjmp	.+578    	; 0x127e <LCD_Tick+0x4a2>
    103c:	b8 c0       	rjmp	.+368    	; 0x11ae <LCD_Tick+0x3d2>
    103e:	10 92 f8 0f 	sts	0x0FF8, r1	; 0x800ff8 <LCDindex>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	16 d9       	rcall	.-3540   	; 0x274 <LCD_Cursor>
    1048:	e0 91 f8 0f 	lds	r30, 0x0FF8	; 0x800ff8 <LCDindex>
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	e4 5e       	subi	r30, 0xE4	; 228
		break;
		case Wait :												 
		break;
		case MenuLCD :
		break;
		case WelcomeLCD : 	for(LCDindex = 0; LCDindex < 16; LCDindex++){
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	80 81       	ld	r24, Z
    1054:	26 d9       	rcall	.-3508   	; 0x2a2 <LCD_WriteData>
								LCD_Cursor(LCDindex + 1);
    1056:	80 91 f8 0f 	lds	r24, 0x0FF8	; 0x800ff8 <LCDindex>
    105a:	8f 5f       	subi	r24, 0xFF	; 255
								LCD_WriteData(welcomeMessage[LCDindex]);
    105c:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <LCDindex>
    1060:	80 31       	cpi	r24, 0x10	; 16
    1062:	80 f3       	brcs	.-32     	; 0x1044 <LCD_Tick+0x268>
    1064:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <welcomeMessage>
    1068:	90 93 0a 10 	sts	0x100A, r25	; 0x80100a <front>
		break;
		case Wait :												 
		break;
		case MenuLCD :
		break;
		case WelcomeLCD : 	for(LCDindex = 0; LCDindex < 16; LCDindex++){
    106c:	ec e1       	ldi	r30, 0x1C	; 28
    106e:	f1 e0       	ldi	r31, 0x01	; 1
    1070:	2f e5       	ldi	r18, 0x5F	; 95
    1072:	31 e0       	ldi	r19, 0x01	; 1
    1074:	81 81       	ldd	r24, Z+1	; 0x01
    1076:	81 93       	st	Z+, r24
    1078:	2e 17       	cp	r18, r30
								LCD_Cursor(LCDindex + 1);
								LCD_WriteData(welcomeMessage[LCDindex]);
							}
				
							front = welcomeMessage[0];
    107a:	3f 07       	cpc	r19, r31
    107c:	d9 f7       	brne	.-10     	; 0x1074 <LCD_Tick+0x298>
    107e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <customChar>
    1082:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	80 93 f5 0f 	sts	0x0FF5, r24	; 0x800ff5 <count>
		
							for (unsigned char j = 0; j < 67; j++) {
    108c:	80 e2       	ldi	r24, 0x20	; 32
    108e:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
								welcomeMessage[j] = welcomeMessage[j + 1];
							}
							// put the saved character on the end
							welcomeMessage[67] = front;
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	90 e0       	ldi	r25, 0x00	; 0
		
							count++;
    1096:	f3 c0       	rjmp	.+486    	; 0x127e <LCD_Tick+0x4a2>
    1098:	80 b1       	in	r24, 0x00	; 0
    109a:	80 95       	com	r24
    109c:	85 ff       	sbrs	r24, 5
							lastClicked = ' ';
    109e:	1c c0       	rjmp	.+56     	; 0x10d8 <LCD_Tick+0x2fc>
    10a0:	90 91 12 10 	lds	r25, 0x1012	; 0x801012 <lastClicked>
		break;
    10a4:	90 32       	cpi	r25, 0x20	; 32
    10a6:	c1 f0       	breq	.+48     	; 0x10d8 <LCD_Tick+0x2fc>
    10a8:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
		case P1InputLCD :	if(GetBit(~PINA,5)){
    10ac:	80 31       	cpi	r24, 0x10	; 16
    10ae:	a0 f4       	brcc	.+40     	; 0x10d8 <LCD_Tick+0x2fc>
    10b0:	20 91 f8 0f 	lds	r18, 0x0FF8	; 0x800ff8 <LCDindex>
								if(lastClicked != ' '){
    10b4:	2f 5f       	subi	r18, 0xFF	; 255
    10b6:	20 93 f8 0f 	sts	0x0FF8, r18	; 0x800ff8 <LCDindex>
									if(WTG_Index < 16){
    10ba:	e8 2f       	mov	r30, r24
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	e9 59       	subi	r30, 0x99	; 153
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
										LCDindex++;
    10c2:	90 83       	st	Z, r25
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	80 93 f7 0f 	sts	0x0FF7, r24	; 0x800ff7 <WTG_Index>
										wordToGuess[WTG_Index] = lastClicked;
    10ca:	80 e2       	ldi	r24, 0x20	; 32
										WTG_Index++;
    10cc:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
    10d0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
										lastClicked = ' ';
    10d4:	10 92 00 10 	sts	0x1000, r1	; 0x801000 <click>
										character = ' ';
    10d8:	80 91 f8 0f 	lds	r24, 0x0FF8	; 0x800ff8 <LCDindex>
											click = 0;					
    10dc:	cb d8       	rcall	.-3690   	; 0x274 <LCD_Cursor>
									}//end WTG_index < 16
								}//end lastClicked != ' '
							}//end getBit()
							
							LCD_Cursor(LCDindex);
    10de:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <character>
    10e2:	80 32       	cpi	r24, 0x20	; 32
							if(character != ' '){
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <LCD_Tick+0x30c>
    10e6:	bb c0       	rjmp	.+374    	; 0x125e <LCD_Tick+0x482>
    10e8:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
								lastClicked = character;
    10ec:	da d8       	rcall	.-3660   	; 0x2a2 <LCD_WriteData>
    10ee:	84 e0       	ldi	r24, 0x04	; 4
								LCD_WriteData(character);
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	c5 c0       	rjmp	.+394    	; 0x127e <LCD_Tick+0x4a2>
    10f4:	80 b1       	in	r24, 0x00	; 0
    10f6:	80 95       	com	r24
    10f8:	85 ff       	sbrs	r24, 5
							}
			
		break;
 		case P2InputLCD :	if(GetBit(~PINA,5)){
    10fa:	28 c0       	rjmp	.+80     	; 0x114c <LCD_Tick+0x370>
    10fc:	80 91 12 10 	lds	r24, 0x1012	; 0x801012 <lastClicked>
								if(lastClicked != ' '){
    1100:	80 32       	cpi	r24, 0x20	; 32
    1102:	21 f1       	breq	.+72     	; 0x114c <LCD_Tick+0x370>
    1104:	80 93 0c 10 	sts	0x100C, r24	; 0x80100c <P2Guess>
									P2Guess = lastClicked;
    1108:	80 e2       	ldi	r24, 0x20	; 32
									lastClicked = ' ';
    110a:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
    110e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
									character = ' ';
									click = 0;
    1112:	10 92 00 10 	sts	0x1000, r1	; 0x801000 <click>
									LCD_Cursor(1);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	ad d8       	rcall	.-3750   	; 0x274 <LCD_Cursor>
    111a:	80 e2       	ldi	r24, 0x20	; 32
									LCD_WriteData(' ');
    111c:	c2 d8       	rcall	.-3708   	; 0x2a2 <LCD_WriteData>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	a9 d8       	rcall	.-3758   	; 0x274 <LCD_Cursor>
									LCD_Cursor(1);
    1122:	0f de       	rcall	.-994    	; 0xd42 <CheckGuessed>
    1124:	36 de       	rcall	.-916    	; 0xd92 <CheckCorrect>
    1126:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
										
									CheckGuessed();
									CheckCorrect();
    112a:	88 23       	and	r24, r24
    112c:	79 f0       	breq	.+30     	; 0x114c <LCD_Tick+0x370>
									for(unsigned char a = 0; a < WTG_Index; a++){
    112e:	c0 e0       	ldi	r28, 0x00	; 0
    1130:	81 e1       	ldi	r24, 0x11	; 17
    1132:	8c 0f       	add	r24, r28
    1134:	9f d8       	rcall	.-3778   	; 0x274 <LCD_Cursor>
										LCD_Cursor(a + 17);
    1136:	ec 2f       	mov	r30, r28
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	e0 50       	subi	r30, 0x00	; 0
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
										LCD_WriteData(displayGuess[a]);
    113e:	80 81       	ld	r24, Z
    1140:	b0 d8       	rcall	.-3744   	; 0x2a2 <LCD_WriteData>
    1142:	cf 5f       	subi	r28, 0xFF	; 255
    1144:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
									LCD_WriteData(' ');
									LCD_Cursor(1);
										
									CheckGuessed();
									CheckCorrect();
									for(unsigned char a = 0; a < WTG_Index; a++){
    1148:	c8 17       	cp	r28, r24
    114a:	90 f3       	brcs	.-28     	; 0x1130 <LCD_Tick+0x354>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	92 d8       	rcall	.-3804   	; 0x274 <LCD_Cursor>
    1150:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <character>
										LCD_WriteData(displayGuess[a]);
									}//end for loop								
								}//end lastClicked != ' '
							}//end getbit()
							
							LCD_Cursor(1);
    1154:	80 32       	cpi	r24, 0x20	; 32
    1156:	09 f4       	brne	.+2      	; 0x115a <LCD_Tick+0x37e>
							if(character != ' '){
    1158:	85 c0       	rjmp	.+266    	; 0x1264 <LCD_Tick+0x488>
    115a:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
    115e:	a1 d8       	rcall	.-3774   	; 0x2a2 <LCD_WriteData>
    1160:	85 e0       	ldi	r24, 0x05	; 5
								lastClicked = character;
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	8c c0       	rjmp	.+280    	; 0x127e <LCD_Tick+0x4a2>
								LCD_WriteData(character);
    1166:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
    116a:	80 fd       	sbrc	r24, 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <LCD_Tick+0x396>
    116e:	7f d8       	rcall	.-3842   	; 0x26e <LCD_ClearScreen>
							}	
		break;
		case WinLCD:	if(count % 2 == 0){
    1170:	04 c0       	rjmp	.+8      	; 0x117a <LCD_Tick+0x39e>
    1172:	69 eb       	ldi	r22, 0xB9	; 185
    1174:	71 e0       	ldi	r23, 0x01	; 1
    1176:	81 e0       	ldi	r24, 0x01	; 1
							LCD_ClearScreen();
    1178:	9d d8       	rcall	.-3782   	; 0x2b4 <LCD_DisplayString>
    117a:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
						}else {
							LCD_DisplayString(1, "YOU WIN! YOU WIN! YOU WIN!");
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	80 93 f5 0f 	sts	0x0FF5, r24	; 0x800ff5 <count>
    1184:	86 e0       	ldi	r24, 0x06	; 6
    1186:	90 e0       	ldi	r25, 0x00	; 0
						}
						count++;
    1188:	7a c0       	rjmp	.+244    	; 0x127e <LCD_Tick+0x4a2>
    118a:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
    118e:	80 fd       	sbrc	r24, 0
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <LCD_Tick+0x3ba>
		break;
    1192:	6d d8       	rcall	.-3878   	; 0x26e <LCD_ClearScreen>
    1194:	04 c0       	rjmp	.+8      	; 0x119e <LCD_Tick+0x3c2>
    1196:	64 ed       	ldi	r22, 0xD4	; 212
		case LoseLCD :	if(count % 2 == 0){
    1198:	71 e0       	ldi	r23, 0x01	; 1
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	8b d8       	rcall	.-3818   	; 0x2b4 <LCD_DisplayString>
							LCD_ClearScreen();
    119e:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
						}else {
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	80 93 f5 0f 	sts	0x0FF5, r24	; 0x800ff5 <count>
    11a8:	87 e0       	ldi	r24, 0x07	; 7
						}
						count++;
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	68 c0       	rjmp	.+208    	; 0x127e <LCD_Tick+0x4a2>
    11ae:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <count>
						
		break;
    11b2:	5d d8       	rcall	.-3910   	; 0x26e <LCD_ClearScreen>
		case ResetLCD :	state = WelcomeLCD;
						count = 0;
    11b4:	45 db       	rcall	.-2422   	; 0x840 <N5110_clear>
						LCD_ClearScreen();
    11b6:	81 e0       	ldi	r24, 0x01	; 1
						N5110_clear();
    11b8:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <LCDindex>
						LCDindex = 1;
    11bc:	10 92 f7 0f 	sts	0x0FF7, r1	; 0x800ff7 <WTG_Index>
						WTG_Index = 0; //world to guess index
						lastClicked = ' ';  //last letter user clicked
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
						P2Guess = ' ';
    11c6:	80 93 0c 10 	sts	0x100C, r24	; 0x80100c <P2Guess>
    11ca:	e0 e0       	ldi	r30, 0x00	; 0
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
						for(unsigned char k = 0; k < 17; k++){
							displayGuess[k] = '_';
    11ce:	a7 e6       	ldi	r26, 0x67	; 103
    11d0:	b1 e0       	ldi	r27, 0x01	; 1
							wordToGuess[k] = ' ';
    11d2:	21 e1       	ldi	r18, 0x11	; 17
						N5110_clear();
						LCDindex = 1;
						WTG_Index = 0; //world to guess index
						lastClicked = ' ';  //last letter user clicked
						P2Guess = ' ';
						for(unsigned char k = 0; k < 17; k++){
    11d4:	31 e0       	ldi	r19, 0x01	; 1
    11d6:	9f e5       	ldi	r25, 0x5F	; 95
    11d8:	91 93       	st	Z+, r25
							displayGuess[k] = '_';
							wordToGuess[k] = ' ';
						}
						letterFound = 0; //checks is the letter P2 guess was in P1s word
    11da:	8d 93       	st	X+, r24
    11dc:	e2 17       	cp	r30, r18
						WA_Count = 0;
    11de:	f3 07       	cpc	r31, r19
    11e0:	d9 f7       	brne	.-10     	; 0x11d8 <LCD_Tick+0x3fc>
						index = 1;
    11e2:	10 92 fc 0f 	sts	0x0FFC, r1	; 0x800ffc <letterFound>
    11e6:	10 92 fb 0f 	sts	0x0FFB, r1	; 0x800ffb <WA_Count>
						click = 0;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
						strike = 0;
    11ec:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <index>
						counter = 0;
    11f0:	10 92 00 10 	sts	0x1000, r1	; 0x801000 <click>
						win = 0; 
    11f4:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
						NOKIAReset = 1;
    11f8:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
						WAReset = 1;
    11fc:	10 92 f6 0f 	sts	0x0FF6, r1	; 0x800ff6 <win>
						PORTA = SetBit(PORTA,2,0);
    1200:	80 93 fd 0f 	sts	0x0FFD, r24	; 0x800ffd <NOKIAReset>
						PORTA = SetBit(PORTA,3,0);
						ResetWelcomeMessage(&welcomeMessage);
    1204:	80 93 fa 0f 	sts	0x0FFA, r24	; 0x800ffa <WAReset>
    1208:	12 98       	cbi	0x02, 2	; 2
    120a:	13 98       	cbi	0x02, 3	; 2
						delay_ms(2);
    120c:	8c e1       	ldi	r24, 0x1C	; 28
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	3b dc       	rcall	.-1930   	; 0xa88 <ResetWelcomeMessage>
    1212:	82 e0       	ldi	r24, 0x02	; 2
						LCDBuildChar(0, customChar);
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0f d8       	rcall	.-4066   	; 0x236 <delay_ms>
    1218:	6f e5       	ldi	r22, 0x5F	; 95
    121a:	71 e0       	ldi	r23, 0x01	; 1
    121c:	80 e0       	ldi	r24, 0x00	; 0
						LCD_Cursor(17);
    121e:	78 dd       	rcall	.-1296   	; 0xd10 <LCDBuildChar>
    1220:	81 e1       	ldi	r24, 0x11	; 17
    1222:	28 d8       	rcall	.-4016   	; 0x274 <LCD_Cursor>
						LCD_WriteData(0x00);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	3d d8       	rcall	.-3974   	; 0x2a2 <LCD_WriteData>
    1228:	84 e1       	ldi	r24, 0x14	; 20
						LCD_Cursor(20);
    122a:	24 d8       	rcall	.-4024   	; 0x274 <LCD_Cursor>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	39 d8       	rcall	.-3982   	; 0x2a2 <LCD_WriteData>
						LCD_WriteData(0x00);
    1230:	87 e1       	ldi	r24, 0x17	; 23
    1232:	20 d8       	rcall	.-4032   	; 0x274 <LCD_Cursor>
    1234:	80 e0       	ldi	r24, 0x00	; 0
						LCD_Cursor(23);
    1236:	35 d8       	rcall	.-3990   	; 0x2a2 <LCD_WriteData>
    1238:	8a e1       	ldi	r24, 0x1A	; 26
    123a:	1c d8       	rcall	.-4040   	; 0x274 <LCD_Cursor>
						LCD_WriteData(0x00);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	31 d8       	rcall	.-3998   	; 0x2a2 <LCD_WriteData>
    1240:	8d e1       	ldi	r24, 0x1D	; 29
						LCD_Cursor(26);
    1242:	18 d8       	rcall	.-4048   	; 0x274 <LCD_Cursor>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	2d d8       	rcall	.-4006   	; 0x2a2 <LCD_WriteData>
						LCD_WriteData(0x00);
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	14 d8       	rcall	.-4056   	; 0x274 <LCD_Cursor>
    124c:	80 e0       	ldi	r24, 0x00	; 0
						LCD_Cursor(29);
    124e:	29 d8       	rcall	.-4014   	; 0x2a2 <LCD_WriteData>
    1250:	83 e2       	ldi	r24, 0x23	; 35
    1252:	10 d8       	rcall	.-4064   	; 0x274 <LCD_Cursor>
						LCD_WriteData(0x00);
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	25 d8       	rcall	.-4022   	; 0x2a2 <LCD_WriteData>
    1258:	83 e0       	ldi	r24, 0x03	; 3
						LCD_Cursor(32);
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	10 c0       	rjmp	.+32     	; 0x127e <LCD_Tick+0x4a2>
    125e:	84 e0       	ldi	r24, 0x04	; 4
						LCD_WriteData(0x00);
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0d c0       	rjmp	.+26     	; 0x127e <LCD_Tick+0x4a2>
    1264:	85 e0       	ldi	r24, 0x05	; 5
						LCD_Cursor(35);
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0a c0       	rjmp	.+20     	; 0x127e <LCD_Tick+0x4a2>
    126a:	01 e1       	ldi	r16, 0x11	; 17
						LCD_WriteData(0x00);
    126c:	11 e0       	ldi	r17, 0x01	; 1
    126e:	0f 2e       	mov	r0, r31
    1270:	fc e1       	ldi	r31, 0x1C	; 28
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
						}
						count++;
						
		break;
		case ResetLCD :	state = WelcomeLCD;
    1272:	ef 2e       	mov	r14, r31
    1274:	f1 e0       	ldi	r31, 0x01	; 1
						LCD_WriteData(0x00);
						LCD_Cursor(32);
						LCD_WriteData(0x00);
						LCD_Cursor(35);
						LCD_WriteData(0x00);
		break;
    1276:	ff 2e       	mov	r15, r31
    1278:	f0 2d       	mov	r31, r0
    127a:	c1 e1       	ldi	r28, 0x11	; 17
    127c:	ed cd       	rjmp	.-1062   	; 0xe58 <LCD_Tick+0x7c>
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
	}//end Initializations
	
	
	return state;
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	08 95       	ret

0000128a <main>:
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	8a b9       	out	0x0a, r24	; 10
    128e:	1b b8       	out	0x0b, r1	; 11
    1290:	81 b9       	out	0x01, r24	; 1
    1292:	82 b9       	out	0x02, r24	; 2
enum LCD_States{Init, Wait, MenuLCD, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD, 
	ResetLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
    1294:	84 b9       	out	0x04, r24	; 4
    1296:	15 b8       	out	0x05, r1	; 5
		break;
	}//end Initializations
	
	
	return state;
}
    1298:	80 ef       	ldi	r24, 0xF0	; 240
    129a:	87 b9       	out	0x07, r24	; 7
    129c:	8f e0       	ldi	r24, 0x0F	; 15
    129e:	88 b9       	out	0x08, r24	; 8
    12a0:	ee eb       	ldi	r30, 0xBE	; 190
    12a2:	ff e0       	ldi	r31, 0x0F	; 15
	unsigned long LTPeriod = 500;
	
	unsigned long period = 100;
	unsigned char i = 0;
	
	Tasks[i].state = Init;
    12a4:	10 82       	st	Z, r1
	Tasks[i].period = LCDPeriod;
    12a6:	84 ef       	ldi	r24, 0xF4	; 244
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	a0 e0       	ldi	r26, 0x00	; 0
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	81 83       	std	Z+1, r24	; 0x01
    12b0:	92 83       	std	Z+2, r25	; 0x02
    12b2:	a3 83       	std	Z+3, r26	; 0x03
    12b4:	b4 83       	std	Z+4, r27	; 0x04
	Tasks[i].elapsedTime = LCDPeriod;
    12b6:	85 83       	std	Z+5, r24	; 0x05
    12b8:	96 83       	std	Z+6, r25	; 0x06
    12ba:	a7 83       	std	Z+7, r26	; 0x07
    12bc:	b0 87       	std	Z+8, r27	; 0x08
	Tasks[i].TickFct = &LCD_Tick;
    12be:	2e ee       	ldi	r18, 0xEE	; 238
    12c0:	36 e0       	ldi	r19, 0x06	; 6
    12c2:	32 87       	std	Z+10, r19	; 0x0a
    12c4:	21 87       	std	Z+9, r18	; 0x09
	i++;
	Tasks[i].state = Wait_KP;
    12c6:	13 86       	std	Z+11, r1	; 0x0b
	Tasks[i].period = KPPeriod;
    12c8:	4c e2       	ldi	r20, 0x2C	; 44
    12ca:	51 e0       	ldi	r21, 0x01	; 1
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	44 87       	std	Z+12, r20	; 0x0c
    12d2:	55 87       	std	Z+13, r21	; 0x0d
    12d4:	66 87       	std	Z+14, r22	; 0x0e
    12d6:	77 87       	std	Z+15, r23	; 0x0f
	Tasks[i].elapsedTime = KPPeriod;
    12d8:	40 8b       	std	Z+16, r20	; 0x10
    12da:	51 8b       	std	Z+17, r21	; 0x11
    12dc:	62 8b       	std	Z+18, r22	; 0x12
    12de:	73 8b       	std	Z+19, r23	; 0x13
	Tasks[i].TickFct = &KeypadTick;
    12e0:	22 e8       	ldi	r18, 0x82	; 130
    12e2:	32 e0       	ldi	r19, 0x02	; 2
    12e4:	35 8b       	std	Z+21, r19	; 0x15
    12e6:	24 8b       	std	Z+20, r18	; 0x14
	i++;
	Tasks[i].state = WA_Wait;
    12e8:	16 8a       	std	Z+22, r1	; 0x16
	Tasks[i].period = WAPeriod;
    12ea:	44 e6       	ldi	r20, 0x64	; 100
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	47 8b       	std	Z+23, r20	; 0x17
    12f4:	50 8f       	std	Z+24, r21	; 0x18
    12f6:	61 8f       	std	Z+25, r22	; 0x19
    12f8:	72 8f       	std	Z+26, r23	; 0x1a
	Tasks[i].elapsedTime = WAPeriod;
    12fa:	43 8f       	std	Z+27, r20	; 0x1b
    12fc:	54 8f       	std	Z+28, r21	; 0x1c
    12fe:	65 8f       	std	Z+29, r22	; 0x1d
    1300:	76 8f       	std	Z+30, r23	; 0x1e
	Tasks[i].TickFct = &WA_Tick;
    1302:	29 e1       	ldi	r18, 0x19	; 25
    1304:	36 e0       	ldi	r19, 0x06	; 6
    1306:	30 a3       	std	Z+32, r19	; 0x20
    1308:	27 8f       	std	Z+31, r18	; 0x1f
	i++;
	Tasks[i].state = Nokia_Init;
    130a:	11 a2       	std	Z+33, r1	; 0x21
	Tasks[i].period = NokiaPeriod;
    130c:	82 a3       	std	Z+34, r24	; 0x22
    130e:	93 a3       	std	Z+35, r25	; 0x23
    1310:	a4 a3       	std	Z+36, r26	; 0x24
    1312:	b5 a3       	std	Z+37, r27	; 0x25
	Tasks[i].elapsedTime = NokiaPeriod;
    1314:	86 a3       	std	Z+38, r24	; 0x26
    1316:	97 a3       	std	Z+39, r25	; 0x27
    1318:	a0 a7       	std	Z+40, r26	; 0x28
    131a:	b1 a7       	std	Z+41, r27	; 0x29
	Tasks[i].TickFct = &Nokia_Tick;
    131c:	25 e4       	ldi	r18, 0x45	; 69
    131e:	34 e0       	ldi	r19, 0x04	; 4
    1320:	33 a7       	std	Z+43, r19	; 0x2b
    1322:	22 a7       	std	Z+42, r18	; 0x2a
	i++;
	Tasks[i].state = LT_Init;
    1324:	14 a6       	std	Z+44, r1	; 0x2c
	Tasks[i].period = LTPeriod;
    1326:	85 a7       	std	Z+45, r24	; 0x2d
    1328:	96 a7       	std	Z+46, r25	; 0x2e
    132a:	a7 a7       	std	Z+47, r26	; 0x2f
    132c:	b0 ab       	std	Z+48, r27	; 0x30
	Tasks[i].elapsedTime = LTPeriod;
    132e:	81 ab       	std	Z+49, r24	; 0x31
    1330:	92 ab       	std	Z+50, r25	; 0x32
    1332:	a3 ab       	std	Z+51, r26	; 0x33
    1334:	b4 ab       	std	Z+52, r27	; 0x34
	Tasks[i].TickFct = &LT_Tick;
    1336:	83 eb       	ldi	r24, 0xB3	; 179
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	96 ab       	std	Z+54, r25	; 0x36
    133c:	85 ab       	std	Z+53, r24	; 0x35
	
	//LCDBuildChar(0, customChar);
	TimerSet(period);
    133e:	64 e6       	ldi	r22, 0x64	; 100
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 73 01 	call	0x2e6	; 0x2e6 <TimerSet>
	TimerOn();
    134a:	0e 94 84 01 	call	0x308	; 0x308 <TimerOn>
	LCD_init();
    134e:	0e 94 42 01 	call	0x284	; 0x284 <LCD_init>
	PWM_on();
    1352:	d5 dc       	rcall	.-1622   	; 0xcfe <PWM_on>
    1354:	0f 2e       	mov	r0, r31
    1356:	f5 ef       	ldi	r31, 0xF5	; 245
    1358:	ef 2e       	mov	r14, r31
    135a:	ff e0       	ldi	r31, 0x0F	; 15
    135c:	ff 2e       	mov	r15, r31
    135e:	f0 2d       	mov	r31, r0
    1360:	ce eb       	ldi	r28, 0xBE	; 190
    1362:	df e0       	ldi	r29, 0x0F	; 15
    1364:	8e 01       	movw	r16, r28
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 5; i++ ) {
			// Task is ready to tick
			if ( Tasks[i].elapsedTime == Tasks[i].period ) {
    1366:	4d 81       	ldd	r20, Y+5	; 0x05
    1368:	5e 81       	ldd	r21, Y+6	; 0x06
    136a:	6f 81       	ldd	r22, Y+7	; 0x07
    136c:	78 85       	ldd	r23, Y+8	; 0x08
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	ab 81       	ldd	r26, Y+3	; 0x03
    1374:	bc 81       	ldd	r27, Y+4	; 0x04
    1376:	48 17       	cp	r20, r24
    1378:	59 07       	cpc	r21, r25
    137a:	6a 07       	cpc	r22, r26
    137c:	7b 07       	cpc	r23, r27
    137e:	61 f4       	brne	.+24     	; 0x1398 <main+0x10e>
				// Setting next state for task
				Tasks[i].state = Tasks[i].TickFct(Tasks[i].state);
    1380:	88 81       	ld	r24, Y
    1382:	e9 85       	ldd	r30, Y+9	; 0x09
    1384:	fa 85       	ldd	r31, Y+10	; 0x0a
    1386:	08 2e       	mov	r0, r24
    1388:	00 0c       	add	r0, r0
    138a:	99 0b       	sbc	r25, r25
    138c:	09 95       	icall
    138e:	88 83       	st	Y, r24
				// Reset the elapsed time for next tick.
				Tasks[i].elapsedTime = 0;
    1390:	1d 82       	std	Y+5, r1	; 0x05
    1392:	1e 82       	std	Y+6, r1	; 0x06
    1394:	1f 82       	std	Y+7, r1	; 0x07
    1396:	18 86       	std	Y+8, r1	; 0x08
			}
			Tasks[i].elapsedTime += period;
    1398:	f8 01       	movw	r30, r16
    139a:	85 81       	ldd	r24, Z+5	; 0x05
    139c:	96 81       	ldd	r25, Z+6	; 0x06
    139e:	a7 81       	ldd	r26, Z+7	; 0x07
    13a0:	b0 85       	ldd	r27, Z+8	; 0x08
    13a2:	8c 59       	subi	r24, 0x9C	; 156
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	af 4f       	sbci	r26, 0xFF	; 255
    13a8:	bf 4f       	sbci	r27, 0xFF	; 255
    13aa:	85 83       	std	Z+5, r24	; 0x05
    13ac:	96 83       	std	Z+6, r25	; 0x06
    13ae:	a7 83       	std	Z+7, r26	; 0x07
    13b0:	b0 87       	std	Z+8, r27	; 0x08
    13b2:	2b 96       	adiw	r28, 0x0b	; 11
	
	
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 5; i++ ) {
    13b4:	ce 15       	cp	r28, r14
    13b6:	df 05       	cpc	r29, r15
    13b8:	a9 f6       	brne	.-86     	; 0x1364 <main+0xda>
				Tasks[i].elapsedTime = 0;
			}
			Tasks[i].elapsedTime += period;
		}
		
		while (!TimerFlag){}
    13ba:	80 91 05 10 	lds	r24, 0x1005	; 0x801005 <TimerFlag>
    13be:	88 23       	and	r24, r24
    13c0:	e1 f3       	breq	.-8      	; 0x13ba <main+0x130>
		TimerFlag = 0;
    13c2:	10 92 05 10 	sts	0x1005, r1	; 0x801005 <TimerFlag>
		
	}
    13c6:	cc cf       	rjmp	.-104    	; 0x1360 <main+0xd6>

000013c8 <SPI_SS_Enable>:
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
    13c8:	2c 98       	cbi	0x05, 4	; 5
    13ca:	08 95       	ret

000013cc <SPI_SS_Disable>:
    13cc:	2c 9a       	sbi	0x05, 4	; 5
    13ce:	08 95       	ret

000013d0 <SPI_Init>:
    13d0:	83 eb       	ldi	r24, 0xB3	; 179
    13d2:	84 b9       	out	0x04, r24	; 4
    13d4:	28 9a       	sbi	0x05, 0	; 5
    13d6:	26 98       	cbi	0x04, 6	; 4
    13d8:	2c 9a       	sbi	0x05, 4	; 5
    13da:	81 e5       	ldi	r24, 0x51	; 81
    13dc:	8c bd       	out	0x2c, r24	; 44
    13de:	08 95       	ret

000013e0 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
    13e0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
    13e2:	0d b4       	in	r0, 0x2d	; 45
    13e4:	07 fe       	sbrs	r0, 7
    13e6:	fd cf       	rjmp	.-6      	; 0x13e2 <SPI_Write+0x2>
}
    13e8:	08 95       	ret

000013ea <__cmpsf2>:
    13ea:	9c d0       	rcall	.+312    	; 0x1524 <__fp_cmp>
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <__cmpsf2+0x6>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	08 95       	ret

000013f2 <__divsf3>:
    13f2:	0c d0       	rcall	.+24     	; 0x140c <__divsf3x>
    13f4:	d2 c0       	rjmp	.+420    	; 0x159a <__fp_round>
    13f6:	ca d0       	rcall	.+404    	; 0x158c <__fp_pscB>
    13f8:	40 f0       	brcs	.+16     	; 0x140a <__divsf3+0x18>
    13fa:	c1 d0       	rcall	.+386    	; 0x157e <__fp_pscA>
    13fc:	30 f0       	brcs	.+12     	; 0x140a <__divsf3+0x18>
    13fe:	21 f4       	brne	.+8      	; 0x1408 <__divsf3+0x16>
    1400:	5f 3f       	cpi	r21, 0xFF	; 255
    1402:	19 f0       	breq	.+6      	; 0x140a <__divsf3+0x18>
    1404:	b3 c0       	rjmp	.+358    	; 0x156c <__fp_inf>
    1406:	51 11       	cpse	r21, r1
    1408:	fc c0       	rjmp	.+504    	; 0x1602 <__fp_szero>
    140a:	b6 c0       	rjmp	.+364    	; 0x1578 <__fp_nan>

0000140c <__divsf3x>:
    140c:	d7 d0       	rcall	.+430    	; 0x15bc <__fp_split3>
    140e:	98 f3       	brcs	.-26     	; 0x13f6 <__divsf3+0x4>

00001410 <__divsf3_pse>:
    1410:	99 23       	and	r25, r25
    1412:	c9 f3       	breq	.-14     	; 0x1406 <__divsf3+0x14>
    1414:	55 23       	and	r21, r21
    1416:	b1 f3       	breq	.-20     	; 0x1404 <__divsf3+0x12>
    1418:	95 1b       	sub	r25, r21
    141a:	55 0b       	sbc	r21, r21
    141c:	bb 27       	eor	r27, r27
    141e:	aa 27       	eor	r26, r26
    1420:	62 17       	cp	r22, r18
    1422:	73 07       	cpc	r23, r19
    1424:	84 07       	cpc	r24, r20
    1426:	38 f0       	brcs	.+14     	; 0x1436 <__divsf3_pse+0x26>
    1428:	9f 5f       	subi	r25, 0xFF	; 255
    142a:	5f 4f       	sbci	r21, 0xFF	; 255
    142c:	22 0f       	add	r18, r18
    142e:	33 1f       	adc	r19, r19
    1430:	44 1f       	adc	r20, r20
    1432:	aa 1f       	adc	r26, r26
    1434:	a9 f3       	breq	.-22     	; 0x1420 <__divsf3_pse+0x10>
    1436:	33 d0       	rcall	.+102    	; 0x149e <__divsf3_pse+0x8e>
    1438:	0e 2e       	mov	r0, r30
    143a:	3a f0       	brmi	.+14     	; 0x144a <__divsf3_pse+0x3a>
    143c:	e0 e8       	ldi	r30, 0x80	; 128
    143e:	30 d0       	rcall	.+96     	; 0x14a0 <__divsf3_pse+0x90>
    1440:	91 50       	subi	r25, 0x01	; 1
    1442:	50 40       	sbci	r21, 0x00	; 0
    1444:	e6 95       	lsr	r30
    1446:	00 1c       	adc	r0, r0
    1448:	ca f7       	brpl	.-14     	; 0x143c <__divsf3_pse+0x2c>
    144a:	29 d0       	rcall	.+82     	; 0x149e <__divsf3_pse+0x8e>
    144c:	fe 2f       	mov	r31, r30
    144e:	27 d0       	rcall	.+78     	; 0x149e <__divsf3_pse+0x8e>
    1450:	66 0f       	add	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	88 1f       	adc	r24, r24
    1456:	bb 1f       	adc	r27, r27
    1458:	26 17       	cp	r18, r22
    145a:	37 07       	cpc	r19, r23
    145c:	48 07       	cpc	r20, r24
    145e:	ab 07       	cpc	r26, r27
    1460:	b0 e8       	ldi	r27, 0x80	; 128
    1462:	09 f0       	breq	.+2      	; 0x1466 <__divsf3_pse+0x56>
    1464:	bb 0b       	sbc	r27, r27
    1466:	80 2d       	mov	r24, r0
    1468:	bf 01       	movw	r22, r30
    146a:	ff 27       	eor	r31, r31
    146c:	93 58       	subi	r25, 0x83	; 131
    146e:	5f 4f       	sbci	r21, 0xFF	; 255
    1470:	2a f0       	brmi	.+10     	; 0x147c <__divsf3_pse+0x6c>
    1472:	9e 3f       	cpi	r25, 0xFE	; 254
    1474:	51 05       	cpc	r21, r1
    1476:	68 f0       	brcs	.+26     	; 0x1492 <__divsf3_pse+0x82>
    1478:	79 c0       	rjmp	.+242    	; 0x156c <__fp_inf>
    147a:	c3 c0       	rjmp	.+390    	; 0x1602 <__fp_szero>
    147c:	5f 3f       	cpi	r21, 0xFF	; 255
    147e:	ec f3       	brlt	.-6      	; 0x147a <__divsf3_pse+0x6a>
    1480:	98 3e       	cpi	r25, 0xE8	; 232
    1482:	dc f3       	brlt	.-10     	; 0x147a <__divsf3_pse+0x6a>
    1484:	86 95       	lsr	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f7 95       	ror	r31
    148e:	9f 5f       	subi	r25, 0xFF	; 255
    1490:	c9 f7       	brne	.-14     	; 0x1484 <__divsf3_pse+0x74>
    1492:	88 0f       	add	r24, r24
    1494:	91 1d       	adc	r25, r1
    1496:	96 95       	lsr	r25
    1498:	87 95       	ror	r24
    149a:	97 f9       	bld	r25, 7
    149c:	08 95       	ret
    149e:	e1 e0       	ldi	r30, 0x01	; 1
    14a0:	66 0f       	add	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	bb 1f       	adc	r27, r27
    14a8:	62 17       	cp	r22, r18
    14aa:	73 07       	cpc	r23, r19
    14ac:	84 07       	cpc	r24, r20
    14ae:	ba 07       	cpc	r27, r26
    14b0:	20 f0       	brcs	.+8      	; 0x14ba <__divsf3_pse+0xaa>
    14b2:	62 1b       	sub	r22, r18
    14b4:	73 0b       	sbc	r23, r19
    14b6:	84 0b       	sbc	r24, r20
    14b8:	ba 0b       	sbc	r27, r26
    14ba:	ee 1f       	adc	r30, r30
    14bc:	88 f7       	brcc	.-30     	; 0x14a0 <__divsf3_pse+0x90>
    14be:	e0 95       	com	r30
    14c0:	08 95       	ret

000014c2 <__fixsfsi>:
    14c2:	04 d0       	rcall	.+8      	; 0x14cc <__fixunssfsi>
    14c4:	68 94       	set
    14c6:	b1 11       	cpse	r27, r1
    14c8:	9c c0       	rjmp	.+312    	; 0x1602 <__fp_szero>
    14ca:	08 95       	ret

000014cc <__fixunssfsi>:
    14cc:	7f d0       	rcall	.+254    	; 0x15cc <__fp_splitA>
    14ce:	88 f0       	brcs	.+34     	; 0x14f2 <__fixunssfsi+0x26>
    14d0:	9f 57       	subi	r25, 0x7F	; 127
    14d2:	90 f0       	brcs	.+36     	; 0x14f8 <__fixunssfsi+0x2c>
    14d4:	b9 2f       	mov	r27, r25
    14d6:	99 27       	eor	r25, r25
    14d8:	b7 51       	subi	r27, 0x17	; 23
    14da:	a0 f0       	brcs	.+40     	; 0x1504 <__fixunssfsi+0x38>
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <__fixunssfsi+0x46>
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	1a f0       	brmi	.+6      	; 0x14ee <__fixunssfsi+0x22>
    14e8:	ba 95       	dec	r27
    14ea:	c9 f7       	brne	.-14     	; 0x14de <__fixunssfsi+0x12>
    14ec:	12 c0       	rjmp	.+36     	; 0x1512 <__fixunssfsi+0x46>
    14ee:	b1 30       	cpi	r27, 0x01	; 1
    14f0:	81 f0       	breq	.+32     	; 0x1512 <__fixunssfsi+0x46>
    14f2:	86 d0       	rcall	.+268    	; 0x1600 <__fp_zero>
    14f4:	b1 e0       	ldi	r27, 0x01	; 1
    14f6:	08 95       	ret
    14f8:	83 c0       	rjmp	.+262    	; 0x1600 <__fp_zero>
    14fa:	67 2f       	mov	r22, r23
    14fc:	78 2f       	mov	r23, r24
    14fe:	88 27       	eor	r24, r24
    1500:	b8 5f       	subi	r27, 0xF8	; 248
    1502:	39 f0       	breq	.+14     	; 0x1512 <__fixunssfsi+0x46>
    1504:	b9 3f       	cpi	r27, 0xF9	; 249
    1506:	cc f3       	brlt	.-14     	; 0x14fa <__fixunssfsi+0x2e>
    1508:	86 95       	lsr	r24
    150a:	77 95       	ror	r23
    150c:	67 95       	ror	r22
    150e:	b3 95       	inc	r27
    1510:	d9 f7       	brne	.-10     	; 0x1508 <__fixunssfsi+0x3c>
    1512:	3e f4       	brtc	.+14     	; 0x1522 <__fixunssfsi+0x56>
    1514:	90 95       	com	r25
    1516:	80 95       	com	r24
    1518:	70 95       	com	r23
    151a:	61 95       	neg	r22
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	8f 4f       	sbci	r24, 0xFF	; 255
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	08 95       	ret

00001524 <__fp_cmp>:
    1524:	99 0f       	add	r25, r25
    1526:	00 08       	sbc	r0, r0
    1528:	55 0f       	add	r21, r21
    152a:	aa 0b       	sbc	r26, r26
    152c:	e0 e8       	ldi	r30, 0x80	; 128
    152e:	fe ef       	ldi	r31, 0xFE	; 254
    1530:	16 16       	cp	r1, r22
    1532:	17 06       	cpc	r1, r23
    1534:	e8 07       	cpc	r30, r24
    1536:	f9 07       	cpc	r31, r25
    1538:	c0 f0       	brcs	.+48     	; 0x156a <__fp_cmp+0x46>
    153a:	12 16       	cp	r1, r18
    153c:	13 06       	cpc	r1, r19
    153e:	e4 07       	cpc	r30, r20
    1540:	f5 07       	cpc	r31, r21
    1542:	98 f0       	brcs	.+38     	; 0x156a <__fp_cmp+0x46>
    1544:	62 1b       	sub	r22, r18
    1546:	73 0b       	sbc	r23, r19
    1548:	84 0b       	sbc	r24, r20
    154a:	95 0b       	sbc	r25, r21
    154c:	39 f4       	brne	.+14     	; 0x155c <__fp_cmp+0x38>
    154e:	0a 26       	eor	r0, r26
    1550:	61 f0       	breq	.+24     	; 0x156a <__fp_cmp+0x46>
    1552:	23 2b       	or	r18, r19
    1554:	24 2b       	or	r18, r20
    1556:	25 2b       	or	r18, r21
    1558:	21 f4       	brne	.+8      	; 0x1562 <__fp_cmp+0x3e>
    155a:	08 95       	ret
    155c:	0a 26       	eor	r0, r26
    155e:	09 f4       	brne	.+2      	; 0x1562 <__fp_cmp+0x3e>
    1560:	a1 40       	sbci	r26, 0x01	; 1
    1562:	a6 95       	lsr	r26
    1564:	8f ef       	ldi	r24, 0xFF	; 255
    1566:	81 1d       	adc	r24, r1
    1568:	81 1d       	adc	r24, r1
    156a:	08 95       	ret

0000156c <__fp_inf>:
    156c:	97 f9       	bld	r25, 7
    156e:	9f 67       	ori	r25, 0x7F	; 127
    1570:	80 e8       	ldi	r24, 0x80	; 128
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	08 95       	ret

00001578 <__fp_nan>:
    1578:	9f ef       	ldi	r25, 0xFF	; 255
    157a:	80 ec       	ldi	r24, 0xC0	; 192
    157c:	08 95       	ret

0000157e <__fp_pscA>:
    157e:	00 24       	eor	r0, r0
    1580:	0a 94       	dec	r0
    1582:	16 16       	cp	r1, r22
    1584:	17 06       	cpc	r1, r23
    1586:	18 06       	cpc	r1, r24
    1588:	09 06       	cpc	r0, r25
    158a:	08 95       	ret

0000158c <__fp_pscB>:
    158c:	00 24       	eor	r0, r0
    158e:	0a 94       	dec	r0
    1590:	12 16       	cp	r1, r18
    1592:	13 06       	cpc	r1, r19
    1594:	14 06       	cpc	r1, r20
    1596:	05 06       	cpc	r0, r21
    1598:	08 95       	ret

0000159a <__fp_round>:
    159a:	09 2e       	mov	r0, r25
    159c:	03 94       	inc	r0
    159e:	00 0c       	add	r0, r0
    15a0:	11 f4       	brne	.+4      	; 0x15a6 <__fp_round+0xc>
    15a2:	88 23       	and	r24, r24
    15a4:	52 f0       	brmi	.+20     	; 0x15ba <__fp_round+0x20>
    15a6:	bb 0f       	add	r27, r27
    15a8:	40 f4       	brcc	.+16     	; 0x15ba <__fp_round+0x20>
    15aa:	bf 2b       	or	r27, r31
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <__fp_round+0x18>
    15ae:	60 ff       	sbrs	r22, 0
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <__fp_round+0x20>
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	08 95       	ret

000015bc <__fp_split3>:
    15bc:	57 fd       	sbrc	r21, 7
    15be:	90 58       	subi	r25, 0x80	; 128
    15c0:	44 0f       	add	r20, r20
    15c2:	55 1f       	adc	r21, r21
    15c4:	59 f0       	breq	.+22     	; 0x15dc <__fp_splitA+0x10>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	71 f0       	breq	.+28     	; 0x15e6 <__fp_splitA+0x1a>
    15ca:	47 95       	ror	r20

000015cc <__fp_splitA>:
    15cc:	88 0f       	add	r24, r24
    15ce:	97 fb       	bst	r25, 7
    15d0:	99 1f       	adc	r25, r25
    15d2:	61 f0       	breq	.+24     	; 0x15ec <__fp_splitA+0x20>
    15d4:	9f 3f       	cpi	r25, 0xFF	; 255
    15d6:	79 f0       	breq	.+30     	; 0x15f6 <__fp_splitA+0x2a>
    15d8:	87 95       	ror	r24
    15da:	08 95       	ret
    15dc:	12 16       	cp	r1, r18
    15de:	13 06       	cpc	r1, r19
    15e0:	14 06       	cpc	r1, r20
    15e2:	55 1f       	adc	r21, r21
    15e4:	f2 cf       	rjmp	.-28     	; 0x15ca <__fp_split3+0xe>
    15e6:	46 95       	lsr	r20
    15e8:	f1 df       	rcall	.-30     	; 0x15cc <__fp_splitA>
    15ea:	08 c0       	rjmp	.+16     	; 0x15fc <__fp_splitA+0x30>
    15ec:	16 16       	cp	r1, r22
    15ee:	17 06       	cpc	r1, r23
    15f0:	18 06       	cpc	r1, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	f1 cf       	rjmp	.-30     	; 0x15d8 <__fp_splitA+0xc>
    15f6:	86 95       	lsr	r24
    15f8:	71 05       	cpc	r23, r1
    15fa:	61 05       	cpc	r22, r1
    15fc:	08 94       	sec
    15fe:	08 95       	ret

00001600 <__fp_zero>:
    1600:	e8 94       	clt

00001602 <__fp_szero>:
    1602:	bb 27       	eor	r27, r27
    1604:	66 27       	eor	r22, r22
    1606:	77 27       	eor	r23, r23
    1608:	cb 01       	movw	r24, r22
    160a:	97 f9       	bld	r25, 7
    160c:	08 95       	ret

0000160e <__gesf2>:
    160e:	8a df       	rcall	.-236    	; 0x1524 <__fp_cmp>
    1610:	08 f4       	brcc	.+2      	; 0x1614 <__gesf2+0x6>
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	08 95       	ret

00001616 <__mulsf3>:
    1616:	0b d0       	rcall	.+22     	; 0x162e <__mulsf3x>
    1618:	c0 cf       	rjmp	.-128    	; 0x159a <__fp_round>
    161a:	b1 df       	rcall	.-158    	; 0x157e <__fp_pscA>
    161c:	28 f0       	brcs	.+10     	; 0x1628 <__mulsf3+0x12>
    161e:	b6 df       	rcall	.-148    	; 0x158c <__fp_pscB>
    1620:	18 f0       	brcs	.+6      	; 0x1628 <__mulsf3+0x12>
    1622:	95 23       	and	r25, r21
    1624:	09 f0       	breq	.+2      	; 0x1628 <__mulsf3+0x12>
    1626:	a2 cf       	rjmp	.-188    	; 0x156c <__fp_inf>
    1628:	a7 cf       	rjmp	.-178    	; 0x1578 <__fp_nan>
    162a:	11 24       	eor	r1, r1
    162c:	ea cf       	rjmp	.-44     	; 0x1602 <__fp_szero>

0000162e <__mulsf3x>:
    162e:	c6 df       	rcall	.-116    	; 0x15bc <__fp_split3>
    1630:	a0 f3       	brcs	.-24     	; 0x161a <__mulsf3+0x4>

00001632 <__mulsf3_pse>:
    1632:	95 9f       	mul	r25, r21
    1634:	d1 f3       	breq	.-12     	; 0x162a <__mulsf3+0x14>
    1636:	95 0f       	add	r25, r21
    1638:	50 e0       	ldi	r21, 0x00	; 0
    163a:	55 1f       	adc	r21, r21
    163c:	62 9f       	mul	r22, r18
    163e:	f0 01       	movw	r30, r0
    1640:	72 9f       	mul	r23, r18
    1642:	bb 27       	eor	r27, r27
    1644:	f0 0d       	add	r31, r0
    1646:	b1 1d       	adc	r27, r1
    1648:	63 9f       	mul	r22, r19
    164a:	aa 27       	eor	r26, r26
    164c:	f0 0d       	add	r31, r0
    164e:	b1 1d       	adc	r27, r1
    1650:	aa 1f       	adc	r26, r26
    1652:	64 9f       	mul	r22, r20
    1654:	66 27       	eor	r22, r22
    1656:	b0 0d       	add	r27, r0
    1658:	a1 1d       	adc	r26, r1
    165a:	66 1f       	adc	r22, r22
    165c:	82 9f       	mul	r24, r18
    165e:	22 27       	eor	r18, r18
    1660:	b0 0d       	add	r27, r0
    1662:	a1 1d       	adc	r26, r1
    1664:	62 1f       	adc	r22, r18
    1666:	73 9f       	mul	r23, r19
    1668:	b0 0d       	add	r27, r0
    166a:	a1 1d       	adc	r26, r1
    166c:	62 1f       	adc	r22, r18
    166e:	83 9f       	mul	r24, r19
    1670:	a0 0d       	add	r26, r0
    1672:	61 1d       	adc	r22, r1
    1674:	22 1f       	adc	r18, r18
    1676:	74 9f       	mul	r23, r20
    1678:	33 27       	eor	r19, r19
    167a:	a0 0d       	add	r26, r0
    167c:	61 1d       	adc	r22, r1
    167e:	23 1f       	adc	r18, r19
    1680:	84 9f       	mul	r24, r20
    1682:	60 0d       	add	r22, r0
    1684:	21 1d       	adc	r18, r1
    1686:	82 2f       	mov	r24, r18
    1688:	76 2f       	mov	r23, r22
    168a:	6a 2f       	mov	r22, r26
    168c:	11 24       	eor	r1, r1
    168e:	9f 57       	subi	r25, 0x7F	; 127
    1690:	50 40       	sbci	r21, 0x00	; 0
    1692:	8a f0       	brmi	.+34     	; 0x16b6 <__mulsf3_pse+0x84>
    1694:	e1 f0       	breq	.+56     	; 0x16ce <__mulsf3_pse+0x9c>
    1696:	88 23       	and	r24, r24
    1698:	4a f0       	brmi	.+18     	; 0x16ac <__mulsf3_pse+0x7a>
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	bb 1f       	adc	r27, r27
    16a0:	66 1f       	adc	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	91 50       	subi	r25, 0x01	; 1
    16a8:	50 40       	sbci	r21, 0x00	; 0
    16aa:	a9 f7       	brne	.-22     	; 0x1696 <__mulsf3_pse+0x64>
    16ac:	9e 3f       	cpi	r25, 0xFE	; 254
    16ae:	51 05       	cpc	r21, r1
    16b0:	70 f0       	brcs	.+28     	; 0x16ce <__mulsf3_pse+0x9c>
    16b2:	5c cf       	rjmp	.-328    	; 0x156c <__fp_inf>
    16b4:	a6 cf       	rjmp	.-180    	; 0x1602 <__fp_szero>
    16b6:	5f 3f       	cpi	r21, 0xFF	; 255
    16b8:	ec f3       	brlt	.-6      	; 0x16b4 <__mulsf3_pse+0x82>
    16ba:	98 3e       	cpi	r25, 0xE8	; 232
    16bc:	dc f3       	brlt	.-10     	; 0x16b4 <__mulsf3_pse+0x82>
    16be:	86 95       	lsr	r24
    16c0:	77 95       	ror	r23
    16c2:	67 95       	ror	r22
    16c4:	b7 95       	ror	r27
    16c6:	f7 95       	ror	r31
    16c8:	e7 95       	ror	r30
    16ca:	9f 5f       	subi	r25, 0xFF	; 255
    16cc:	c1 f7       	brne	.-16     	; 0x16be <__mulsf3_pse+0x8c>
    16ce:	fe 2b       	or	r31, r30
    16d0:	88 0f       	add	r24, r24
    16d2:	91 1d       	adc	r25, r1
    16d4:	96 95       	lsr	r25
    16d6:	87 95       	ror	r24
    16d8:	97 f9       	bld	r25, 7
    16da:	08 95       	ret

000016dc <__tablejump2__>:
    16dc:	ee 0f       	add	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	00 24       	eor	r0, r0
    16e2:	00 1c       	adc	r0, r0
    16e4:	0b be       	out	0x3b, r0	; 59
    16e6:	07 90       	elpm	r0, Z+
    16e8:	f6 91       	elpm	r31, Z
    16ea:	e0 2d       	mov	r30, r0
    16ec:	09 94       	ijmp

000016ee <__umulhisi3>:
    16ee:	a2 9f       	mul	r26, r18
    16f0:	b0 01       	movw	r22, r0
    16f2:	b3 9f       	mul	r27, r19
    16f4:	c0 01       	movw	r24, r0
    16f6:	a3 9f       	mul	r26, r19
    16f8:	70 0d       	add	r23, r0
    16fa:	81 1d       	adc	r24, r1
    16fc:	11 24       	eor	r1, r1
    16fe:	91 1d       	adc	r25, r1
    1700:	b2 9f       	mul	r27, r18
    1702:	70 0d       	add	r23, r0
    1704:	81 1d       	adc	r24, r1
    1706:	11 24       	eor	r1, r1
    1708:	91 1d       	adc	r25, r1
    170a:	08 95       	ret

0000170c <eeprom_read_word>:
    170c:	a8 e1       	ldi	r26, 0x18	; 24
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	42 e0       	ldi	r20, 0x02	; 2
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <eeprom_read_blraw>

00001716 <eeprom_update_word>:
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	27 2f       	mov	r18, r23
    171a:	12 d0       	rcall	.+36     	; 0x1740 <eeprom_update_r18>
    171c:	10 c0       	rjmp	.+32     	; 0x173e <eeprom_update_byte>

0000171e <eeprom_read_block>:
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22

00001722 <eeprom_read_blraw>:
    1722:	fc 01       	movw	r30, r24
    1724:	f9 99       	sbic	0x1f, 1	; 31
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <eeprom_read_blraw+0x2>
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <eeprom_read_blraw+0x14>
    172a:	f2 bd       	out	0x22, r31	; 34
    172c:	e1 bd       	out	0x21, r30	; 33
    172e:	f8 9a       	sbi	0x1f, 0	; 31
    1730:	31 96       	adiw	r30, 0x01	; 1
    1732:	00 b4       	in	r0, 0x20	; 32
    1734:	0d 92       	st	X+, r0
    1736:	41 50       	subi	r20, 0x01	; 1
    1738:	50 40       	sbci	r21, 0x00	; 0
    173a:	b8 f7       	brcc	.-18     	; 0x172a <eeprom_read_blraw+0x8>
    173c:	08 95       	ret

0000173e <eeprom_update_byte>:
    173e:	26 2f       	mov	r18, r22

00001740 <eeprom_update_r18>:
    1740:	f9 99       	sbic	0x1f, 1	; 31
    1742:	fe cf       	rjmp	.-4      	; 0x1740 <eeprom_update_r18>
    1744:	92 bd       	out	0x22, r25	; 34
    1746:	81 bd       	out	0x21, r24	; 33
    1748:	f8 9a       	sbi	0x1f, 0	; 31
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	00 b4       	in	r0, 0x20	; 32
    174e:	02 16       	cp	r0, r18
    1750:	39 f0       	breq	.+14     	; 0x1760 <eeprom_update_r18+0x20>
    1752:	1f ba       	out	0x1f, r1	; 31
    1754:	20 bd       	out	0x20, r18	; 32
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	fa 9a       	sbi	0x1f, 2	; 31
    175c:	f9 9a       	sbi	0x1f, 1	; 31
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	08 95       	ret

00001762 <_exit>:
    1762:	f8 94       	cli

00001764 <__stop_program>:
    1764:	ff cf       	rjmp	.-2      	; 0x1764 <__stop_program>
