
Hangman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000ea4  00800100  00001364  000013f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800fa4  00800fa4  0000229c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001df7  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6f  00000000  00000000  00004273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001417  00000000  00000000  00004de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  000061fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000928  00000000  00000000  0000657c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001041  00000000  00000000  00006ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00007ee5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
       2:	00 00       	nop
       4:	ad c0       	rjmp	.+346    	; 0x160 <__bad_interrupt>
       6:	00 00       	nop
       8:	ab c0       	rjmp	.+342    	; 0x160 <__bad_interrupt>
       a:	00 00       	nop
       c:	a9 c0       	rjmp	.+338    	; 0x160 <__bad_interrupt>
       e:	00 00       	nop
      10:	a7 c0       	rjmp	.+334    	; 0x160 <__bad_interrupt>
      12:	00 00       	nop
      14:	a5 c0       	rjmp	.+330    	; 0x160 <__bad_interrupt>
      16:	00 00       	nop
      18:	a3 c0       	rjmp	.+326    	; 0x160 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a1 c0       	rjmp	.+322    	; 0x160 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9f c0       	rjmp	.+318    	; 0x160 <__bad_interrupt>
      22:	00 00       	nop
      24:	9d c0       	rjmp	.+314    	; 0x160 <__bad_interrupt>
      26:	00 00       	nop
      28:	9b c0       	rjmp	.+310    	; 0x160 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	99 c0       	rjmp	.+306    	; 0x160 <__bad_interrupt>
      2e:	00 00       	nop
      30:	97 c0       	rjmp	.+302    	; 0x160 <__bad_interrupt>
      32:	00 00       	nop
      34:	23 c1       	rjmp	.+582    	; 0x27c <__vector_13>
      36:	00 00       	nop
      38:	93 c0       	rjmp	.+294    	; 0x160 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	91 c0       	rjmp	.+290    	; 0x160 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8f c0       	rjmp	.+286    	; 0x160 <__bad_interrupt>
      42:	00 00       	nop
      44:	8d c0       	rjmp	.+282    	; 0x160 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c0       	rjmp	.+278    	; 0x160 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	89 c0       	rjmp	.+274    	; 0x160 <__bad_interrupt>
      4e:	00 00       	nop
      50:	87 c0       	rjmp	.+270    	; 0x160 <__bad_interrupt>
      52:	00 00       	nop
      54:	85 c0       	rjmp	.+266    	; 0x160 <__bad_interrupt>
      56:	00 00       	nop
      58:	83 c0       	rjmp	.+262    	; 0x160 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	81 c0       	rjmp	.+258    	; 0x160 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7f c0       	rjmp	.+254    	; 0x160 <__bad_interrupt>
      62:	00 00       	nop
      64:	7d c0       	rjmp	.+250    	; 0x160 <__bad_interrupt>
      66:	00 00       	nop
      68:	7b c0       	rjmp	.+246    	; 0x160 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	79 c0       	rjmp	.+242    	; 0x160 <__bad_interrupt>
      6e:	00 00       	nop
      70:	77 c0       	rjmp	.+238    	; 0x160 <__bad_interrupt>
      72:	00 00       	nop
      74:	75 c0       	rjmp	.+234    	; 0x160 <__bad_interrupt>
      76:	00 00       	nop
      78:	73 c0       	rjmp	.+230    	; 0x160 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	71 c0       	rjmp	.+226    	; 0x160 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6f c0       	rjmp	.+222    	; 0x160 <__bad_interrupt>
      82:	00 00       	nop
      84:	6d c0       	rjmp	.+218    	; 0x160 <__bad_interrupt>
      86:	00 00       	nop
      88:	6b c0       	rjmp	.+214    	; 0x160 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 01       	movw	r30, r16
      8e:	21 03       	mulsu	r18, r17
      90:	21 03       	mulsu	r18, r17
      92:	21 03       	mulsu	r18, r17
      94:	21 03       	mulsu	r18, r17
      96:	21 03       	mulsu	r18, r17
      98:	21 03       	mulsu	r18, r17
      9a:	21 03       	mulsu	r18, r17
      9c:	21 03       	mulsu	r18, r17
      9e:	21 03       	mulsu	r18, r17
      a0:	21 03       	mulsu	r18, r17
      a2:	21 03       	mulsu	r18, r17
      a4:	21 03       	mulsu	r18, r17
      a6:	21 03       	mulsu	r18, r17
      a8:	21 03       	mulsu	r18, r17
      aa:	21 03       	mulsu	r18, r17
      ac:	21 03       	mulsu	r18, r17
      ae:	21 03       	mulsu	r18, r17
      b0:	21 03       	mulsu	r18, r17
      b2:	21 03       	mulsu	r18, r17
      b4:	21 03       	mulsu	r18, r17
      b6:	21 03       	mulsu	r18, r17
      b8:	21 03       	mulsu	r18, r17
      ba:	21 03       	mulsu	r18, r17
      bc:	21 03       	mulsu	r18, r17
      be:	21 03       	mulsu	r18, r17
      c0:	21 03       	mulsu	r18, r17
      c2:	21 03       	mulsu	r18, r17
      c4:	21 03       	mulsu	r18, r17
      c6:	21 03       	mulsu	r18, r17
      c8:	21 03       	mulsu	r18, r17
      ca:	21 03       	mulsu	r18, r17
      cc:	21 03       	mulsu	r18, r17
      ce:	21 03       	mulsu	r18, r17
      d0:	21 03       	mulsu	r18, r17
      d2:	21 03       	mulsu	r18, r17
      d4:	21 03       	mulsu	r18, r17
      d6:	21 03       	mulsu	r18, r17
      d8:	21 03       	mulsu	r18, r17
      da:	21 03       	mulsu	r18, r17
      dc:	21 03       	mulsu	r18, r17
      de:	21 03       	mulsu	r18, r17
      e0:	21 03       	mulsu	r18, r17
      e2:	21 03       	mulsu	r18, r17
      e4:	21 03       	mulsu	r18, r17
      e6:	21 03       	mulsu	r18, r17
      e8:	21 03       	mulsu	r18, r17
      ea:	21 03       	mulsu	r18, r17
      ec:	21 03       	mulsu	r18, r17
      ee:	fe 01       	movw	r30, r28
      f0:	04 02       	muls	r16, r20
      f2:	27 02       	muls	r18, r23
      f4:	4a 02       	muls	r20, r26
      f6:	6d 02       	muls	r22, r29
      f8:	90 02       	muls	r25, r16
      fa:	b3 02       	muls	r27, r19
      fc:	d6 02       	muls	r29, r22
      fe:	fa 02       	muls	r31, r26
     100:	97 03       	fmuls	r17, r23
     102:	a3 03       	fmuls	r18, r19
     104:	bf 03       	fmulsu	r19, r23
     106:	db 03       	fmulsu	r21, r19
     108:	f7 03       	fmuls	r23, r23
     10a:	13 04       	cpc	r1, r3
     10c:	2f 04       	cpc	r2, r15
     10e:	49 04       	cpc	r4, r9
     110:	5c 04       	cpc	r5, r12
     112:	87 04       	cpc	r8, r7
     114:	ce 05       	cpc	r28, r14
     116:	d2 05       	cpc	r29, r2
     118:	de 05       	cpc	r29, r14
     11a:	f9 05       	cpc	r31, r9
     11c:	27 06       	cpc	r2, r23
     11e:	41 06       	cpc	r4, r17
     120:	57 06       	cpc	r5, r23
     122:	85 06       	cpc	r8, r21

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d0 e4       	ldi	r29, 0x40	; 64
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	1f e0       	ldi	r17, 0x0F	; 15
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	e4 e6       	ldi	r30, 0x64	; 100
     138:	f3 e1       	ldi	r31, 0x13	; 19
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0b bf       	out	0x3b, r16	; 59
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
     140:	07 90       	elpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	a4 3a       	cpi	r26, 0xA4	; 164
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>

0000014a <__do_clear_bss>:
     14a:	2f e0       	ldi	r18, 0x0F	; 15
     14c:	a4 ea       	ldi	r26, 0xA4	; 164
     14e:	bf e0       	ldi	r27, 0x0F	; 15
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	aa 3e       	cpi	r26, 0xEA	; 234
     156:	b2 07       	cpc	r27, r18
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	e0 d6       	rcall	.+3520   	; 0xf1c <main>
     15c:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <_exit>

00000160 <__bad_interrupt>:
     160:	4f cf       	rjmp	.-354    	; 0x0 <__vectors>

00000162 <delay_ms>:
	set_PWM(0);
}

void PWM_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
     162:	18 16       	cp	r1, r24
     164:	19 06       	cpc	r1, r25
     166:	5c f0       	brlt	.+22     	; 0x17e <delay_ms+0x1c>
     168:	08 95       	ret
     16a:	00 00       	nop
     16c:	21 50       	subi	r18, 0x01	; 1
     16e:	31 09       	sbc	r19, r1
     170:	e1 f7       	brne	.-8      	; 0x16a <delay_ms+0x8>
     172:	4f 5f       	subi	r20, 0xFF	; 255
     174:	5f 4f       	sbci	r21, 0xFF	; 255
     176:	84 17       	cp	r24, r20
     178:	95 07       	cpc	r25, r21
     17a:	19 f4       	brne	.+6      	; 0x182 <delay_ms+0x20>
     17c:	08 95       	ret
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	27 e0       	ldi	r18, 0x07	; 7
     184:	33 e0       	ldi	r19, 0x03	; 3
     186:	f1 cf       	rjmp	.-30     	; 0x16a <delay_ms+0x8>

00000188 <LCD_WriteCommand>:
     188:	10 98       	cbi	0x02, 0	; 2
     18a:	8b b9       	out	0x0b, r24	; 11
     18c:	11 9a       	sbi	0x02, 1	; 2
     18e:	00 00       	nop
     190:	11 98       	cbi	0x02, 1	; 2
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	e5 cf       	rjmp	.-54     	; 0x162 <delay_ms>
     198:	08 95       	ret

0000019a <LCD_ClearScreen>:
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	f5 cf       	rjmp	.-22     	; 0x188 <LCD_WriteCommand>
     19e:	08 95       	ret

000001a0 <LCD_Cursor>:
     1a0:	81 31       	cpi	r24, 0x11	; 17
     1a2:	18 f4       	brcc	.+6      	; 0x1aa <LCD_Cursor+0xa>
     1a4:	81 58       	subi	r24, 0x81	; 129
     1a6:	f0 cf       	rjmp	.-32     	; 0x188 <LCD_WriteCommand>
     1a8:	08 95       	ret
     1aa:	81 55       	subi	r24, 0x51	; 81
     1ac:	ed cf       	rjmp	.-38     	; 0x188 <LCD_WriteCommand>
     1ae:	08 95       	ret

000001b0 <LCD_init>:
     1b0:	84 e6       	ldi	r24, 0x64	; 100
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	d6 df       	rcall	.-84     	; 0x162 <delay_ms>
     1b6:	88 e3       	ldi	r24, 0x38	; 56
     1b8:	e7 df       	rcall	.-50     	; 0x188 <LCD_WriteCommand>
     1ba:	86 e0       	ldi	r24, 0x06	; 6
     1bc:	e5 df       	rcall	.-54     	; 0x188 <LCD_WriteCommand>
     1be:	8f e0       	ldi	r24, 0x0F	; 15
     1c0:	e3 df       	rcall	.-58     	; 0x188 <LCD_WriteCommand>
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	e1 df       	rcall	.-62     	; 0x188 <LCD_WriteCommand>
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	cb cf       	rjmp	.-106    	; 0x162 <delay_ms>
     1cc:	08 95       	ret

000001ce <LCD_WriteData>:
     1ce:	10 9a       	sbi	0x02, 0	; 2
     1d0:	8b b9       	out	0x0b, r24	; 11
     1d2:	11 9a       	sbi	0x02, 1	; 2
     1d4:	00 00       	nop
     1d6:	11 98       	cbi	0x02, 1	; 2
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	c2 cf       	rjmp	.-124    	; 0x162 <delay_ms>
     1de:	08 95       	ret

000001e0 <LCD_DisplayString>:
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	18 2f       	mov	r17, r24
     1ea:	eb 01       	movw	r28, r22
     1ec:	d6 df       	rcall	.-84     	; 0x19a <LCD_ClearScreen>
     1ee:	88 81       	ld	r24, Y
     1f0:	88 23       	and	r24, r24
     1f2:	51 f0       	breq	.+20     	; 0x208 <LCD_DisplayString+0x28>
     1f4:	01 e0       	ldi	r16, 0x01	; 1
     1f6:	01 0f       	add	r16, r17
     1f8:	81 2f       	mov	r24, r17
     1fa:	d2 df       	rcall	.-92     	; 0x1a0 <LCD_Cursor>
     1fc:	89 91       	ld	r24, Y+
     1fe:	e7 df       	rcall	.-50     	; 0x1ce <LCD_WriteData>
     200:	10 2f       	mov	r17, r16
     202:	88 81       	ld	r24, Y
     204:	81 11       	cpse	r24, r1
     206:	f6 cf       	rjmp	.-20     	; 0x1f4 <LCD_DisplayString+0x14>
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	08 95       	ret

00000212 <TimerSet>:
     212:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <_avr_timer_M>
     216:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <_avr_timer_M+0x1>
     21a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_avr_timer_M+0x2>
     21e:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_avr_timer_M+0x3>
     222:	60 93 e0 0f 	sts	0x0FE0, r22	; 0x800fe0 <_avr_timer_cntcurr>
     226:	70 93 e1 0f 	sts	0x0FE1, r23	; 0x800fe1 <_avr_timer_cntcurr+0x1>
     22a:	80 93 e2 0f 	sts	0x0FE2, r24	; 0x800fe2 <_avr_timer_cntcurr+0x2>
     22e:	90 93 e3 0f 	sts	0x0FE3, r25	; 0x800fe3 <_avr_timer_cntcurr+0x3>
     232:	08 95       	ret

00000234 <TimerOn>:
     234:	8b e0       	ldi	r24, 0x0B	; 11
     236:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     23a:	8d e7       	ldi	r24, 0x7D	; 125
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     242:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     24c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     250:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     254:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_avr_timer_M>
     258:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_avr_timer_M+0x1>
     25c:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <_avr_timer_M+0x2>
     260:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <_avr_timer_M+0x3>
     264:	80 93 e0 0f 	sts	0x0FE0, r24	; 0x800fe0 <_avr_timer_cntcurr>
     268:	90 93 e1 0f 	sts	0x0FE1, r25	; 0x800fe1 <_avr_timer_cntcurr+0x1>
     26c:	a0 93 e2 0f 	sts	0x0FE2, r26	; 0x800fe2 <_avr_timer_cntcurr+0x2>
     270:	b0 93 e3 0f 	sts	0x0FE3, r27	; 0x800fe3 <_avr_timer_cntcurr+0x3>
     274:	8f b7       	in	r24, 0x3f	; 63
     276:	80 68       	ori	r24, 0x80	; 128
     278:	8f bf       	out	0x3f, r24	; 63
     27a:	08 95       	ret

0000027c <__vector_13>:
     27c:	1f 92       	push	r1
     27e:	0f 92       	push	r0
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
     286:	8f 93       	push	r24
     288:	9f 93       	push	r25
     28a:	af 93       	push	r26
     28c:	bf 93       	push	r27
     28e:	80 91 e0 0f 	lds	r24, 0x0FE0	; 0x800fe0 <_avr_timer_cntcurr>
     292:	90 91 e1 0f 	lds	r25, 0x0FE1	; 0x800fe1 <_avr_timer_cntcurr+0x1>
     296:	a0 91 e2 0f 	lds	r26, 0x0FE2	; 0x800fe2 <_avr_timer_cntcurr+0x2>
     29a:	b0 91 e3 0f 	lds	r27, 0x0FE3	; 0x800fe3 <_avr_timer_cntcurr+0x3>
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	a1 09       	sbc	r26, r1
     2a2:	b1 09       	sbc	r27, r1
     2a4:	80 93 e0 0f 	sts	0x0FE0, r24	; 0x800fe0 <_avr_timer_cntcurr>
     2a8:	90 93 e1 0f 	sts	0x0FE1, r25	; 0x800fe1 <_avr_timer_cntcurr+0x1>
     2ac:	a0 93 e2 0f 	sts	0x0FE2, r26	; 0x800fe2 <_avr_timer_cntcurr+0x2>
     2b0:	b0 93 e3 0f 	sts	0x0FE3, r27	; 0x800fe3 <_avr_timer_cntcurr+0x3>
     2b4:	89 2b       	or	r24, r25
     2b6:	8a 2b       	or	r24, r26
     2b8:	8b 2b       	or	r24, r27
     2ba:	99 f4       	brne	.+38     	; 0x2e2 <__vector_13+0x66>
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	80 93 e4 0f 	sts	0x0FE4, r24	; 0x800fe4 <TimerFlag>
     2c2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_avr_timer_M>
     2c6:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_avr_timer_M+0x1>
     2ca:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <_avr_timer_M+0x2>
     2ce:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <_avr_timer_M+0x3>
     2d2:	80 93 e0 0f 	sts	0x0FE0, r24	; 0x800fe0 <_avr_timer_cntcurr>
     2d6:	90 93 e1 0f 	sts	0x0FE1, r25	; 0x800fe1 <_avr_timer_cntcurr+0x1>
     2da:	a0 93 e2 0f 	sts	0x0FE2, r26	; 0x800fe2 <_avr_timer_cntcurr+0x2>
     2de:	b0 93 e3 0f 	sts	0x0FE3, r27	; 0x800fe3 <_avr_timer_cntcurr+0x3>
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <GetKeypadKey>:
     2f4:	8f ee       	ldi	r24, 0xEF	; 239
     2f6:	88 b9       	out	0x08, r24	; 8
     2f8:	00 00       	nop
     2fa:	30 9b       	sbis	0x06, 0	; 6
     2fc:	2e c0       	rjmp	.+92     	; 0x35a <GetKeypadKey+0x66>
     2fe:	31 9b       	sbis	0x06, 1	; 6
     300:	2e c0       	rjmp	.+92     	; 0x35e <GetKeypadKey+0x6a>
     302:	32 9b       	sbis	0x06, 2	; 6
     304:	2e c0       	rjmp	.+92     	; 0x362 <GetKeypadKey+0x6e>
     306:	33 9b       	sbis	0x06, 3	; 6
     308:	2e c0       	rjmp	.+92     	; 0x366 <GetKeypadKey+0x72>
     30a:	8f ed       	ldi	r24, 0xDF	; 223
     30c:	88 b9       	out	0x08, r24	; 8
     30e:	00 00       	nop
     310:	30 9b       	sbis	0x06, 0	; 6
     312:	2b c0       	rjmp	.+86     	; 0x36a <GetKeypadKey+0x76>
     314:	31 9b       	sbis	0x06, 1	; 6
     316:	2b c0       	rjmp	.+86     	; 0x36e <GetKeypadKey+0x7a>
     318:	32 9b       	sbis	0x06, 2	; 6
     31a:	2b c0       	rjmp	.+86     	; 0x372 <GetKeypadKey+0x7e>
     31c:	33 9b       	sbis	0x06, 3	; 6
     31e:	2b c0       	rjmp	.+86     	; 0x376 <GetKeypadKey+0x82>
     320:	8f eb       	ldi	r24, 0xBF	; 191
     322:	88 b9       	out	0x08, r24	; 8
     324:	00 00       	nop
     326:	30 9b       	sbis	0x06, 0	; 6
     328:	28 c0       	rjmp	.+80     	; 0x37a <GetKeypadKey+0x86>
     32a:	31 9b       	sbis	0x06, 1	; 6
     32c:	28 c0       	rjmp	.+80     	; 0x37e <GetKeypadKey+0x8a>
     32e:	32 9b       	sbis	0x06, 2	; 6
     330:	28 c0       	rjmp	.+80     	; 0x382 <GetKeypadKey+0x8e>
     332:	33 9b       	sbis	0x06, 3	; 6
     334:	28 c0       	rjmp	.+80     	; 0x386 <GetKeypadKey+0x92>
     336:	8f e7       	ldi	r24, 0x7F	; 127
     338:	88 b9       	out	0x08, r24	; 8
     33a:	00 00       	nop
     33c:	30 9b       	sbis	0x06, 0	; 6
     33e:	25 c0       	rjmp	.+74     	; 0x38a <GetKeypadKey+0x96>
     340:	31 9b       	sbis	0x06, 1	; 6
     342:	25 c0       	rjmp	.+74     	; 0x38e <GetKeypadKey+0x9a>
     344:	32 9b       	sbis	0x06, 2	; 6
     346:	25 c0       	rjmp	.+74     	; 0x392 <GetKeypadKey+0x9e>
     348:	33 9b       	sbis	0x06, 3	; 6
     34a:	25 c0       	rjmp	.+74     	; 0x396 <GetKeypadKey+0xa2>
     34c:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <click>
     350:	8f 5f       	subi	r24, 0xFF	; 255
     352:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <click>
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	08 95       	ret
     35a:	81 e3       	ldi	r24, 0x31	; 49
     35c:	08 95       	ret
     35e:	84 e3       	ldi	r24, 0x34	; 52
     360:	08 95       	ret
     362:	87 e3       	ldi	r24, 0x37	; 55
     364:	08 95       	ret
     366:	8a e2       	ldi	r24, 0x2A	; 42
     368:	08 95       	ret
     36a:	82 e3       	ldi	r24, 0x32	; 50
     36c:	08 95       	ret
     36e:	85 e3       	ldi	r24, 0x35	; 53
     370:	08 95       	ret
     372:	88 e3       	ldi	r24, 0x38	; 56
     374:	08 95       	ret
     376:	80 e3       	ldi	r24, 0x30	; 48
     378:	08 95       	ret
     37a:	83 e3       	ldi	r24, 0x33	; 51
     37c:	08 95       	ret
     37e:	86 e3       	ldi	r24, 0x36	; 54
     380:	08 95       	ret
     382:	89 e3       	ldi	r24, 0x39	; 57
     384:	08 95       	ret
     386:	83 e2       	ldi	r24, 0x23	; 35
     388:	08 95       	ret
     38a:	81 e4       	ldi	r24, 0x41	; 65
     38c:	08 95       	ret
     38e:	82 e4       	ldi	r24, 0x42	; 66
     390:	08 95       	ret
     392:	83 e4       	ldi	r24, 0x43	; 67
     394:	08 95       	ret
     396:	84 e4       	ldi	r24, 0x44	; 68
     398:	08 95       	ret

0000039a <KeypadTick>:
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	91 05       	cpc	r25, r1
     3a4:	c9 f0       	breq	.+50     	; 0x3d8 <KeypadTick+0x3e>
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	91 05       	cpc	r25, r1
     3aa:	31 f0       	breq	.+12     	; 0x3b8 <KeypadTick+0x1e>
     3ac:	89 2b       	or	r24, r25
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <KeypadTick+0x1e>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	80 93 e7 0f 	sts	0x0FE7, r24	; 0x800fe7 <State>
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <KeypadTick+0x22>
     3b8:	c1 e0       	ldi	r28, 0x01	; 1
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
     3bc:	c1 30       	cpi	r28, 0x01	; 1
     3be:	d1 05       	cpc	r29, r1
     3c0:	39 f0       	breq	.+14     	; 0x3d0 <KeypadTick+0x36>
     3c2:	c2 30       	cpi	r28, 0x02	; 2
     3c4:	d1 05       	cpc	r29, r1
     3c6:	41 f0       	breq	.+16     	; 0x3d8 <KeypadTick+0x3e>
     3c8:	20 97       	sbiw	r28, 0x00	; 0
     3ca:	09 f4       	brne	.+2      	; 0x3ce <KeypadTick+0x34>
     3cc:	54 c1       	rjmp	.+680    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     3ce:	35 c1       	rjmp	.+618    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     3d0:	91 df       	rcall	.-222    	; 0x2f4 <GetKeypadKey>
     3d2:	80 93 e5 0f 	sts	0x0FE5, r24	; 0x800fe5 <x>
     3d6:	4f c1       	rjmp	.+670    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     3d8:	e0 91 e5 0f 	lds	r30, 0x0FE5	; 0x800fe5 <x>
     3dc:	8e 2f       	mov	r24, r30
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	8a 33       	cpi	r24, 0x3A	; 58
     3e2:	91 05       	cpc	r25, r1
     3e4:	08 f0       	brcs	.+2      	; 0x3e8 <KeypadTick+0x4e>
     3e6:	2d c1       	rjmp	.+602    	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     3e8:	fc 01       	movw	r30, r24
     3ea:	ea 5b       	subi	r30, 0xBA	; 186
     3ec:	ff 4f       	sbci	r31, 0xFF	; 255
     3ee:	af c7       	rjmp	.+3934   	; 0x134e <__tablejump2__>
     3f0:	80 e2       	ldi	r24, 0x20	; 32
     3f2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     3f6:	c2 e0       	ldi	r28, 0x02	; 2
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
     3fa:	3d c1       	rjmp	.+634    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     3fc:	80 e2       	ldi	r24, 0x20	; 32
     3fe:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     402:	c2 e0       	ldi	r28, 0x02	; 2
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	37 c1       	rjmp	.+622    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     408:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <click>
     40c:	8b ea       	ldi	r24, 0xAB	; 171
     40e:	98 9f       	mul	r25, r24
     410:	81 2d       	mov	r24, r1
     412:	11 24       	eor	r1, r1
     414:	86 95       	lsr	r24
     416:	28 2f       	mov	r18, r24
     418:	22 0f       	add	r18, r18
     41a:	82 0f       	add	r24, r18
     41c:	98 1b       	sub	r25, r24
     41e:	91 30       	cpi	r25, 0x01	; 1
     420:	31 f4       	brne	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     422:	81 e4       	ldi	r24, 0x41	; 65
     424:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     428:	c2 e0       	ldi	r28, 0x02	; 2
     42a:	d0 e0       	ldi	r29, 0x00	; 0
     42c:	24 c1       	rjmp	.+584    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     42e:	92 30       	cpi	r25, 0x02	; 2
     430:	31 f4       	brne	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     432:	82 e4       	ldi	r24, 0x42	; 66
     434:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     438:	c2 e0       	ldi	r28, 0x02	; 2
     43a:	d0 e0       	ldi	r29, 0x00	; 0
     43c:	1c c1       	rjmp	.+568    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     43e:	91 11       	cpse	r25, r1
     440:	03 c1       	rjmp	.+518    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     442:	83 e4       	ldi	r24, 0x43	; 67
     444:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     448:	c2 e0       	ldi	r28, 0x02	; 2
     44a:	d0 e0       	ldi	r29, 0x00	; 0
     44c:	14 c1       	rjmp	.+552    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     44e:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <click>
     452:	8b ea       	ldi	r24, 0xAB	; 171
     454:	98 9f       	mul	r25, r24
     456:	81 2d       	mov	r24, r1
     458:	11 24       	eor	r1, r1
     45a:	86 95       	lsr	r24
     45c:	28 2f       	mov	r18, r24
     45e:	22 0f       	add	r18, r18
     460:	82 0f       	add	r24, r18
     462:	98 1b       	sub	r25, r24
     464:	91 30       	cpi	r25, 0x01	; 1
     466:	31 f4       	brne	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     468:	84 e4       	ldi	r24, 0x44	; 68
     46a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     46e:	c2 e0       	ldi	r28, 0x02	; 2
     470:	d0 e0       	ldi	r29, 0x00	; 0
     472:	01 c1       	rjmp	.+514    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     474:	92 30       	cpi	r25, 0x02	; 2
     476:	31 f4       	brne	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     478:	85 e4       	ldi	r24, 0x45	; 69
     47a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     47e:	c2 e0       	ldi	r28, 0x02	; 2
     480:	d0 e0       	ldi	r29, 0x00	; 0
     482:	f9 c0       	rjmp	.+498    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     484:	91 11       	cpse	r25, r1
     486:	e3 c0       	rjmp	.+454    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     488:	86 e4       	ldi	r24, 0x46	; 70
     48a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     48e:	c2 e0       	ldi	r28, 0x02	; 2
     490:	d0 e0       	ldi	r29, 0x00	; 0
     492:	f1 c0       	rjmp	.+482    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     494:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <click>
     498:	8b ea       	ldi	r24, 0xAB	; 171
     49a:	98 9f       	mul	r25, r24
     49c:	81 2d       	mov	r24, r1
     49e:	11 24       	eor	r1, r1
     4a0:	86 95       	lsr	r24
     4a2:	28 2f       	mov	r18, r24
     4a4:	22 0f       	add	r18, r18
     4a6:	82 0f       	add	r24, r18
     4a8:	98 1b       	sub	r25, r24
     4aa:	91 30       	cpi	r25, 0x01	; 1
     4ac:	31 f4       	brne	.+12     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4ae:	87 e4       	ldi	r24, 0x47	; 71
     4b0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     4b4:	c2 e0       	ldi	r28, 0x02	; 2
     4b6:	d0 e0       	ldi	r29, 0x00	; 0
     4b8:	de c0       	rjmp	.+444    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     4ba:	92 30       	cpi	r25, 0x02	; 2
     4bc:	31 f4       	brne	.+12     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4be:	88 e4       	ldi	r24, 0x48	; 72
     4c0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     4c4:	c2 e0       	ldi	r28, 0x02	; 2
     4c6:	d0 e0       	ldi	r29, 0x00	; 0
     4c8:	d6 c0       	rjmp	.+428    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     4ca:	91 11       	cpse	r25, r1
     4cc:	c3 c0       	rjmp	.+390    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     4ce:	89 e4       	ldi	r24, 0x49	; 73
     4d0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     4d4:	c2 e0       	ldi	r28, 0x02	; 2
     4d6:	d0 e0       	ldi	r29, 0x00	; 0
     4d8:	ce c0       	rjmp	.+412    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     4da:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <click>
     4de:	8b ea       	ldi	r24, 0xAB	; 171
     4e0:	98 9f       	mul	r25, r24
     4e2:	81 2d       	mov	r24, r1
     4e4:	11 24       	eor	r1, r1
     4e6:	86 95       	lsr	r24
     4e8:	28 2f       	mov	r18, r24
     4ea:	22 0f       	add	r18, r18
     4ec:	82 0f       	add	r24, r18
     4ee:	98 1b       	sub	r25, r24
     4f0:	91 30       	cpi	r25, 0x01	; 1
     4f2:	31 f4       	brne	.+12     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4f4:	8a e4       	ldi	r24, 0x4A	; 74
     4f6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     4fa:	c2 e0       	ldi	r28, 0x02	; 2
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
     4fe:	bb c0       	rjmp	.+374    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     500:	92 30       	cpi	r25, 0x02	; 2
     502:	31 f4       	brne	.+12     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     504:	8b e4       	ldi	r24, 0x4B	; 75
     506:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     50a:	c2 e0       	ldi	r28, 0x02	; 2
     50c:	d0 e0       	ldi	r29, 0x00	; 0
     50e:	b3 c0       	rjmp	.+358    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     510:	91 11       	cpse	r25, r1
     512:	a3 c0       	rjmp	.+326    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     514:	8c e4       	ldi	r24, 0x4C	; 76
     516:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     51a:	c2 e0       	ldi	r28, 0x02	; 2
     51c:	d0 e0       	ldi	r29, 0x00	; 0
     51e:	ab c0       	rjmp	.+342    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     520:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <click>
     524:	8b ea       	ldi	r24, 0xAB	; 171
     526:	98 9f       	mul	r25, r24
     528:	81 2d       	mov	r24, r1
     52a:	11 24       	eor	r1, r1
     52c:	86 95       	lsr	r24
     52e:	28 2f       	mov	r18, r24
     530:	22 0f       	add	r18, r18
     532:	82 0f       	add	r24, r18
     534:	98 1b       	sub	r25, r24
     536:	91 30       	cpi	r25, 0x01	; 1
     538:	31 f4       	brne	.+12     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     53a:	8d e4       	ldi	r24, 0x4D	; 77
     53c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     540:	c2 e0       	ldi	r28, 0x02	; 2
     542:	d0 e0       	ldi	r29, 0x00	; 0
     544:	98 c0       	rjmp	.+304    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     546:	92 30       	cpi	r25, 0x02	; 2
     548:	31 f4       	brne	.+12     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     54a:	8e e4       	ldi	r24, 0x4E	; 78
     54c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     550:	c2 e0       	ldi	r28, 0x02	; 2
     552:	d0 e0       	ldi	r29, 0x00	; 0
     554:	90 c0       	rjmp	.+288    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     556:	91 11       	cpse	r25, r1
     558:	83 c0       	rjmp	.+262    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
     55a:	8f e4       	ldi	r24, 0x4F	; 79
     55c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     560:	c2 e0       	ldi	r28, 0x02	; 2
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	88 c0       	rjmp	.+272    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     566:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <click>
     56a:	83 70       	andi	r24, 0x03	; 3
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	31 f4       	brne	.+12     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     570:	80 e5       	ldi	r24, 0x50	; 80
     572:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     576:	c2 e0       	ldi	r28, 0x02	; 2
     578:	d0 e0       	ldi	r29, 0x00	; 0
     57a:	7d c0       	rjmp	.+250    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	31 f4       	brne	.+12     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     580:	81 e5       	ldi	r24, 0x51	; 81
     582:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     586:	c2 e0       	ldi	r28, 0x02	; 2
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	75 c0       	rjmp	.+234    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     58c:	83 30       	cpi	r24, 0x03	; 3
     58e:	31 f4       	brne	.+12     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     590:	82 e5       	ldi	r24, 0x52	; 82
     592:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     596:	c2 e0       	ldi	r28, 0x02	; 2
     598:	d0 e0       	ldi	r29, 0x00	; 0
     59a:	6d c0       	rjmp	.+218    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     59c:	81 11       	cpse	r24, r1
     59e:	63 c0       	rjmp	.+198    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     5a0:	83 e5       	ldi	r24, 0x53	; 83
     5a2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5a6:	c2 e0       	ldi	r28, 0x02	; 2
     5a8:	d0 e0       	ldi	r29, 0x00	; 0
     5aa:	65 c0       	rjmp	.+202    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     5ac:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <click>
     5b0:	8b ea       	ldi	r24, 0xAB	; 171
     5b2:	98 9f       	mul	r25, r24
     5b4:	81 2d       	mov	r24, r1
     5b6:	11 24       	eor	r1, r1
     5b8:	86 95       	lsr	r24
     5ba:	28 2f       	mov	r18, r24
     5bc:	22 0f       	add	r18, r18
     5be:	82 0f       	add	r24, r18
     5c0:	98 1b       	sub	r25, r24
     5c2:	91 30       	cpi	r25, 0x01	; 1
     5c4:	31 f4       	brne	.+12     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5c6:	84 e5       	ldi	r24, 0x54	; 84
     5c8:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5cc:	c2 e0       	ldi	r28, 0x02	; 2
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
     5d0:	52 c0       	rjmp	.+164    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     5d2:	92 30       	cpi	r25, 0x02	; 2
     5d4:	31 f4       	brne	.+12     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5d6:	85 e5       	ldi	r24, 0x55	; 85
     5d8:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5dc:	c2 e0       	ldi	r28, 0x02	; 2
     5de:	d0 e0       	ldi	r29, 0x00	; 0
     5e0:	4a c0       	rjmp	.+148    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     5e2:	93 30       	cpi	r25, 0x03	; 3
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5e6:	42 c0       	rjmp	.+132    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     5e8:	86 e5       	ldi	r24, 0x56	; 86
     5ea:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5ee:	c2 e0       	ldi	r28, 0x02	; 2
     5f0:	d0 e0       	ldi	r29, 0x00	; 0
     5f2:	41 c0       	rjmp	.+130    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     5f4:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <click>
     5f8:	83 70       	andi	r24, 0x03	; 3
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	31 f4       	brne	.+12     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     5fe:	87 e5       	ldi	r24, 0x57	; 87
     600:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     604:	c2 e0       	ldi	r28, 0x02	; 2
     606:	d0 e0       	ldi	r29, 0x00	; 0
     608:	36 c0       	rjmp	.+108    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     60a:	82 30       	cpi	r24, 0x02	; 2
     60c:	31 f4       	brne	.+12     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     60e:	88 e5       	ldi	r24, 0x58	; 88
     610:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     614:	c2 e0       	ldi	r28, 0x02	; 2
     616:	d0 e0       	ldi	r29, 0x00	; 0
     618:	2e c0       	rjmp	.+92     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     61a:	83 30       	cpi	r24, 0x03	; 3
     61c:	31 f4       	brne	.+12     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     61e:	89 e5       	ldi	r24, 0x59	; 89
     620:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     624:	c2 e0       	ldi	r28, 0x02	; 2
     626:	d0 e0       	ldi	r29, 0x00	; 0
     628:	26 c0       	rjmp	.+76     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     62a:	81 11       	cpse	r24, r1
     62c:	22 c0       	rjmp	.+68     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     62e:	8a e5       	ldi	r24, 0x5A	; 90
     630:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     634:	c2 e0       	ldi	r28, 0x02	; 2
     636:	d0 e0       	ldi	r29, 0x00	; 0
     638:	1e c0       	rjmp	.+60     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 e7 0f 	sts	0x0FE7, r24	; 0x800fe7 <State>
     640:	1a c0       	rjmp	.+52     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     642:	c2 e0       	ldi	r28, 0x02	; 2
     644:	d0 e0       	ldi	r29, 0x00	; 0
     646:	17 c0       	rjmp	.+46     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     648:	c2 e0       	ldi	r28, 0x02	; 2
     64a:	d0 e0       	ldi	r29, 0x00	; 0
     64c:	14 c0       	rjmp	.+40     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     64e:	c2 e0       	ldi	r28, 0x02	; 2
     650:	d0 e0       	ldi	r29, 0x00	; 0
     652:	11 c0       	rjmp	.+34     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     654:	c2 e0       	ldi	r28, 0x02	; 2
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	0e c0       	rjmp	.+28     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     65a:	c2 e0       	ldi	r28, 0x02	; 2
     65c:	d0 e0       	ldi	r29, 0x00	; 0
     65e:	0b c0       	rjmp	.+22     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     660:	c2 e0       	ldi	r28, 0x02	; 2
     662:	d0 e0       	ldi	r29, 0x00	; 0
     664:	08 c0       	rjmp	.+16     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     666:	c2 e0       	ldi	r28, 0x02	; 2
     668:	d0 e0       	ldi	r29, 0x00	; 0
     66a:	05 c0       	rjmp	.+10     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     66c:	c2 e0       	ldi	r28, 0x02	; 2
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     672:	c2 e0       	ldi	r28, 0x02	; 2
     674:	d0 e0       	ldi	r29, 0x00	; 0
     676:	ce 01       	movw	r24, r28
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <N5110_Cmnd>:
     67e:	cf 93       	push	r28
     680:	c8 2f       	mov	r28, r24
     682:	29 98       	cbi	0x05, 1	; 5
     684:	da d4       	rcall	.+2484   	; 0x103a <SPI_SS_Enable>
     686:	8c 2f       	mov	r24, r28
     688:	e4 d4       	rcall	.+2504   	; 0x1052 <SPI_Write>
     68a:	29 9a       	sbi	0x05, 1	; 5
     68c:	d8 d4       	rcall	.+2480   	; 0x103e <SPI_SS_Disable>
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <N5110_Reset>:
     692:	28 98       	cbi	0x05, 0	; 5
     694:	2f ef       	ldi	r18, 0xFF	; 255
     696:	80 e7       	ldi	r24, 0x70	; 112
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	21 50       	subi	r18, 0x01	; 1
     69c:	80 40       	sbci	r24, 0x00	; 0
     69e:	90 40       	sbci	r25, 0x00	; 0
     6a0:	e1 f7       	brne	.-8      	; 0x69a <N5110_Reset+0x8>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <N5110_Reset+0x12>
     6a4:	00 00       	nop
     6a6:	28 9a       	sbi	0x05, 0	; 5
     6a8:	08 95       	ret

000006aa <N5110_init>:
     6aa:	f3 df       	rcall	.-26     	; 0x692 <N5110_Reset>
     6ac:	81 e2       	ldi	r24, 0x21	; 33
     6ae:	e7 df       	rcall	.-50     	; 0x67e <N5110_Cmnd>
     6b0:	80 ec       	ldi	r24, 0xC0	; 192
     6b2:	e5 df       	rcall	.-54     	; 0x67e <N5110_Cmnd>
     6b4:	87 e0       	ldi	r24, 0x07	; 7
     6b6:	e3 df       	rcall	.-58     	; 0x67e <N5110_Cmnd>
     6b8:	83 e1       	ldi	r24, 0x13	; 19
     6ba:	e1 df       	rcall	.-62     	; 0x67e <N5110_Cmnd>
     6bc:	80 e2       	ldi	r24, 0x20	; 32
     6be:	df df       	rcall	.-66     	; 0x67e <N5110_Cmnd>
     6c0:	8c e0       	ldi	r24, 0x0C	; 12
     6c2:	dd cf       	rjmp	.-70     	; 0x67e <N5110_Cmnd>
     6c4:	08 95       	ret

000006c6 <lcd_setXY>:
     6c6:	cf 93       	push	r28
     6c8:	c6 2f       	mov	r28, r22
     6ca:	d9 df       	rcall	.-78     	; 0x67e <N5110_Cmnd>
     6cc:	8c 2f       	mov	r24, r28
     6ce:	d7 df       	rcall	.-82     	; 0x67e <N5110_Cmnd>
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <N5110_clear>:
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	b0 d4       	rcall	.+2400   	; 0x103a <SPI_SS_Enable>
     6da:	29 9a       	sbi	0x05, 1	; 5
     6dc:	c8 ef       	ldi	r28, 0xF8	; 248
     6de:	d1 e0       	ldi	r29, 0x01	; 1
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	b7 d4       	rcall	.+2414   	; 0x1052 <SPI_Write>
     6e4:	21 97       	sbiw	r28, 0x01	; 1
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <N5110_clear+0xc>
     6e8:	29 98       	cbi	0x05, 1	; 5
     6ea:	a9 d4       	rcall	.+2386   	; 0x103e <SPI_SS_Disable>
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <N5110_image>:
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	8c 01       	movw	r16, r24
     6fc:	9e d4       	rcall	.+2364   	; 0x103a <SPI_SS_Enable>
     6fe:	29 9a       	sbi	0x05, 1	; 5
     700:	e8 01       	movw	r28, r16
     702:	08 50       	subi	r16, 0x08	; 8
     704:	1e 4f       	sbci	r17, 0xFE	; 254
     706:	89 91       	ld	r24, Y+
     708:	a4 d4       	rcall	.+2376   	; 0x1052 <SPI_Write>
     70a:	c0 17       	cp	r28, r16
     70c:	d1 07       	cpc	r29, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <N5110_image+0x14>
     710:	29 98       	cbi	0x05, 1	; 5
     712:	95 d4       	rcall	.+2346   	; 0x103e <SPI_SS_Disable>
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <Nokia_Tick>:
     71e:	8a 30       	cpi	r24, 0x0A	; 10
     720:	91 05       	cpc	r25, r1
     722:	08 f0       	brcs	.+2      	; 0x726 <Nokia_Tick+0x8>
     724:	dd c0       	rjmp	.+442    	; 0x8e0 <Nokia_Tick+0x1c2>
     726:	fc 01       	movw	r30, r24
     728:	e0 58       	subi	r30, 0x80	; 128
     72a:	ff 4f       	sbci	r31, 0xFF	; 255
     72c:	10 c6       	rjmp	.+3104   	; 0x134e <__tablejump2__>
     72e:	89 d4       	rcall	.+2322   	; 0x1042 <SPI_Init>
     730:	bc df       	rcall	.-136    	; 0x6aa <N5110_init>
     732:	d0 df       	rcall	.-96     	; 0x6d4 <N5110_clear>
     734:	60 e8       	ldi	r22, 0x80	; 128
     736:	80 e4       	ldi	r24, 0x40	; 64
     738:	c6 df       	rcall	.-116    	; 0x6c6 <lcd_setXY>
     73a:	8b ed       	ldi	r24, 0xDB	; 219
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	d9 df       	rcall	.-78     	; 0x6f2 <N5110_image>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	08 95       	ret
     746:	20 91 dc 0f 	lds	r18, 0x0FDC	; 0x800fdc <NOKIAReset>
     74a:	22 23       	and	r18, r18
     74c:	49 f0       	breq	.+18     	; 0x760 <Nokia_Tick+0x42>
     74e:	82 2f       	mov	r24, r18
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
     756:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     75a:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <NOKIAReset>
     75e:	da c0       	rjmp	.+436    	; 0x914 <Nokia_Tick+0x1f6>
     760:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <strike>
     764:	21 30       	cpi	r18, 0x01	; 1
     766:	09 f0       	breq	.+2      	; 0x76a <Nokia_Tick+0x4c>
     768:	d8 c0       	rjmp	.+432    	; 0x91a <Nokia_Tick+0x1fc>
     76a:	b4 df       	rcall	.-152    	; 0x6d4 <N5110_clear>
     76c:	60 e8       	ldi	r22, 0x80	; 128
     76e:	80 e4       	ldi	r24, 0x40	; 64
     770:	aa df       	rcall	.-172    	; 0x6c6 <lcd_setXY>
     772:	8b ea       	ldi	r24, 0xAB	; 171
     774:	9d e0       	ldi	r25, 0x0D	; 13
     776:	bd df       	rcall	.-134    	; 0x6f2 <N5110_image>
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	08 95       	ret
     77e:	20 91 dc 0f 	lds	r18, 0x0FDC	; 0x800fdc <NOKIAReset>
     782:	22 23       	and	r18, r18
     784:	49 f0       	breq	.+18     	; 0x798 <Nokia_Tick+0x7a>
     786:	82 2f       	mov	r24, r18
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
     78e:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     792:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <NOKIAReset>
     796:	be c0       	rjmp	.+380    	; 0x914 <Nokia_Tick+0x1f6>
     798:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <strike>
     79c:	22 30       	cpi	r18, 0x02	; 2
     79e:	09 f0       	breq	.+2      	; 0x7a2 <Nokia_Tick+0x84>
     7a0:	bc c0       	rjmp	.+376    	; 0x91a <Nokia_Tick+0x1fc>
     7a2:	98 df       	rcall	.-208    	; 0x6d4 <N5110_clear>
     7a4:	60 e8       	ldi	r22, 0x80	; 128
     7a6:	80 e4       	ldi	r24, 0x40	; 64
     7a8:	8e df       	rcall	.-228    	; 0x6c6 <lcd_setXY>
     7aa:	83 eb       	ldi	r24, 0xB3	; 179
     7ac:	9b e0       	ldi	r25, 0x0B	; 11
     7ae:	a1 df       	rcall	.-190    	; 0x6f2 <N5110_image>
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	08 95       	ret
     7b6:	20 91 dc 0f 	lds	r18, 0x0FDC	; 0x800fdc <NOKIAReset>
     7ba:	22 23       	and	r18, r18
     7bc:	49 f0       	breq	.+18     	; 0x7d0 <Nokia_Tick+0xb2>
     7be:	82 2f       	mov	r24, r18
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
     7c6:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     7ca:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <NOKIAReset>
     7ce:	a2 c0       	rjmp	.+324    	; 0x914 <Nokia_Tick+0x1f6>
     7d0:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <strike>
     7d4:	23 30       	cpi	r18, 0x03	; 3
     7d6:	09 f0       	breq	.+2      	; 0x7da <Nokia_Tick+0xbc>
     7d8:	a0 c0       	rjmp	.+320    	; 0x91a <Nokia_Tick+0x1fc>
     7da:	7c df       	rcall	.-264    	; 0x6d4 <N5110_clear>
     7dc:	60 e8       	ldi	r22, 0x80	; 128
     7de:	80 e4       	ldi	r24, 0x40	; 64
     7e0:	72 df       	rcall	.-284    	; 0x6c6 <lcd_setXY>
     7e2:	8b eb       	ldi	r24, 0xBB	; 187
     7e4:	99 e0       	ldi	r25, 0x09	; 9
     7e6:	85 df       	rcall	.-246    	; 0x6f2 <N5110_image>
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	08 95       	ret
     7ee:	20 91 dc 0f 	lds	r18, 0x0FDC	; 0x800fdc <NOKIAReset>
     7f2:	22 23       	and	r18, r18
     7f4:	49 f0       	breq	.+18     	; 0x808 <Nokia_Tick+0xea>
     7f6:	82 2f       	mov	r24, r18
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
     7fe:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     802:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <NOKIAReset>
     806:	86 c0       	rjmp	.+268    	; 0x914 <Nokia_Tick+0x1f6>
     808:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <strike>
     80c:	24 30       	cpi	r18, 0x04	; 4
     80e:	09 f0       	breq	.+2      	; 0x812 <Nokia_Tick+0xf4>
     810:	84 c0       	rjmp	.+264    	; 0x91a <Nokia_Tick+0x1fc>
     812:	60 df       	rcall	.-320    	; 0x6d4 <N5110_clear>
     814:	60 e8       	ldi	r22, 0x80	; 128
     816:	80 e4       	ldi	r24, 0x40	; 64
     818:	56 df       	rcall	.-340    	; 0x6c6 <lcd_setXY>
     81a:	83 ec       	ldi	r24, 0xC3	; 195
     81c:	97 e0       	ldi	r25, 0x07	; 7
     81e:	69 df       	rcall	.-302    	; 0x6f2 <N5110_image>
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	08 95       	ret
     826:	20 91 dc 0f 	lds	r18, 0x0FDC	; 0x800fdc <NOKIAReset>
     82a:	22 23       	and	r18, r18
     82c:	49 f0       	breq	.+18     	; 0x840 <Nokia_Tick+0x122>
     82e:	82 2f       	mov	r24, r18
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
     836:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     83a:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <NOKIAReset>
     83e:	6a c0       	rjmp	.+212    	; 0x914 <Nokia_Tick+0x1f6>
     840:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <strike>
     844:	25 30       	cpi	r18, 0x05	; 5
     846:	09 f0       	breq	.+2      	; 0x84a <Nokia_Tick+0x12c>
     848:	68 c0       	rjmp	.+208    	; 0x91a <Nokia_Tick+0x1fc>
     84a:	44 df       	rcall	.-376    	; 0x6d4 <N5110_clear>
     84c:	60 e8       	ldi	r22, 0x80	; 128
     84e:	80 e4       	ldi	r24, 0x40	; 64
     850:	3a df       	rcall	.-396    	; 0x6c6 <lcd_setXY>
     852:	8b ec       	ldi	r24, 0xCB	; 203
     854:	95 e0       	ldi	r25, 0x05	; 5
     856:	4d df       	rcall	.-358    	; 0x6f2 <N5110_image>
     858:	86 e0       	ldi	r24, 0x06	; 6
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	08 95       	ret
     85e:	20 91 dc 0f 	lds	r18, 0x0FDC	; 0x800fdc <NOKIAReset>
     862:	22 23       	and	r18, r18
     864:	49 f0       	breq	.+18     	; 0x878 <Nokia_Tick+0x15a>
     866:	82 2f       	mov	r24, r18
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
     86e:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     872:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <NOKIAReset>
     876:	4e c0       	rjmp	.+156    	; 0x914 <Nokia_Tick+0x1f6>
     878:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <strike>
     87c:	26 30       	cpi	r18, 0x06	; 6
     87e:	09 f0       	breq	.+2      	; 0x882 <Nokia_Tick+0x164>
     880:	4c c0       	rjmp	.+152    	; 0x91a <Nokia_Tick+0x1fc>
     882:	28 df       	rcall	.-432    	; 0x6d4 <N5110_clear>
     884:	60 e8       	ldi	r22, 0x80	; 128
     886:	80 e4       	ldi	r24, 0x40	; 64
     888:	1e df       	rcall	.-452    	; 0x6c6 <lcd_setXY>
     88a:	83 ed       	ldi	r24, 0xD3	; 211
     88c:	93 e0       	ldi	r25, 0x03	; 3
     88e:	31 df       	rcall	.-414    	; 0x6f2 <N5110_image>
     890:	2a c0       	rjmp	.+84     	; 0x8e6 <Nokia_Tick+0x1c8>
     892:	80 91 dc 0f 	lds	r24, 0x0FDC	; 0x800fdc <NOKIAReset>
     896:	88 23       	and	r24, r24
     898:	41 f0       	breq	.+16     	; 0x8aa <Nokia_Tick+0x18c>
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
     8a0:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     8a4:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <NOKIAReset>
     8a8:	35 c0       	rjmp	.+106    	; 0x914 <Nokia_Tick+0x1f6>
     8aa:	80 91 dd 0f 	lds	r24, 0x0FDD	; 0x800fdd <counter>
     8ae:	85 31       	cpi	r24, 0x15	; 21
     8b0:	d0 f0       	brcs	.+52     	; 0x8e6 <Nokia_Tick+0x1c8>
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	08 95       	ret
     8b8:	20 91 dc 0f 	lds	r18, 0x0FDC	; 0x800fdc <NOKIAReset>
     8bc:	22 23       	and	r18, r18
     8be:	49 f0       	breq	.+18     	; 0x8d2 <Nokia_Tick+0x1b4>
     8c0:	82 2f       	mov	r24, r18
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
     8c8:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     8cc:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <NOKIAReset>
     8d0:	21 c0       	rjmp	.+66     	; 0x914 <Nokia_Tick+0x1f6>
     8d2:	20 91 dd 0f 	lds	r18, 0x0FDD	; 0x800fdd <counter>
     8d6:	25 31       	cpi	r18, 0x15	; 21
     8d8:	00 f1       	brcs	.+64     	; 0x91a <Nokia_Tick+0x1fc>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	08 95       	ret
     8e0:	87 30       	cpi	r24, 0x07	; 7
     8e2:	91 05       	cpc	r25, r1
     8e4:	d1 f4       	brne	.+52     	; 0x91a <Nokia_Tick+0x1fc>
     8e6:	80 91 dd 0f 	lds	r24, 0x0FDD	; 0x800fdd <counter>
     8ea:	80 fd       	sbrc	r24, 0
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <Nokia_Tick+0x1d4>
     8ee:	f2 de       	rcall	.-540    	; 0x6d4 <N5110_clear>
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <Nokia_Tick+0x1e0>
     8f2:	60 e8       	ldi	r22, 0x80	; 128
     8f4:	80 e4       	ldi	r24, 0x40	; 64
     8f6:	e7 de       	rcall	.-562    	; 0x6c6 <lcd_setXY>
     8f8:	83 ed       	ldi	r24, 0xD3	; 211
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	fa de       	rcall	.-524    	; 0x6f2 <N5110_image>
     8fe:	80 91 dd 0f 	lds	r24, 0x0FDD	; 0x800fdd <counter>
     902:	8f 5f       	subi	r24, 0xFF	; 255
     904:	80 93 dd 0f 	sts	0x0FDD, r24	; 0x800fdd <counter>
     908:	87 e0       	ldi	r24, 0x07	; 7
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	08 95       	ret
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	08 95       	ret
     914:	87 30       	cpi	r24, 0x07	; 7
     916:	91 05       	cpc	r25, r1
     918:	51 f3       	breq	.-44     	; 0x8ee <Nokia_Tick+0x1d0>
     91a:	08 95       	ret

0000091c <set_PWM>:
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	6b 01       	movw	r12, r22
     926:	7c 01       	movw	r14, r24
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	60 91 a4 0f 	lds	r22, 0x0FA4	; 0x800fa4 <__data_end>
     930:	70 91 a5 0f 	lds	r23, 0x0FA5	; 0x800fa5 <__data_end+0x1>
     934:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <__data_end+0x2>
     938:	90 91 a7 0f 	lds	r25, 0x0FA7	; 0x800fa7 <__data_end+0x3>
     93c:	8f d3       	rcall	.+1822   	; 0x105c <__cmpsf2>
     93e:	88 23       	and	r24, r24
     940:	09 f4       	brne	.+2      	; 0x944 <set_PWM+0x28>
     942:	40 c0       	rjmp	.+128    	; 0x9c4 <set_PWM+0xa8>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	86 d3       	rcall	.+1804   	; 0x105c <__cmpsf2>
     950:	81 11       	cpse	r24, r1
     952:	04 c0       	rjmp	.+8      	; 0x95c <set_PWM+0x40>
     954:	85 b5       	in	r24, 0x25	; 37
     956:	88 70       	andi	r24, 0x08	; 8
     958:	85 bd       	out	0x25, r24	; 37
     95a:	03 c0       	rjmp	.+6      	; 0x962 <set_PWM+0x46>
     95c:	85 b5       	in	r24, 0x25	; 37
     95e:	83 60       	ori	r24, 0x03	; 3
     960:	85 bd       	out	0x25, r24	; 37
     962:	28 e5       	ldi	r18, 0x58	; 88
     964:	39 e3       	ldi	r19, 0x39	; 57
     966:	44 e7       	ldi	r20, 0x74	; 116
     968:	5f e3       	ldi	r21, 0x3F	; 63
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	76 d3       	rcall	.+1772   	; 0x105c <__cmpsf2>
     970:	88 23       	and	r24, r24
     972:	1c f4       	brge	.+6      	; 0x97a <set_PWM+0x5e>
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	87 bd       	out	0x27, r24	; 39
     978:	1c c0       	rjmp	.+56     	; 0x9b2 <set_PWM+0x96>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	34 e2       	ldi	r19, 0x24	; 36
     97e:	44 ef       	ldi	r20, 0xF4	; 244
     980:	56 e4       	ldi	r21, 0x46	; 70
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	7c d4       	rcall	.+2296   	; 0x1280 <__gesf2>
     988:	18 16       	cp	r1, r24
     98a:	14 f4       	brge	.+4      	; 0x990 <set_PWM+0x74>
     98c:	17 bc       	out	0x27, r1	; 39
     98e:	11 c0       	rjmp	.+34     	; 0x9b2 <set_PWM+0x96>
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	53 e4       	ldi	r21, 0x43	; 67
     998:	c7 01       	movw	r24, r14
     99a:	b6 01       	movw	r22, r12
     99c:	75 d4       	rcall	.+2282   	; 0x1288 <__mulsf3>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	74 e2       	ldi	r23, 0x24	; 36
     9a6:	84 ef       	ldi	r24, 0xF4	; 244
     9a8:	9a e4       	ldi	r25, 0x4A	; 74
     9aa:	5c d3       	rcall	.+1720   	; 0x1064 <__divsf3>
     9ac:	c3 d3       	rcall	.+1926   	; 0x1134 <__fixsfsi>
     9ae:	61 50       	subi	r22, 0x01	; 1
     9b0:	67 bd       	out	0x27, r22	; 39
     9b2:	16 bc       	out	0x26, r1	; 38
     9b4:	c0 92 a4 0f 	sts	0x0FA4, r12	; 0x800fa4 <__data_end>
     9b8:	d0 92 a5 0f 	sts	0x0FA5, r13	; 0x800fa5 <__data_end+0x1>
     9bc:	e0 92 a6 0f 	sts	0x0FA6, r14	; 0x800fa6 <__data_end+0x2>
     9c0:	f0 92 a7 0f 	sts	0x0FA7, r15	; 0x800fa7 <__data_end+0x3>
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	08 95       	ret

000009ce <WA_Tick>:
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	91 05       	cpc	r25, r1
     9d2:	a9 f0       	breq	.+42     	; 0x9fe <WA_Tick+0x30>
     9d4:	1c f4       	brge	.+6      	; 0x9dc <WA_Tick+0xe>
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	41 f0       	breq	.+16     	; 0x9ea <WA_Tick+0x1c>
     9da:	27 c0       	rjmp	.+78     	; 0xa2a <WA_Tick+0x5c>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	91 05       	cpc	r25, r1
     9e0:	d9 f0       	breq	.+54     	; 0xa18 <WA_Tick+0x4a>
     9e2:	83 30       	cpi	r24, 0x03	; 3
     9e4:	91 05       	cpc	r25, r1
     9e6:	79 f1       	breq	.+94     	; 0xa46 <WA_Tick+0x78>
     9e8:	20 c0       	rjmp	.+64     	; 0xa2a <WA_Tick+0x5c>
     9ea:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <WAReset>
     9ee:	81 11       	cpse	r24, r1
     9f0:	49 c0       	rjmp	.+146    	; 0xa84 <WA_Tick+0xb6>
     9f2:	80 91 d8 0f 	lds	r24, 0x0FD8	; 0x800fd8 <wrong>
     9f6:	88 23       	and	r24, r24
     9f8:	31 f1       	breq	.+76     	; 0xa46 <WA_Tick+0x78>
     9fa:	12 9a       	sbi	0x02, 2	; 2
     9fc:	2d c0       	rjmp	.+90     	; 0xa58 <WA_Tick+0x8a>
     9fe:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <WAReset>
     a02:	81 11       	cpse	r24, r1
     a04:	3f c0       	rjmp	.+126    	; 0xa84 <WA_Tick+0xb6>
     a06:	80 91 da 0f 	lds	r24, 0x0FDA	; 0x800fda <WA_Count>
     a0a:	8f 31       	cpi	r24, 0x1F	; 31
     a0c:	28 f1       	brcs	.+74     	; 0xa58 <WA_Tick+0x8a>
     a0e:	10 92 da 0f 	sts	0x0FDA, r1	; 0x800fda <WA_Count>
     a12:	10 92 d8 0f 	sts	0x0FD8, r1	; 0x800fd8 <wrong>
     a16:	2e c0       	rjmp	.+92     	; 0xa74 <WA_Tick+0xa6>
     a18:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <WAReset>
     a1c:	81 11       	cpse	r24, r1
     a1e:	32 c0       	rjmp	.+100    	; 0xa84 <WA_Tick+0xb6>
     a20:	80 91 db 0f 	lds	r24, 0x0FDB	; 0x800fdb <letterFound>
     a24:	81 11       	cpse	r24, r1
     a26:	26 c0       	rjmp	.+76     	; 0xa74 <WA_Tick+0xa6>
     a28:	0e c0       	rjmp	.+28     	; 0xa46 <WA_Tick+0x78>
     a2a:	81 30       	cpi	r24, 0x01	; 1
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 f0       	breq	.+40     	; 0xa58 <WA_Tick+0x8a>
     a30:	1c f4       	brge	.+6      	; 0xa38 <WA_Tick+0x6a>
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	89 f5       	brne	.+98     	; 0xa98 <WA_Tick+0xca>
     a36:	07 c0       	rjmp	.+14     	; 0xa46 <WA_Tick+0x78>
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	91 05       	cpc	r25, r1
     a3c:	d9 f0       	breq	.+54     	; 0xa74 <WA_Tick+0xa6>
     a3e:	83 30       	cpi	r24, 0x03	; 3
     a40:	91 05       	cpc	r25, r1
     a42:	51 f5       	brne	.+84     	; 0xa98 <WA_Tick+0xca>
     a44:	1f c0       	rjmp	.+62     	; 0xa84 <WA_Tick+0xb6>
     a46:	10 92 da 0f 	sts	0x0FDA, r1	; 0x800fda <WA_Count>
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	cb 01       	movw	r24, r22
     a50:	65 df       	rcall	.-310    	; 0x91c <set_PWM>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	08 95       	ret
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 ed       	ldi	r23, 0xD0	; 208
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	94 e4       	ldi	r25, 0x44	; 68
     a60:	5d df       	rcall	.-326    	; 0x91c <set_PWM>
     a62:	80 91 da 0f 	lds	r24, 0x0FDA	; 0x800fda <WA_Count>
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 da 0f 	sts	0x0FDA, r24	; 0x800fda <WA_Count>
     a6c:	12 9a       	sbi	0x02, 2	; 2
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	08 95       	ret
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	cb 01       	movw	r24, r22
     a7a:	50 df       	rcall	.-352    	; 0x91c <set_PWM>
     a7c:	12 98       	cbi	0x02, 2	; 2
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	08 95       	ret
     a84:	10 92 db 0f 	sts	0x0FDB, r1	; 0x800fdb <letterFound>
     a88:	10 92 da 0f 	sts	0x0FDA, r1	; 0x800fda <WA_Count>
     a8c:	10 92 d9 0f 	sts	0x0FD9, r1	; 0x800fd9 <WAReset>
     a90:	10 92 d8 0f 	sts	0x0FD8, r1	; 0x800fd8 <wrong>
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	08 95       	ret

00000a9a <PWM_on>:
     a9a:	81 e4       	ldi	r24, 0x41	; 65
     a9c:	84 bd       	out	0x24, r24	; 36
     a9e:	8b e0       	ldi	r24, 0x0B	; 11
     aa0:	85 bd       	out	0x25, r24	; 37
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	cb 01       	movw	r24, r22
     aa8:	39 cf       	rjmp	.-398    	; 0x91c <set_PWM>
     aaa:	08 95       	ret

00000aac <LCDBuildChar>:
unsigned char win = 0;
unsigned char LCDReset = 0;


void LCDBuildChar(unsigned char loc, unsigned char *p)
{
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
	unsigned char i;
	if(loc<8) //If valid address
     ab4:	88 30       	cpi	r24, 0x08	; 8
     ab6:	70 f4       	brcc	.+28     	; 0xad4 <LCDBuildChar+0x28>
     ab8:	8b 01       	movw	r16, r22
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
     aba:	88 0f       	add	r24, r24
     abc:	88 0f       	add	r24, r24
     abe:	88 0f       	add	r24, r24
     ac0:	80 5c       	subi	r24, 0xC0	; 192
     ac2:	62 db       	rcall	.-2364   	; 0x188 <LCD_WriteCommand>
     ac4:	e8 01       	movw	r28, r16
     ac6:	08 5f       	subi	r16, 0xF8	; 248
     ac8:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
     aca:	89 91       	ld	r24, Y+
     acc:	80 db       	rcall	.-2304   	; 0x1ce <LCD_WriteData>
{
	unsigned char i;
	if(loc<8) //If valid address
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		for(i=0;i<8;i++)
     ace:	c0 17       	cp	r28, r16
     ad0:	d1 07       	cpc	r29, r17
     ad2:	d9 f7       	brne	.-10     	; 0xaca <LCDBuildChar+0x1e>
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	08 95       	ret

00000ade <CheckGuessed>:

void CheckGuessed(){

	letterFound = 0; //letter exists in word
     ade:	10 92 db 0f 	sts	0x0FDB, r1	; 0x800fdb <letterFound>
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     ae2:	20 91 d6 0f 	lds	r18, 0x0FD6	; 0x800fd6 <WTG_Index>
     ae6:	22 23       	and	r18, r18
     ae8:	e9 f0       	breq	.+58     	; 0xb24 <CheckGuessed+0x46>
		if(wordToGuess[b] == P2Guess){
     aea:	90 91 e8 0f 	lds	r25, 0x0FE8	; 0x800fe8 <P2Guess>
     aee:	ec e5       	ldi	r30, 0x5C	; 92
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b1 e0       	ldi	r27, 0x01	; 1
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	23 5a       	subi	r18, 0xA3	; 163
     afc:	3e 4f       	sbci	r19, 0xFE	; 254
     afe:	81 91       	ld	r24, Z+
     b00:	89 13       	cpse	r24, r25
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <CheckGuessed+0x32>
			displayGuess[b] = wordToGuess[b];
     b04:	9c 93       	st	X, r25

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     b06:	e2 17       	cp	r30, r18
     b08:	f3 07       	cpc	r31, r19
     b0a:	a9 f4       	brne	.+42     	; 0xb36 <CheckGuessed+0x58>
		if(wordToGuess[b] == P2Guess){
			displayGuess[b] = wordToGuess[b];
			letterFound = 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <CheckGuessed+0x3e>

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     b10:	e2 17       	cp	r30, r18
     b12:	f3 07       	cpc	r31, r19
     b14:	11 f0       	breq	.+4      	; 0xb1a <CheckGuessed+0x3c>
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	f2 cf       	rjmp	.-28     	; 0xafe <CheckGuessed+0x20>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	80 93 db 0f 	sts	0x0FDB, r24	; 0x800fdb <letterFound>
			letterFound = 1;
		}
		b++;
	}//end while
	
	if(letterFound == 0){
     b20:	81 11       	cpse	r24, r1
     b22:	0c c0       	rjmp	.+24     	; 0xb3c <CheckGuessed+0x5e>
		strike++;
     b24:	80 91 de 0f 	lds	r24, 0x0FDE	; 0x800fde <strike>
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	80 93 de 0f 	sts	0x0FDE, r24	; 0x800fde <strike>
		wrong = 1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 d8 0f 	sts	0x0FD8, r24	; 0x800fd8 <wrong>
	}
}
     b34:	08 95       	ret
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 db 0f 	sts	0x0FDB, r24	; 0x800fdb <letterFound>
     b3c:	08 95       	ret

00000b3e <CheckCorrect>:

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
     b3e:	10 92 d5 0f 	sts	0x0FD5, r1	; 0x800fd5 <win>
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     b42:	20 91 d6 0f 	lds	r18, 0x0FD6	; 0x800fd6 <WTG_Index>
     b46:	22 23       	and	r18, r18
     b48:	a9 f0       	breq	.+42     	; 0xb74 <CheckCorrect+0x36>
     b4a:	e0 e0       	ldi	r30, 0x00	; 0
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	21 50       	subi	r18, 0x01	; 1
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	2f 5f       	subi	r18, 0xFF	; 255
     b54:	3e 4f       	sbci	r19, 0xFE	; 254
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <CheckCorrect+0x1e>
     b5a:	89 2f       	mov	r24, r25
		if(displayGuess[b] == '_'){
     b5c:	91 91       	ld	r25, Z+
     b5e:	9f 35       	cpi	r25, 0x5F	; 95
     b60:	69 f0       	breq	.+26     	; 0xb7c <CheckCorrect+0x3e>
     b62:	98 2f       	mov	r25, r24

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     b64:	e2 17       	cp	r30, r18
     b66:	f3 07       	cpc	r31, r19
     b68:	19 f0       	breq	.+6      	; 0xb70 <CheckCorrect+0x32>
     b6a:	81 11       	cpse	r24, r1
     b6c:	f6 cf       	rjmp	.-20     	; 0xb5a <CheckCorrect+0x1c>
     b6e:	08 95       	ret
			checkWin = 0;
		}
		b++;
	}//end while
	
	if(checkWin){
     b70:	88 23       	and	r24, r24
     b72:	49 f0       	breq	.+18     	; 0xb86 <CheckCorrect+0x48>
		win = 1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 d5 0f 	sts	0x0FD5, r24	; 0x800fd5 <win>
	}
}
     b7a:	08 95       	ret

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     b7c:	e2 17       	cp	r30, r18
     b7e:	f3 07       	cpc	r31, r19
     b80:	11 f4       	brne	.+4      	; 0xb86 <CheckCorrect+0x48>
		if(displayGuess[b] == '_'){
			checkWin = 0;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f5 cf       	rjmp	.-22     	; 0xb70 <CheckCorrect+0x32>
     b86:	08 95       	ret

00000b88 <LCD_Tick>:
enum LCD_States{Init, Wait, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD, 
	ResetLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
	switch (state)
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	91 05       	cpc	r25, r1
     b90:	08 f0       	brcs	.+2      	; 0xb94 <LCD_Tick+0xc>
     b92:	a3 c0       	rjmp	.+326    	; 0xcda <LCD_Tick+0x152>
     b94:	fc 01       	movw	r30, r24
     b96:	e6 57       	subi	r30, 0x76	; 118
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	d9 c3       	rjmp	.+1970   	; 0x134e <__tablejump2__>
	{
		case Init : state = WelcomeLCD;
					LCD_ClearScreen();
     b9c:	fe da       	rcall	.-2564   	; 0x19a <LCD_ClearScreen>
     b9e:	12 98       	cbi	0x02, 2	; 2
					PORTA = SetBit(PORTA,2,0);
     ba0:	13 98       	cbi	0x02, 3	; 2
					PORTA = SetBit(PORTA,3,0);
     ba2:	b3 c0       	rjmp	.+358    	; 0xd0a <LCD_Tick+0x182>
// 					//used to set image on nokia screen
//  					lcd_setXY(0x40,0x80);
//  					N5110_image(&head_body_arm_leg2);
					
					
		break;
     ba4:	80 b1       	in	r24, 0x00	; 0
		case Wait : if(GetBit(~PINA,7)){
     ba6:	80 95       	com	r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	88 0f       	add	r24, r24
     bac:	89 2f       	mov	r24, r25
     bae:	88 1f       	adc	r24, r24
     bb0:	99 0b       	sbc	r25, r25
     bb2:	91 95       	neg	r25
     bb4:	89 2b       	or	r24, r25
     bb6:	09 f0       	breq	.+2      	; 0xbba <LCD_Tick+0x32>
     bb8:	75 c1       	rjmp	.+746    	; 0xea4 <LCD_Tick+0x31c>
     bba:	ab c1       	rjmp	.+854    	; 0xf12 <LCD_Tick+0x38a>
     bbc:	80 b1       	in	r24, 0x00	; 0
						state = ResetLCD;	
					}else{
						state = Wait;
					}
		break;
		case WelcomeLCD :	if(GetBit(~PINA,7)){
     bbe:	80 95       	com	r24
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	88 0f       	add	r24, r24
     bc4:	89 2f       	mov	r24, r25
     bc6:	88 1f       	adc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	91 95       	neg	r25
     bcc:	89 2b       	or	r24, r25
     bce:	09 f0       	breq	.+2      	; 0xbd2 <LCD_Tick+0x4a>
     bd0:	69 c1       	rjmp	.+722    	; 0xea4 <LCD_Tick+0x31c>
     bd2:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
								state = ResetLCD;
							}else if(count <= 51){ 
     bd6:	84 33       	cpi	r24, 0x34	; 52
     bd8:	08 f4       	brcc	.+2      	; 0xbdc <LCD_Tick+0x54>
     bda:	97 c0       	rjmp	.+302    	; 0xd0a <LCD_Tick+0x182>
							  state = WelcomeLCD;
						  }
						  else if(count > 51){
							  state = P1InputLCD;
							  LCD_ClearScreen();
     bdc:	de da       	rcall	.-2628   	; 0x19a <LCD_ClearScreen>
     bde:	63 e7       	ldi	r22, 0x73	; 115
							  LCD_DisplayString(17,"16 Letters MAX");
     be0:	71 e0       	ldi	r23, 0x01	; 1
     be2:	81 e1       	ldi	r24, 0x11	; 17
     be4:	fd da       	rcall	.-2566   	; 0x1e0 <LCD_DisplayString>
							  LCD_Cursor(1);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	db da       	rcall	.-2634   	; 0x1a0 <LCD_Cursor>
     bea:	81 e0       	ldi	r24, 0x01	; 1
							  LCDindex = 1;
     bec:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <LCDindex>
     bf0:	d6 c0       	rjmp	.+428    	; 0xd9e <LCD_Tick+0x216>
     bf2:	80 b1       	in	r24, 0x00	; 0
						 }
		break;
		case P1InputLCD :	if(GetBit(~PINA,7)){
     bf4:	80 95       	com	r24
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	88 0f       	add	r24, r24
     bfa:	89 2f       	mov	r24, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	91 95       	neg	r25
     c02:	89 2b       	or	r24, r25
     c04:	09 f0       	breq	.+2      	; 0xc08 <LCD_Tick+0x80>
     c06:	4e c1       	rjmp	.+668    	; 0xea4 <LCD_Tick+0x31c>
								state = ResetLCD;
							}else if(GetBit(~PINA, 6)){
     c08:	80 b1       	in	r24, 0x00	; 0
     c0a:	80 95       	com	r24
     c0c:	86 ff       	sbrs	r24, 6
								LCD_ClearScreen();
     c0e:	c7 c0       	rjmp	.+398    	; 0xd9e <LCD_Tick+0x216>
     c10:	c4 da       	rcall	.-2680   	; 0x19a <LCD_ClearScreen>
								state = P2InputLCD;
								delay_ms(2);
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a5 da       	rcall	.-2742   	; 0x162 <delay_ms>
     c18:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
							
								for(unsigned char a = 0; a < WTG_Index; a++){
     c1c:	88 23       	and	r24, r24
     c1e:	89 f0       	breq	.+34     	; 0xc42 <LCD_Tick+0xba>
     c20:	c0 e0       	ldi	r28, 0x00	; 0
     c22:	df e5       	ldi	r29, 0x5F	; 95
									displayGuess[a] = '_';
     c24:	ec 2f       	mov	r30, r28
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	e0 50       	subi	r30, 0x00	; 0
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
									LCD_Cursor(a + 17);
     c2c:	d0 83       	st	Z, r29
     c2e:	81 e1       	ldi	r24, 0x11	; 17
     c30:	8c 0f       	add	r24, r28
     c32:	b6 da       	rcall	.-2708   	; 0x1a0 <LCD_Cursor>
									LCD_WriteData('_');
     c34:	8d 2f       	mov	r24, r29
     c36:	cb da       	rcall	.-2666   	; 0x1ce <LCD_WriteData>
							}else if(GetBit(~PINA, 6)){
								LCD_ClearScreen();
								state = P2InputLCD;
								delay_ms(2);
							
								for(unsigned char a = 0; a < WTG_Index; a++){
     c38:	cf 5f       	subi	r28, 0xFF	; 255
     c3a:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
     c3e:	c8 17       	cp	r28, r24
     c40:	88 f3       	brcs	.-30     	; 0xc24 <LCD_Tick+0x9c>
									displayGuess[a] = '_';
									LCD_Cursor(a + 17);
									LCD_WriteData('_');
								}
								
								LCD_Cursor(1);
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	ad da       	rcall	.-2726   	; 0x1a0 <LCD_Cursor>
     c46:	81 e0       	ldi	r24, 0x01	; 1
								LCDindex = 1;					
     c48:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <LCDindex>
     c4c:	d2 c0       	rjmp	.+420    	; 0xdf2 <LCD_Tick+0x26a>
     c4e:	80 b1       	in	r24, 0x00	; 0
						}else{						
							state = P1InputLCD;
						}
		break;
		case P2InputLCD :	if(GetBit(~PINA,7)){
     c50:	80 95       	com	r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	88 0f       	add	r24, r24
     c56:	89 2f       	mov	r24, r25
     c58:	88 1f       	adc	r24, r24
     c5a:	99 0b       	sbc	r25, r25
     c5c:	91 95       	neg	r25
     c5e:	89 2b       	or	r24, r25
     c60:	09 f0       	breq	.+2      	; 0xc64 <LCD_Tick+0xdc>
     c62:	20 c1       	rjmp	.+576    	; 0xea4 <LCD_Tick+0x31c>
     c64:	80 91 de 0f 	lds	r24, 0x0FDE	; 0x800fde <strike>
								state = ResetLCD;
								
							}else if(strike == 6){
     c68:	86 30       	cpi	r24, 0x06	; 6
     c6a:	19 f4       	brne	.+6      	; 0xc72 <LCD_Tick+0xea>
     c6c:	10 92 d4 0f 	sts	0x0FD4, r1	; 0x800fd4 <count>
								state = LoseLCD;
								count = 0;
     c70:	0b c1       	rjmp	.+534    	; 0xe88 <LCD_Tick+0x300>
     c72:	80 91 d5 0f 	lds	r24, 0x0FD5	; 0x800fd5 <win>
							} else if(win){
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <LCD_Tick+0xf4>
     c7a:	bb c0       	rjmp	.+374    	; 0xdf2 <LCD_Tick+0x26a>
     c7c:	10 92 d4 0f 	sts	0x0FD4, r1	; 0x800fd4 <count>
								state = WinLCD;
								count = 0;
     c80:	f1 c0       	rjmp	.+482    	; 0xe64 <LCD_Tick+0x2dc>
     c82:	80 b1       	in	r24, 0x00	; 0
							else
							{
								state = P2InputLCD;
							}
		break;
		case WinLCD:	if(GetBit(~PINA,7)){
     c84:	80 95       	com	r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	88 0f       	add	r24, r24
     c8a:	89 2f       	mov	r24, r25
     c8c:	88 1f       	adc	r24, r24
     c8e:	99 0b       	sbc	r25, r25
     c90:	91 95       	neg	r25
     c92:	89 2b       	or	r24, r25
     c94:	09 f0       	breq	.+2      	; 0xc98 <LCD_Tick+0x110>
     c96:	06 c1       	rjmp	.+524    	; 0xea4 <LCD_Tick+0x31c>
							state = ResetLCD;
						}else if(count <= 20){
     c98:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     c9c:	85 31       	cpi	r24, 0x15	; 21
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <LCD_Tick+0x11a>
     ca0:	dd c0       	rjmp	.+442    	; 0xe5c <LCD_Tick+0x2d4>
							state = WinLCD;
						}else if(count > 20){
							state = Wait;
							LCD_ClearScreen();
     ca2:	7b da       	rcall	.-2826   	; 0x19a <LCD_ClearScreen>
     ca4:	62 e8       	ldi	r22, 0x82	; 130
							LCD_DisplayString(1, "Press RESET to start a new game");
     ca6:	71 e0       	ldi	r23, 0x01	; 1
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	9a da       	rcall	.-2764   	; 0x1e0 <LCD_DisplayString>
     cac:	32 c1       	rjmp	.+612    	; 0xf12 <LCD_Tick+0x38a>
     cae:	80 b1       	in	r24, 0x00	; 0
     cb0:	80 95       	com	r24
						}
						
		break;
		case LoseLCD :	if(GetBit(~PINA,7)){
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	88 0f       	add	r24, r24
     cb6:	89 2f       	mov	r24, r25
     cb8:	88 1f       	adc	r24, r24
     cba:	99 0b       	sbc	r25, r25
     cbc:	91 95       	neg	r25
     cbe:	89 2b       	or	r24, r25
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <LCD_Tick+0x13c>
     cc2:	f0 c0       	rjmp	.+480    	; 0xea4 <LCD_Tick+0x31c>
							state = ResetLCD;
						}else if(count <= 20){
     cc4:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     cc8:	85 31       	cpi	r24, 0x15	; 21
     cca:	08 f4       	brcc	.+2      	; 0xcce <LCD_Tick+0x146>
     ccc:	d9 c0       	rjmp	.+434    	; 0xe80 <LCD_Tick+0x2f8>
							state = LoseLCD;
						}else if(count > 20)
						{
							state = Wait;
							LCD_ClearScreen();
     cce:	65 da       	rcall	.-2870   	; 0x19a <LCD_ClearScreen>
     cd0:	62 e8       	ldi	r22, 0x82	; 130
							LCD_DisplayString(1, "Press RESET to start a new game");
     cd2:	71 e0       	ldi	r23, 0x01	; 1
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	84 da       	rcall	.-2808   	; 0x1e0 <LCD_DisplayString>
     cd8:	1c c1       	rjmp	.+568    	; 0xf12 <LCD_Tick+0x38a>
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	91 05       	cpc	r25, r1
		break;
		case ResetLCD : state = WelcomeLCD;
		break;
	}//end Transitions
	
	switch (state)
     cde:	09 f4       	brne	.+2      	; 0xce2 <LCD_Tick+0x15a>
     ce0:	88 c0       	rjmp	.+272    	; 0xdf2 <LCD_Tick+0x26a>
     ce2:	44 f4       	brge	.+16     	; 0xcf4 <LCD_Tick+0x16c>
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	91 05       	cpc	r25, r1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <LCD_Tick+0x182>
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	91 05       	cpc	r25, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <LCD_Tick+0x16a>
     cf0:	56 c0       	rjmp	.+172    	; 0xd9e <LCD_Tick+0x216>
     cf2:	11 c1       	rjmp	.+546    	; 0xf16 <LCD_Tick+0x38e>
     cf4:	86 30       	cpi	r24, 0x06	; 6
     cf6:	91 05       	cpc	r25, r1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <LCD_Tick+0x174>
     cfa:	c2 c0       	rjmp	.+388    	; 0xe80 <LCD_Tick+0x2f8>
     cfc:	0c f4       	brge	.+2      	; 0xd00 <LCD_Tick+0x178>
     cfe:	ae c0       	rjmp	.+348    	; 0xe5c <LCD_Tick+0x2d4>
     d00:	87 30       	cpi	r24, 0x07	; 7
     d02:	91 05       	cpc	r25, r1
     d04:	09 f0       	breq	.+2      	; 0xd08 <LCD_Tick+0x180>
     d06:	07 c1       	rjmp	.+526    	; 0xf16 <LCD_Tick+0x38e>
     d08:	cd c0       	rjmp	.+410    	; 0xea4 <LCD_Tick+0x31c>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
							for(LCDindex = 0; LCDindex < 16; LCDindex++){
     d0a:	10 92 d7 0f 	sts	0x0FD7, r1	; 0x800fd7 <LCDindex>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
								LCD_Cursor(LCDindex + 1);
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	46 da       	rcall	.-2932   	; 0x1a0 <LCD_Cursor>
     d14:	e0 91 d7 0f 	lds	r30, 0x0FD7	; 0x800fd7 <LCDindex>
								LCD_WriteData(welcomeMessage[LCDindex]);
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	e7 5e       	subi	r30, 0xE7	; 231
     d1c:	fe 4f       	sbci	r31, 0xFE	; 254
     d1e:	80 81       	ld	r24, Z
     d20:	56 da       	rcall	.-2900   	; 0x1ce <LCD_WriteData>
     d22:	80 91 d7 0f 	lds	r24, 0x0FD7	; 0x800fd7 <LCDindex>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
							for(LCDindex = 0; LCDindex < 16; LCDindex++){
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <LCDindex>
     d2c:	80 31       	cpi	r24, 0x10	; 16
     d2e:	80 f3       	brcs	.-32     	; 0xd10 <LCD_Tick+0x188>
     d30:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <welcomeMessage>
								LCD_Cursor(LCDindex + 1);
								LCD_WriteData(welcomeMessage[LCDindex]);
							}
				
							front = welcomeMessage[0];
     d34:	90 93 e6 0f 	sts	0x0FE6, r25	; 0x800fe6 <front>
     d38:	e9 e1       	ldi	r30, 0x19	; 25
     d3a:	f1 e0       	ldi	r31, 0x01	; 1
     d3c:	2c e5       	ldi	r18, 0x5C	; 92
     d3e:	31 e0       	ldi	r19, 0x01	; 1
		
							for (unsigned char j = 0; j < 67; j++) {
								welcomeMessage[j] = welcomeMessage[j + 1];
     d40:	81 81       	ldd	r24, Z+1	; 0x01
								LCD_WriteData(welcomeMessage[LCDindex]);
							}
				
							front = welcomeMessage[0];
		
							for (unsigned char j = 0; j < 67; j++) {
     d42:	81 93       	st	Z+, r24
     d44:	2e 17       	cp	r18, r30
								welcomeMessage[j] = welcomeMessage[j + 1];
							}
							// put the saved character on the end
							welcomeMessage[67] = front;
     d46:	3f 07       	cpc	r19, r31
		
							LCDBuildChar(0, customChar);
     d48:	d9 f7       	brne	.-10     	; 0xd40 <LCD_Tick+0x1b8>
     d4a:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <wordToGuess>
								LCD_Cursor(17);
     d4e:	61 e1       	ldi	r22, 0x11	; 17
     d50:	71 e0       	ldi	r23, 0x01	; 1
								LCD_WriteData(0x00);
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	ab de       	rcall	.-682    	; 0xaac <LCDBuildChar>
								LCD_Cursor(20);
     d56:	81 e1       	ldi	r24, 0x11	; 17
     d58:	23 da       	rcall	.-3002   	; 0x1a0 <LCD_Cursor>
								LCD_WriteData(0x00);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	38 da       	rcall	.-2960   	; 0x1ce <LCD_WriteData>
								LCD_Cursor(23);
     d5e:	84 e1       	ldi	r24, 0x14	; 20
     d60:	1f da       	rcall	.-3010   	; 0x1a0 <LCD_Cursor>
     d62:	80 e0       	ldi	r24, 0x00	; 0
								LCD_WriteData(0x00);
     d64:	34 da       	rcall	.-2968   	; 0x1ce <LCD_WriteData>
     d66:	87 e1       	ldi	r24, 0x17	; 23
     d68:	1b da       	rcall	.-3018   	; 0x1a0 <LCD_Cursor>
								LCD_Cursor(26);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	30 da       	rcall	.-2976   	; 0x1ce <LCD_WriteData>
     d6e:	8a e1       	ldi	r24, 0x1A	; 26
								LCD_WriteData(0x00);
     d70:	17 da       	rcall	.-3026   	; 0x1a0 <LCD_Cursor>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	2c da       	rcall	.-2984   	; 0x1ce <LCD_WriteData>
								LCD_Cursor(29);
     d76:	8d e1       	ldi	r24, 0x1D	; 29
     d78:	13 da       	rcall	.-3034   	; 0x1a0 <LCD_Cursor>
     d7a:	80 e0       	ldi	r24, 0x00	; 0
								LCD_WriteData(0x00);
     d7c:	28 da       	rcall	.-2992   	; 0x1ce <LCD_WriteData>
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	0f da       	rcall	.-3042   	; 0x1a0 <LCD_Cursor>
								LCD_Cursor(32);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	24 da       	rcall	.-3000   	; 0x1ce <LCD_WriteData>
     d86:	83 e2       	ldi	r24, 0x23	; 35
								LCD_WriteData(0x00);
     d88:	0b da       	rcall	.-3050   	; 0x1a0 <LCD_Cursor>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	20 da       	rcall	.-3008   	; 0x1ce <LCD_WriteData>
								LCD_Cursor(35);
     d8e:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     d92:	8f 5f       	subi	r24, 0xFF	; 255
								LCD_WriteData(0x00);
     d94:	80 93 d4 0f 	sts	0x0FD4, r24	; 0x800fd4 <count>
     d98:	82 e0       	ldi	r24, 0x02	; 2
		
							count++;
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	bc c0       	rjmp	.+376    	; 0xf16 <LCD_Tick+0x38e>
     d9e:	80 b1       	in	r24, 0x00	; 0
     da0:	80 95       	com	r24
     da2:	85 ff       	sbrs	r24, 5
		
			
		break;
     da4:	18 c0       	rjmp	.+48     	; 0xdd6 <LCD_Tick+0x24e>
     da6:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
		case P1InputLCD :	if(GetBit(~PINA,5)){
     daa:	80 31       	cpi	r24, 0x10	; 16
     dac:	a0 f4       	brcc	.+40     	; 0xdd6 <LCD_Tick+0x24e>
     dae:	90 91 d7 0f 	lds	r25, 0x0FD7	; 0x800fd7 <LCDindex>
								if(WTG_Index < 16){
     db2:	9f 5f       	subi	r25, 0xFF	; 255
     db4:	90 93 d7 0f 	sts	0x0FD7, r25	; 0x800fd7 <LCDindex>
									LCDindex++;
     db8:	e8 2f       	mov	r30, r24
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	e4 5a       	subi	r30, 0xA4	; 164
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
									wordToGuess[WTG_Index] = lastClicked;
     dc0:	90 91 e9 0f 	lds	r25, 0x0FE9	; 0x800fe9 <lastClicked>
     dc4:	90 83       	st	Z, r25
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	80 93 d6 0f 	sts	0x0FD6, r24	; 0x800fd6 <WTG_Index>
     dcc:	80 e2       	ldi	r24, 0x20	; 32
									WTG_Index++;
     dce:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     dd2:	10 92 df 0f 	sts	0x0FDF, r1	; 0x800fdf <click>
									character = ' ';
     dd6:	80 91 d7 0f 	lds	r24, 0x0FD7	; 0x800fd7 <LCDindex>
									click = 0;
					
								}
							}
							LCD_Cursor(LCDindex);
     dda:	e2 d9       	rcall	.-3132   	; 0x1a0 <LCD_Cursor>
     ddc:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <character>
							if(character != ' '){
     de0:	80 32       	cpi	r24, 0x20	; 32
     de2:	09 f4       	brne	.+2      	; 0xde6 <LCD_Tick+0x25e>
     de4:	90 c0       	rjmp	.+288    	; 0xf06 <LCD_Tick+0x37e>
     de6:	80 93 e9 0f 	sts	0x0FE9, r24	; 0x800fe9 <lastClicked>
								lastClicked = character;
     dea:	f1 d9       	rcall	.-3102   	; 0x1ce <LCD_WriteData>
								LCD_WriteData(character);
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	92 c0       	rjmp	.+292    	; 0xf16 <LCD_Tick+0x38e>
     df2:	80 b1       	in	r24, 0x00	; 0
							}
			
		break;
 		case P2InputLCD :	if(GetBit(~PINA,5)){
     df4:	80 95       	com	r24
     df6:	85 ff       	sbrs	r24, 5
     df8:	24 c0       	rjmp	.+72     	; 0xe42 <LCD_Tick+0x2ba>
									P2Guess = lastClicked;
     dfa:	80 91 e9 0f 	lds	r24, 0x0FE9	; 0x800fe9 <lastClicked>
     dfe:	80 93 e8 0f 	sts	0x0FE8, r24	; 0x800fe8 <P2Guess>
									character = ' ';
     e02:	80 e2       	ldi	r24, 0x20	; 32
     e04:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
									click = 0;
     e08:	10 92 df 0f 	sts	0x0FDF, r1	; 0x800fdf <click>
									LCD_Cursor(1);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	c8 d9       	rcall	.-3184   	; 0x1a0 <LCD_Cursor>
									LCD_WriteData(' ');
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	dd d9       	rcall	.-3142   	; 0x1ce <LCD_WriteData>
									LCD_Cursor(1);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	c4 d9       	rcall	.-3192   	; 0x1a0 <LCD_Cursor>
     e18:	62 de       	rcall	.-828    	; 0xade <CheckGuessed>
						
									CheckGuessed();
     e1a:	91 de       	rcall	.-734    	; 0xb3e <CheckCorrect>
     e1c:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
									CheckCorrect();
									for(unsigned char a = 0; a < WTG_Index; a++){
     e20:	88 23       	and	r24, r24
     e22:	79 f0       	breq	.+30     	; 0xe42 <LCD_Tick+0x2ba>
     e24:	c0 e0       	ldi	r28, 0x00	; 0
     e26:	81 e1       	ldi	r24, 0x11	; 17
										LCD_Cursor(a + 17);
     e28:	8c 0f       	add	r24, r28
     e2a:	ba d9       	rcall	.-3212   	; 0x1a0 <LCD_Cursor>
     e2c:	ec 2f       	mov	r30, r28
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
										LCD_WriteData(displayGuess[a]);
     e30:	e0 50       	subi	r30, 0x00	; 0
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	cb d9       	rcall	.-3178   	; 0x1ce <LCD_WriteData>
     e38:	cf 5f       	subi	r28, 0xFF	; 255
     e3a:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
									LCD_WriteData(' ');
									LCD_Cursor(1);
						
									CheckGuessed();
									CheckCorrect();
									for(unsigned char a = 0; a < WTG_Index; a++){
     e3e:	c8 17       	cp	r28, r24
     e40:	90 f3       	brcs	.-28     	; 0xe26 <LCD_Tick+0x29e>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	ad d9       	rcall	.-3238   	; 0x1a0 <LCD_Cursor>
										LCD_Cursor(a + 17);
										LCD_WriteData(displayGuess[a]);
									}
					
							}
							LCD_Cursor(1);
     e46:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <character>
							if(character != ' '){
     e4a:	80 32       	cpi	r24, 0x20	; 32
     e4c:	09 f4       	brne	.+2      	; 0xe50 <LCD_Tick+0x2c8>
     e4e:	5e c0       	rjmp	.+188    	; 0xf0c <LCD_Tick+0x384>
     e50:	80 93 e9 0f 	sts	0x0FE9, r24	; 0x800fe9 <lastClicked>
								lastClicked = character;
     e54:	bc d9       	rcall	.-3208   	; 0x1ce <LCD_WriteData>
     e56:	84 e0       	ldi	r24, 0x04	; 4
								LCD_WriteData(character);
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	5d c0       	rjmp	.+186    	; 0xf16 <LCD_Tick+0x38e>
     e5c:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
							}
				
							
		break;
		case WinLCD:	if(count % 2 == 0){
     e60:	80 fd       	sbrc	r24, 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <LCD_Tick+0x2e0>
     e64:	9a d9       	rcall	.-3276   	; 0x19a <LCD_ClearScreen>
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <LCD_Tick+0x2e8>
							LCD_ClearScreen();
     e68:	62 ea       	ldi	r22, 0xA2	; 162
     e6a:	71 e0       	ldi	r23, 0x01	; 1
     e6c:	81 e0       	ldi	r24, 0x01	; 1
						}else {
							LCD_DisplayString(1, "YOU WIN! YOU WIN! YOU WIN!");
     e6e:	b8 d9       	rcall	.-3216   	; 0x1e0 <LCD_DisplayString>
     e70:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	80 93 d4 0f 	sts	0x0FD4, r24	; 0x800fd4 <count>
						}
						count++;
     e7a:	85 e0       	ldi	r24, 0x05	; 5
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	4b c0       	rjmp	.+150    	; 0xf16 <LCD_Tick+0x38e>
     e80:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
		break;
     e84:	80 fd       	sbrc	r24, 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <LCD_Tick+0x304>
		case LoseLCD :	if(count % 2 == 0){
     e88:	88 d9       	rcall	.-3312   	; 0x19a <LCD_ClearScreen>
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <LCD_Tick+0x30c>
     e8c:	6d eb       	ldi	r22, 0xBD	; 189
     e8e:	71 e0       	ldi	r23, 0x01	; 1
							LCD_ClearScreen();
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	a6 d9       	rcall	.-3252   	; 0x1e0 <LCD_DisplayString>
     e94:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
						}else {
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	80 93 d4 0f 	sts	0x0FD4, r24	; 0x800fd4 <count>
     e9e:	86 e0       	ldi	r24, 0x06	; 6
						}
						count++;
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	39 c0       	rjmp	.+114    	; 0xf16 <LCD_Tick+0x38e>
     ea4:	10 92 d4 0f 	sts	0x0FD4, r1	; 0x800fd4 <count>
     ea8:	78 d9       	rcall	.-3344   	; 0x19a <LCD_ClearScreen>
						
		break;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <LCDindex>
		case ResetLCD :	state = WelcomeLCD;
						count = 0;
     eb0:	10 92 d6 0f 	sts	0x0FD6, r1	; 0x800fd6 <WTG_Index>
						LCD_ClearScreen();
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	80 93 e9 0f 	sts	0x0FE9, r24	; 0x800fe9 <lastClicked>
						LCDindex = 1;
     eba:	80 93 e8 0f 	sts	0x0FE8, r24	; 0x800fe8 <P2Guess>
						WTG_Index = 0; //world to guess index
     ebe:	e0 e0       	ldi	r30, 0x00	; 0
     ec0:	f1 e0       	ldi	r31, 0x01	; 1
						lastClicked = ' ';  //last letter user clicked
     ec2:	ac e5       	ldi	r26, 0x5C	; 92
     ec4:	b1 e0       	ldi	r27, 0x01	; 1
     ec6:	21 e1       	ldi	r18, 0x11	; 17
						P2Guess = ' ';
     ec8:	31 e0       	ldi	r19, 0x01	; 1
     eca:	9f e5       	ldi	r25, 0x5F	; 95
     ecc:	91 93       	st	Z+, r25
     ece:	8d 93       	st	X+, r24
     ed0:	e2 17       	cp	r30, r18
     ed2:	f3 07       	cpc	r31, r19
     ed4:	d9 f7       	brne	.-10     	; 0xecc <LCD_Tick+0x344>
     ed6:	10 92 db 0f 	sts	0x0FDB, r1	; 0x800fdb <letterFound>
						for(unsigned char k = 0; k < 17; k++){
							displayGuess[k] = '_';
     eda:	10 92 da 0f 	sts	0x0FDA, r1	; 0x800fda <WA_Count>
						LCD_ClearScreen();
						LCDindex = 1;
						WTG_Index = 0; //world to guess index
						lastClicked = ' ';  //last letter user clicked
						P2Guess = ' ';
						for(unsigned char k = 0; k < 17; k++){
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <index>
							displayGuess[k] = '_';
							wordToGuess[k] = ' ';
						}
						letterFound = 0; //checks is the letter P2 guess was in P1s word
     ee4:	10 92 df 0f 	sts	0x0FDF, r1	; 0x800fdf <click>
						WA_Count = 0;
     ee8:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <strike>
						index = 1;
     eec:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <counter>
     ef0:	10 92 d5 0f 	sts	0x0FD5, r1	; 0x800fd5 <win>
						click = 0;
     ef4:	80 93 dc 0f 	sts	0x0FDC, r24	; 0x800fdc <NOKIAReset>
						strike = 0;
     ef8:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <WAReset>
						counter = 0;
     efc:	12 98       	cbi	0x02, 2	; 2
						win = 0; 
     efe:	13 98       	cbi	0x02, 3	; 2
     f00:	82 e0       	ldi	r24, 0x02	; 2
						NOKIAReset = 1;
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <LCD_Tick+0x38e>
						WAReset = 1;
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	90 e0       	ldi	r25, 0x00	; 0
						PORTA = SetBit(PORTA,2,0);
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <LCD_Tick+0x38e>
						PORTA = SetBit(PORTA,3,0);
     f0c:	84 e0       	ldi	r24, 0x04	; 4
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
						}
						count++;
						
		break;
		case ResetLCD :	state = WelcomeLCD;
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <LCD_Tick+0x38e>
						win = 0; 
						NOKIAReset = 1;
						WAReset = 1;
						PORTA = SetBit(PORTA,2,0);
						PORTA = SetBit(PORTA,3,0);
		break;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <main>:
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	8a b9       	out	0x0a, r24	; 10
     f20:	1b b8       	out	0x0b, r1	; 11
     f22:	81 b9       	out	0x01, r24	; 1
	}//end Initializations
	
	
	return state;
}
     f24:	82 b9       	out	0x02, r24	; 2
     f26:	84 b9       	out	0x04, r24	; 4
     f28:	15 b8       	out	0x05, r1	; 5
int main(void)
{
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
	DDRA = 0xFF; PORTA = 0xFF; // LCD control lines
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
     f2a:	80 ef       	ldi	r24, 0xF0	; 240
     f2c:	87 b9       	out	0x07, r24	; 7
     f2e:	8f e0       	ldi	r24, 0x0F	; 15
     f30:	88 b9       	out	0x08, r24	; 8
	unsigned long NokiaPeriod = 500;
	
	unsigned long period = 100;
	unsigned char i = 0;
	
	Tasks[i].state = Init;
     f32:	e8 ea       	ldi	r30, 0xA8	; 168
     f34:	ff e0       	ldi	r31, 0x0F	; 15
     f36:	10 82       	st	Z, r1
	Tasks[i].period = LCDPeriod;
     f38:	84 ef       	ldi	r24, 0xF4	; 244
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	81 83       	std	Z+1, r24	; 0x01
     f42:	92 83       	std	Z+2, r25	; 0x02
     f44:	a3 83       	std	Z+3, r26	; 0x03
     f46:	b4 83       	std	Z+4, r27	; 0x04
	Tasks[i].elapsedTime = LCDPeriod;
     f48:	85 83       	std	Z+5, r24	; 0x05
     f4a:	96 83       	std	Z+6, r25	; 0x06
     f4c:	a7 83       	std	Z+7, r26	; 0x07
     f4e:	b0 87       	std	Z+8, r27	; 0x08
	Tasks[i].TickFct = &LCD_Tick;
     f50:	24 ec       	ldi	r18, 0xC4	; 196
     f52:	35 e0       	ldi	r19, 0x05	; 5
     f54:	32 87       	std	Z+10, r19	; 0x0a
     f56:	21 87       	std	Z+9, r18	; 0x09
	i++;
	Tasks[i].state = Wait_KP;
     f58:	13 86       	std	Z+11, r1	; 0x0b
	Tasks[i].period = KPPeriod;
     f5a:	4c e2       	ldi	r20, 0x2C	; 44
     f5c:	51 e0       	ldi	r21, 0x01	; 1
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	44 87       	std	Z+12, r20	; 0x0c
     f64:	55 87       	std	Z+13, r21	; 0x0d
     f66:	66 87       	std	Z+14, r22	; 0x0e
     f68:	77 87       	std	Z+15, r23	; 0x0f
	Tasks[i].elapsedTime = KPPeriod;
     f6a:	40 8b       	std	Z+16, r20	; 0x10
     f6c:	51 8b       	std	Z+17, r21	; 0x11
     f6e:	62 8b       	std	Z+18, r22	; 0x12
     f70:	73 8b       	std	Z+19, r23	; 0x13
	Tasks[i].TickFct = &KeypadTick;
     f72:	2d ec       	ldi	r18, 0xCD	; 205
     f74:	31 e0       	ldi	r19, 0x01	; 1
     f76:	35 8b       	std	Z+21, r19	; 0x15
     f78:	24 8b       	std	Z+20, r18	; 0x14
	i++;
	Tasks[i].state = WA_Wait;
     f7a:	16 8a       	std	Z+22, r1	; 0x16
	Tasks[i].period = WAPeriod;
     f7c:	44 e6       	ldi	r20, 0x64	; 100
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	47 8b       	std	Z+23, r20	; 0x17
     f86:	50 8f       	std	Z+24, r21	; 0x18
     f88:	61 8f       	std	Z+25, r22	; 0x19
     f8a:	72 8f       	std	Z+26, r23	; 0x1a
	Tasks[i].elapsedTime = WAPeriod;
     f8c:	43 8f       	std	Z+27, r20	; 0x1b
     f8e:	54 8f       	std	Z+28, r21	; 0x1c
     f90:	65 8f       	std	Z+29, r22	; 0x1d
     f92:	76 8f       	std	Z+30, r23	; 0x1e
	Tasks[i].TickFct = &WA_Tick;
     f94:	27 ee       	ldi	r18, 0xE7	; 231
     f96:	34 e0       	ldi	r19, 0x04	; 4
     f98:	30 a3       	std	Z+32, r19	; 0x20
     f9a:	27 8f       	std	Z+31, r18	; 0x1f
	i++;
	Tasks[i].state = Nokia_Init;
     f9c:	11 a2       	std	Z+33, r1	; 0x21
	Tasks[i].period = NokiaPeriod;
     f9e:	82 a3       	std	Z+34, r24	; 0x22
     fa0:	93 a3       	std	Z+35, r25	; 0x23
     fa2:	a4 a3       	std	Z+36, r26	; 0x24
     fa4:	b5 a3       	std	Z+37, r27	; 0x25
	Tasks[i].elapsedTime = NokiaPeriod;
     fa6:	86 a3       	std	Z+38, r24	; 0x26
     fa8:	97 a3       	std	Z+39, r25	; 0x27
     faa:	a0 a7       	std	Z+40, r26	; 0x28
     fac:	b1 a7       	std	Z+41, r27	; 0x29
	Tasks[i].TickFct = &Nokia_Tick;
     fae:	8f e8       	ldi	r24, 0x8F	; 143
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	93 a7       	std	Z+43, r25	; 0x2b
     fb4:	82 a7       	std	Z+42, r24	; 0x2a
	
	//LCDBuildChar(0, customChar);
	TimerSet(period);
     fb6:	64 e6       	ldi	r22, 0x64	; 100
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	29 d9       	rcall	.-3502   	; 0x212 <TimerSet>
	TimerOn();
     fc0:	39 d9       	rcall	.-3470   	; 0x234 <TimerOn>
	LCD_init();
     fc2:	f6 d8       	rcall	.-3604   	; 0x1b0 <LCD_init>
     fc4:	6a dd       	rcall	.-1324   	; 0xa9a <PWM_on>
	PWM_on();
     fc6:	0f 2e       	mov	r0, r31
     fc8:	f4 ed       	ldi	r31, 0xD4	; 212
     fca:	ef 2e       	mov	r14, r31
     fcc:	ff e0       	ldi	r31, 0x0F	; 15
     fce:	ff 2e       	mov	r15, r31
     fd0:	f0 2d       	mov	r31, r0
     fd2:	c8 ea       	ldi	r28, 0xA8	; 168
     fd4:	df e0       	ldi	r29, 0x0F	; 15
     fd6:	8e 01       	movw	r16, r28
     fd8:	4d 81       	ldd	r20, Y+5	; 0x05
     fda:	5e 81       	ldd	r21, Y+6	; 0x06
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 4; i++ ) {
			// Task is ready to tick
			if ( Tasks[i].elapsedTime == Tasks[i].period ) {
     fdc:	6f 81       	ldd	r22, Y+7	; 0x07
     fde:	78 85       	ldd	r23, Y+8	; 0x08
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	ab 81       	ldd	r26, Y+3	; 0x03
     fe6:	bc 81       	ldd	r27, Y+4	; 0x04
     fe8:	48 17       	cp	r20, r24
     fea:	59 07       	cpc	r21, r25
     fec:	6a 07       	cpc	r22, r26
     fee:	7b 07       	cpc	r23, r27
     ff0:	61 f4       	brne	.+24     	; 0x100a <main+0xee>
     ff2:	88 81       	ld	r24, Y
     ff4:	e9 85       	ldd	r30, Y+9	; 0x09
				// Setting next state for task
				Tasks[i].state = Tasks[i].TickFct(Tasks[i].state);
     ff6:	fa 85       	ldd	r31, Y+10	; 0x0a
     ff8:	08 2e       	mov	r0, r24
     ffa:	00 0c       	add	r0, r0
     ffc:	99 0b       	sbc	r25, r25
     ffe:	09 95       	icall
    1000:	88 83       	st	Y, r24
    1002:	1d 82       	std	Y+5, r1	; 0x05
    1004:	1e 82       	std	Y+6, r1	; 0x06
				// Reset the elapsed time for next tick.
				Tasks[i].elapsedTime = 0;
    1006:	1f 82       	std	Y+7, r1	; 0x07
    1008:	18 86       	std	Y+8, r1	; 0x08
    100a:	f8 01       	movw	r30, r16
    100c:	85 81       	ldd	r24, Z+5	; 0x05
			}
			Tasks[i].elapsedTime += period;
    100e:	96 81       	ldd	r25, Z+6	; 0x06
    1010:	a7 81       	ldd	r26, Z+7	; 0x07
    1012:	b0 85       	ldd	r27, Z+8	; 0x08
    1014:	8c 59       	subi	r24, 0x9C	; 156
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	af 4f       	sbci	r26, 0xFF	; 255
    101a:	bf 4f       	sbci	r27, 0xFF	; 255
    101c:	85 83       	std	Z+5, r24	; 0x05
    101e:	96 83       	std	Z+6, r25	; 0x06
    1020:	a7 83       	std	Z+7, r26	; 0x07
    1022:	b0 87       	std	Z+8, r27	; 0x08
    1024:	2b 96       	adiw	r28, 0x0b	; 11
    1026:	ce 15       	cp	r28, r14
    1028:	df 05       	cpc	r29, r15
	
	
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 4; i++ ) {
    102a:	a9 f6       	brne	.-86     	; 0xfd6 <main+0xba>
    102c:	80 91 e4 0f 	lds	r24, 0x0FE4	; 0x800fe4 <TimerFlag>
				Tasks[i].elapsedTime = 0;
			}
			Tasks[i].elapsedTime += period;
		}
		
		while (!TimerFlag){}
    1030:	88 23       	and	r24, r24
    1032:	e1 f3       	breq	.-8      	; 0x102c <main+0x110>
    1034:	10 92 e4 0f 	sts	0x0FE4, r1	; 0x800fe4 <TimerFlag>
		TimerFlag = 0;
    1038:	cc cf       	rjmp	.-104    	; 0xfd2 <main+0xb6>

0000103a <SPI_SS_Enable>:
    103a:	2c 98       	cbi	0x05, 4	; 5
		
	}
    103c:	08 95       	ret

0000103e <SPI_SS_Disable>:
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
    103e:	2c 9a       	sbi	0x05, 4	; 5
    1040:	08 95       	ret

00001042 <SPI_Init>:
    1042:	83 eb       	ldi	r24, 0xB3	; 179
    1044:	84 b9       	out	0x04, r24	; 4
    1046:	28 9a       	sbi	0x05, 0	; 5
    1048:	26 98       	cbi	0x04, 6	; 4
    104a:	2c 9a       	sbi	0x05, 4	; 5
    104c:	81 e5       	ldi	r24, 0x51	; 81
    104e:	8c bd       	out	0x2c, r24	; 44
    1050:	08 95       	ret

00001052 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
    1052:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
    1054:	0d b4       	in	r0, 0x2d	; 45
    1056:	07 fe       	sbrs	r0, 7
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <SPI_Write+0x2>
}
    105a:	08 95       	ret

0000105c <__cmpsf2>:
    105c:	9c d0       	rcall	.+312    	; 0x1196 <__fp_cmp>
    105e:	08 f4       	brcc	.+2      	; 0x1062 <__cmpsf2+0x6>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	08 95       	ret

00001064 <__divsf3>:
    1064:	0c d0       	rcall	.+24     	; 0x107e <__divsf3x>
    1066:	d2 c0       	rjmp	.+420    	; 0x120c <__fp_round>
    1068:	ca d0       	rcall	.+404    	; 0x11fe <__fp_pscB>
    106a:	40 f0       	brcs	.+16     	; 0x107c <__divsf3+0x18>
    106c:	c1 d0       	rcall	.+386    	; 0x11f0 <__fp_pscA>
    106e:	30 f0       	brcs	.+12     	; 0x107c <__divsf3+0x18>
    1070:	21 f4       	brne	.+8      	; 0x107a <__divsf3+0x16>
    1072:	5f 3f       	cpi	r21, 0xFF	; 255
    1074:	19 f0       	breq	.+6      	; 0x107c <__divsf3+0x18>
    1076:	b3 c0       	rjmp	.+358    	; 0x11de <__fp_inf>
    1078:	51 11       	cpse	r21, r1
    107a:	fc c0       	rjmp	.+504    	; 0x1274 <__fp_szero>
    107c:	b6 c0       	rjmp	.+364    	; 0x11ea <__fp_nan>

0000107e <__divsf3x>:
    107e:	d7 d0       	rcall	.+430    	; 0x122e <__fp_split3>
    1080:	98 f3       	brcs	.-26     	; 0x1068 <__divsf3+0x4>

00001082 <__divsf3_pse>:
    1082:	99 23       	and	r25, r25
    1084:	c9 f3       	breq	.-14     	; 0x1078 <__divsf3+0x14>
    1086:	55 23       	and	r21, r21
    1088:	b1 f3       	breq	.-20     	; 0x1076 <__divsf3+0x12>
    108a:	95 1b       	sub	r25, r21
    108c:	55 0b       	sbc	r21, r21
    108e:	bb 27       	eor	r27, r27
    1090:	aa 27       	eor	r26, r26
    1092:	62 17       	cp	r22, r18
    1094:	73 07       	cpc	r23, r19
    1096:	84 07       	cpc	r24, r20
    1098:	38 f0       	brcs	.+14     	; 0x10a8 <__divsf3_pse+0x26>
    109a:	9f 5f       	subi	r25, 0xFF	; 255
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	44 1f       	adc	r20, r20
    10a4:	aa 1f       	adc	r26, r26
    10a6:	a9 f3       	breq	.-22     	; 0x1092 <__divsf3_pse+0x10>
    10a8:	33 d0       	rcall	.+102    	; 0x1110 <__divsf3_pse+0x8e>
    10aa:	0e 2e       	mov	r0, r30
    10ac:	3a f0       	brmi	.+14     	; 0x10bc <__divsf3_pse+0x3a>
    10ae:	e0 e8       	ldi	r30, 0x80	; 128
    10b0:	30 d0       	rcall	.+96     	; 0x1112 <__divsf3_pse+0x90>
    10b2:	91 50       	subi	r25, 0x01	; 1
    10b4:	50 40       	sbci	r21, 0x00	; 0
    10b6:	e6 95       	lsr	r30
    10b8:	00 1c       	adc	r0, r0
    10ba:	ca f7       	brpl	.-14     	; 0x10ae <__divsf3_pse+0x2c>
    10bc:	29 d0       	rcall	.+82     	; 0x1110 <__divsf3_pse+0x8e>
    10be:	fe 2f       	mov	r31, r30
    10c0:	27 d0       	rcall	.+78     	; 0x1110 <__divsf3_pse+0x8e>
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	88 1f       	adc	r24, r24
    10c8:	bb 1f       	adc	r27, r27
    10ca:	26 17       	cp	r18, r22
    10cc:	37 07       	cpc	r19, r23
    10ce:	48 07       	cpc	r20, r24
    10d0:	ab 07       	cpc	r26, r27
    10d2:	b0 e8       	ldi	r27, 0x80	; 128
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <__divsf3_pse+0x56>
    10d6:	bb 0b       	sbc	r27, r27
    10d8:	80 2d       	mov	r24, r0
    10da:	bf 01       	movw	r22, r30
    10dc:	ff 27       	eor	r31, r31
    10de:	93 58       	subi	r25, 0x83	; 131
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	2a f0       	brmi	.+10     	; 0x10ee <__divsf3_pse+0x6c>
    10e4:	9e 3f       	cpi	r25, 0xFE	; 254
    10e6:	51 05       	cpc	r21, r1
    10e8:	68 f0       	brcs	.+26     	; 0x1104 <__divsf3_pse+0x82>
    10ea:	79 c0       	rjmp	.+242    	; 0x11de <__fp_inf>
    10ec:	c3 c0       	rjmp	.+390    	; 0x1274 <__fp_szero>
    10ee:	5f 3f       	cpi	r21, 0xFF	; 255
    10f0:	ec f3       	brlt	.-6      	; 0x10ec <__divsf3_pse+0x6a>
    10f2:	98 3e       	cpi	r25, 0xE8	; 232
    10f4:	dc f3       	brlt	.-10     	; 0x10ec <__divsf3_pse+0x6a>
    10f6:	86 95       	lsr	r24
    10f8:	77 95       	ror	r23
    10fa:	67 95       	ror	r22
    10fc:	b7 95       	ror	r27
    10fe:	f7 95       	ror	r31
    1100:	9f 5f       	subi	r25, 0xFF	; 255
    1102:	c9 f7       	brne	.-14     	; 0x10f6 <__divsf3_pse+0x74>
    1104:	88 0f       	add	r24, r24
    1106:	91 1d       	adc	r25, r1
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	97 f9       	bld	r25, 7
    110e:	08 95       	ret
    1110:	e1 e0       	ldi	r30, 0x01	; 1
    1112:	66 0f       	add	r22, r22
    1114:	77 1f       	adc	r23, r23
    1116:	88 1f       	adc	r24, r24
    1118:	bb 1f       	adc	r27, r27
    111a:	62 17       	cp	r22, r18
    111c:	73 07       	cpc	r23, r19
    111e:	84 07       	cpc	r24, r20
    1120:	ba 07       	cpc	r27, r26
    1122:	20 f0       	brcs	.+8      	; 0x112c <__divsf3_pse+0xaa>
    1124:	62 1b       	sub	r22, r18
    1126:	73 0b       	sbc	r23, r19
    1128:	84 0b       	sbc	r24, r20
    112a:	ba 0b       	sbc	r27, r26
    112c:	ee 1f       	adc	r30, r30
    112e:	88 f7       	brcc	.-30     	; 0x1112 <__divsf3_pse+0x90>
    1130:	e0 95       	com	r30
    1132:	08 95       	ret

00001134 <__fixsfsi>:
    1134:	04 d0       	rcall	.+8      	; 0x113e <__fixunssfsi>
    1136:	68 94       	set
    1138:	b1 11       	cpse	r27, r1
    113a:	9c c0       	rjmp	.+312    	; 0x1274 <__fp_szero>
    113c:	08 95       	ret

0000113e <__fixunssfsi>:
    113e:	7f d0       	rcall	.+254    	; 0x123e <__fp_splitA>
    1140:	88 f0       	brcs	.+34     	; 0x1164 <__fixunssfsi+0x26>
    1142:	9f 57       	subi	r25, 0x7F	; 127
    1144:	90 f0       	brcs	.+36     	; 0x116a <__fixunssfsi+0x2c>
    1146:	b9 2f       	mov	r27, r25
    1148:	99 27       	eor	r25, r25
    114a:	b7 51       	subi	r27, 0x17	; 23
    114c:	a0 f0       	brcs	.+40     	; 0x1176 <__fixunssfsi+0x38>
    114e:	d1 f0       	breq	.+52     	; 0x1184 <__fixunssfsi+0x46>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	1a f0       	brmi	.+6      	; 0x1160 <__fixunssfsi+0x22>
    115a:	ba 95       	dec	r27
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__fixunssfsi+0x12>
    115e:	12 c0       	rjmp	.+36     	; 0x1184 <__fixunssfsi+0x46>
    1160:	b1 30       	cpi	r27, 0x01	; 1
    1162:	81 f0       	breq	.+32     	; 0x1184 <__fixunssfsi+0x46>
    1164:	86 d0       	rcall	.+268    	; 0x1272 <__fp_zero>
    1166:	b1 e0       	ldi	r27, 0x01	; 1
    1168:	08 95       	ret
    116a:	83 c0       	rjmp	.+262    	; 0x1272 <__fp_zero>
    116c:	67 2f       	mov	r22, r23
    116e:	78 2f       	mov	r23, r24
    1170:	88 27       	eor	r24, r24
    1172:	b8 5f       	subi	r27, 0xF8	; 248
    1174:	39 f0       	breq	.+14     	; 0x1184 <__fixunssfsi+0x46>
    1176:	b9 3f       	cpi	r27, 0xF9	; 249
    1178:	cc f3       	brlt	.-14     	; 0x116c <__fixunssfsi+0x2e>
    117a:	86 95       	lsr	r24
    117c:	77 95       	ror	r23
    117e:	67 95       	ror	r22
    1180:	b3 95       	inc	r27
    1182:	d9 f7       	brne	.-10     	; 0x117a <__fixunssfsi+0x3c>
    1184:	3e f4       	brtc	.+14     	; 0x1194 <__fixunssfsi+0x56>
    1186:	90 95       	com	r25
    1188:	80 95       	com	r24
    118a:	70 95       	com	r23
    118c:	61 95       	neg	r22
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	08 95       	ret

00001196 <__fp_cmp>:
    1196:	99 0f       	add	r25, r25
    1198:	00 08       	sbc	r0, r0
    119a:	55 0f       	add	r21, r21
    119c:	aa 0b       	sbc	r26, r26
    119e:	e0 e8       	ldi	r30, 0x80	; 128
    11a0:	fe ef       	ldi	r31, 0xFE	; 254
    11a2:	16 16       	cp	r1, r22
    11a4:	17 06       	cpc	r1, r23
    11a6:	e8 07       	cpc	r30, r24
    11a8:	f9 07       	cpc	r31, r25
    11aa:	c0 f0       	brcs	.+48     	; 0x11dc <__fp_cmp+0x46>
    11ac:	12 16       	cp	r1, r18
    11ae:	13 06       	cpc	r1, r19
    11b0:	e4 07       	cpc	r30, r20
    11b2:	f5 07       	cpc	r31, r21
    11b4:	98 f0       	brcs	.+38     	; 0x11dc <__fp_cmp+0x46>
    11b6:	62 1b       	sub	r22, r18
    11b8:	73 0b       	sbc	r23, r19
    11ba:	84 0b       	sbc	r24, r20
    11bc:	95 0b       	sbc	r25, r21
    11be:	39 f4       	brne	.+14     	; 0x11ce <__fp_cmp+0x38>
    11c0:	0a 26       	eor	r0, r26
    11c2:	61 f0       	breq	.+24     	; 0x11dc <__fp_cmp+0x46>
    11c4:	23 2b       	or	r18, r19
    11c6:	24 2b       	or	r18, r20
    11c8:	25 2b       	or	r18, r21
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <__fp_cmp+0x3e>
    11cc:	08 95       	ret
    11ce:	0a 26       	eor	r0, r26
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__fp_cmp+0x3e>
    11d2:	a1 40       	sbci	r26, 0x01	; 1
    11d4:	a6 95       	lsr	r26
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	81 1d       	adc	r24, r1
    11da:	81 1d       	adc	r24, r1
    11dc:	08 95       	ret

000011de <__fp_inf>:
    11de:	97 f9       	bld	r25, 7
    11e0:	9f 67       	ori	r25, 0x7F	; 127
    11e2:	80 e8       	ldi	r24, 0x80	; 128
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	08 95       	ret

000011ea <__fp_nan>:
    11ea:	9f ef       	ldi	r25, 0xFF	; 255
    11ec:	80 ec       	ldi	r24, 0xC0	; 192
    11ee:	08 95       	ret

000011f0 <__fp_pscA>:
    11f0:	00 24       	eor	r0, r0
    11f2:	0a 94       	dec	r0
    11f4:	16 16       	cp	r1, r22
    11f6:	17 06       	cpc	r1, r23
    11f8:	18 06       	cpc	r1, r24
    11fa:	09 06       	cpc	r0, r25
    11fc:	08 95       	ret

000011fe <__fp_pscB>:
    11fe:	00 24       	eor	r0, r0
    1200:	0a 94       	dec	r0
    1202:	12 16       	cp	r1, r18
    1204:	13 06       	cpc	r1, r19
    1206:	14 06       	cpc	r1, r20
    1208:	05 06       	cpc	r0, r21
    120a:	08 95       	ret

0000120c <__fp_round>:
    120c:	09 2e       	mov	r0, r25
    120e:	03 94       	inc	r0
    1210:	00 0c       	add	r0, r0
    1212:	11 f4       	brne	.+4      	; 0x1218 <__fp_round+0xc>
    1214:	88 23       	and	r24, r24
    1216:	52 f0       	brmi	.+20     	; 0x122c <__fp_round+0x20>
    1218:	bb 0f       	add	r27, r27
    121a:	40 f4       	brcc	.+16     	; 0x122c <__fp_round+0x20>
    121c:	bf 2b       	or	r27, r31
    121e:	11 f4       	brne	.+4      	; 0x1224 <__fp_round+0x18>
    1220:	60 ff       	sbrs	r22, 0
    1222:	04 c0       	rjmp	.+8      	; 0x122c <__fp_round+0x20>
    1224:	6f 5f       	subi	r22, 0xFF	; 255
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	8f 4f       	sbci	r24, 0xFF	; 255
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	08 95       	ret

0000122e <__fp_split3>:
    122e:	57 fd       	sbrc	r21, 7
    1230:	90 58       	subi	r25, 0x80	; 128
    1232:	44 0f       	add	r20, r20
    1234:	55 1f       	adc	r21, r21
    1236:	59 f0       	breq	.+22     	; 0x124e <__fp_splitA+0x10>
    1238:	5f 3f       	cpi	r21, 0xFF	; 255
    123a:	71 f0       	breq	.+28     	; 0x1258 <__fp_splitA+0x1a>
    123c:	47 95       	ror	r20

0000123e <__fp_splitA>:
    123e:	88 0f       	add	r24, r24
    1240:	97 fb       	bst	r25, 7
    1242:	99 1f       	adc	r25, r25
    1244:	61 f0       	breq	.+24     	; 0x125e <__fp_splitA+0x20>
    1246:	9f 3f       	cpi	r25, 0xFF	; 255
    1248:	79 f0       	breq	.+30     	; 0x1268 <__fp_splitA+0x2a>
    124a:	87 95       	ror	r24
    124c:	08 95       	ret
    124e:	12 16       	cp	r1, r18
    1250:	13 06       	cpc	r1, r19
    1252:	14 06       	cpc	r1, r20
    1254:	55 1f       	adc	r21, r21
    1256:	f2 cf       	rjmp	.-28     	; 0x123c <__fp_split3+0xe>
    1258:	46 95       	lsr	r20
    125a:	f1 df       	rcall	.-30     	; 0x123e <__fp_splitA>
    125c:	08 c0       	rjmp	.+16     	; 0x126e <__fp_splitA+0x30>
    125e:	16 16       	cp	r1, r22
    1260:	17 06       	cpc	r1, r23
    1262:	18 06       	cpc	r1, r24
    1264:	99 1f       	adc	r25, r25
    1266:	f1 cf       	rjmp	.-30     	; 0x124a <__fp_splitA+0xc>
    1268:	86 95       	lsr	r24
    126a:	71 05       	cpc	r23, r1
    126c:	61 05       	cpc	r22, r1
    126e:	08 94       	sec
    1270:	08 95       	ret

00001272 <__fp_zero>:
    1272:	e8 94       	clt

00001274 <__fp_szero>:
    1274:	bb 27       	eor	r27, r27
    1276:	66 27       	eor	r22, r22
    1278:	77 27       	eor	r23, r23
    127a:	cb 01       	movw	r24, r22
    127c:	97 f9       	bld	r25, 7
    127e:	08 95       	ret

00001280 <__gesf2>:
    1280:	8a df       	rcall	.-236    	; 0x1196 <__fp_cmp>
    1282:	08 f4       	brcc	.+2      	; 0x1286 <__gesf2+0x6>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	08 95       	ret

00001288 <__mulsf3>:
    1288:	0b d0       	rcall	.+22     	; 0x12a0 <__mulsf3x>
    128a:	c0 cf       	rjmp	.-128    	; 0x120c <__fp_round>
    128c:	b1 df       	rcall	.-158    	; 0x11f0 <__fp_pscA>
    128e:	28 f0       	brcs	.+10     	; 0x129a <__mulsf3+0x12>
    1290:	b6 df       	rcall	.-148    	; 0x11fe <__fp_pscB>
    1292:	18 f0       	brcs	.+6      	; 0x129a <__mulsf3+0x12>
    1294:	95 23       	and	r25, r21
    1296:	09 f0       	breq	.+2      	; 0x129a <__mulsf3+0x12>
    1298:	a2 cf       	rjmp	.-188    	; 0x11de <__fp_inf>
    129a:	a7 cf       	rjmp	.-178    	; 0x11ea <__fp_nan>
    129c:	11 24       	eor	r1, r1
    129e:	ea cf       	rjmp	.-44     	; 0x1274 <__fp_szero>

000012a0 <__mulsf3x>:
    12a0:	c6 df       	rcall	.-116    	; 0x122e <__fp_split3>
    12a2:	a0 f3       	brcs	.-24     	; 0x128c <__mulsf3+0x4>

000012a4 <__mulsf3_pse>:
    12a4:	95 9f       	mul	r25, r21
    12a6:	d1 f3       	breq	.-12     	; 0x129c <__mulsf3+0x14>
    12a8:	95 0f       	add	r25, r21
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	55 1f       	adc	r21, r21
    12ae:	62 9f       	mul	r22, r18
    12b0:	f0 01       	movw	r30, r0
    12b2:	72 9f       	mul	r23, r18
    12b4:	bb 27       	eor	r27, r27
    12b6:	f0 0d       	add	r31, r0
    12b8:	b1 1d       	adc	r27, r1
    12ba:	63 9f       	mul	r22, r19
    12bc:	aa 27       	eor	r26, r26
    12be:	f0 0d       	add	r31, r0
    12c0:	b1 1d       	adc	r27, r1
    12c2:	aa 1f       	adc	r26, r26
    12c4:	64 9f       	mul	r22, r20
    12c6:	66 27       	eor	r22, r22
    12c8:	b0 0d       	add	r27, r0
    12ca:	a1 1d       	adc	r26, r1
    12cc:	66 1f       	adc	r22, r22
    12ce:	82 9f       	mul	r24, r18
    12d0:	22 27       	eor	r18, r18
    12d2:	b0 0d       	add	r27, r0
    12d4:	a1 1d       	adc	r26, r1
    12d6:	62 1f       	adc	r22, r18
    12d8:	73 9f       	mul	r23, r19
    12da:	b0 0d       	add	r27, r0
    12dc:	a1 1d       	adc	r26, r1
    12de:	62 1f       	adc	r22, r18
    12e0:	83 9f       	mul	r24, r19
    12e2:	a0 0d       	add	r26, r0
    12e4:	61 1d       	adc	r22, r1
    12e6:	22 1f       	adc	r18, r18
    12e8:	74 9f       	mul	r23, r20
    12ea:	33 27       	eor	r19, r19
    12ec:	a0 0d       	add	r26, r0
    12ee:	61 1d       	adc	r22, r1
    12f0:	23 1f       	adc	r18, r19
    12f2:	84 9f       	mul	r24, r20
    12f4:	60 0d       	add	r22, r0
    12f6:	21 1d       	adc	r18, r1
    12f8:	82 2f       	mov	r24, r18
    12fa:	76 2f       	mov	r23, r22
    12fc:	6a 2f       	mov	r22, r26
    12fe:	11 24       	eor	r1, r1
    1300:	9f 57       	subi	r25, 0x7F	; 127
    1302:	50 40       	sbci	r21, 0x00	; 0
    1304:	8a f0       	brmi	.+34     	; 0x1328 <__mulsf3_pse+0x84>
    1306:	e1 f0       	breq	.+56     	; 0x1340 <__mulsf3_pse+0x9c>
    1308:	88 23       	and	r24, r24
    130a:	4a f0       	brmi	.+18     	; 0x131e <__mulsf3_pse+0x7a>
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	bb 1f       	adc	r27, r27
    1312:	66 1f       	adc	r22, r22
    1314:	77 1f       	adc	r23, r23
    1316:	88 1f       	adc	r24, r24
    1318:	91 50       	subi	r25, 0x01	; 1
    131a:	50 40       	sbci	r21, 0x00	; 0
    131c:	a9 f7       	brne	.-22     	; 0x1308 <__mulsf3_pse+0x64>
    131e:	9e 3f       	cpi	r25, 0xFE	; 254
    1320:	51 05       	cpc	r21, r1
    1322:	70 f0       	brcs	.+28     	; 0x1340 <__mulsf3_pse+0x9c>
    1324:	5c cf       	rjmp	.-328    	; 0x11de <__fp_inf>
    1326:	a6 cf       	rjmp	.-180    	; 0x1274 <__fp_szero>
    1328:	5f 3f       	cpi	r21, 0xFF	; 255
    132a:	ec f3       	brlt	.-6      	; 0x1326 <__mulsf3_pse+0x82>
    132c:	98 3e       	cpi	r25, 0xE8	; 232
    132e:	dc f3       	brlt	.-10     	; 0x1326 <__mulsf3_pse+0x82>
    1330:	86 95       	lsr	r24
    1332:	77 95       	ror	r23
    1334:	67 95       	ror	r22
    1336:	b7 95       	ror	r27
    1338:	f7 95       	ror	r31
    133a:	e7 95       	ror	r30
    133c:	9f 5f       	subi	r25, 0xFF	; 255
    133e:	c1 f7       	brne	.-16     	; 0x1330 <__mulsf3_pse+0x8c>
    1340:	fe 2b       	or	r31, r30
    1342:	88 0f       	add	r24, r24
    1344:	91 1d       	adc	r25, r1
    1346:	96 95       	lsr	r25
    1348:	87 95       	ror	r24
    134a:	97 f9       	bld	r25, 7
    134c:	08 95       	ret

0000134e <__tablejump2__>:
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	00 24       	eor	r0, r0
    1354:	00 1c       	adc	r0, r0
    1356:	0b be       	out	0x3b, r0	; 59
    1358:	07 90       	elpm	r0, Z+
    135a:	f6 91       	elpm	r31, Z
    135c:	e0 2d       	mov	r30, r0
    135e:	09 94       	ijmp

00001360 <_exit>:
    1360:	f8 94       	cli

00001362 <__stop_program>:
    1362:	ff cf       	rjmp	.-2      	; 0x1362 <__stop_program>
