
Hangman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000ea4  00800100  00001144  000011d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001144  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800fa4  00800fa4  0000207c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d93  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7e  00000000  00000000  00003fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001241  00000000  00000000  00004b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00005db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e8  00000000  00000000  00006130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e45  00000000  00000000  00006a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000785d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	00 00       	nop
       4:	aa c0       	rjmp	.+340    	; 0x15a <__bad_interrupt>
       6:	00 00       	nop
       8:	a8 c0       	rjmp	.+336    	; 0x15a <__bad_interrupt>
       a:	00 00       	nop
       c:	a6 c0       	rjmp	.+332    	; 0x15a <__bad_interrupt>
       e:	00 00       	nop
      10:	a4 c0       	rjmp	.+328    	; 0x15a <__bad_interrupt>
      12:	00 00       	nop
      14:	a2 c0       	rjmp	.+324    	; 0x15a <__bad_interrupt>
      16:	00 00       	nop
      18:	a0 c0       	rjmp	.+320    	; 0x15a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9e c0       	rjmp	.+316    	; 0x15a <__bad_interrupt>
      1e:	00 00       	nop
      20:	9c c0       	rjmp	.+312    	; 0x15a <__bad_interrupt>
      22:	00 00       	nop
      24:	9a c0       	rjmp	.+308    	; 0x15a <__bad_interrupt>
      26:	00 00       	nop
      28:	98 c0       	rjmp	.+304    	; 0x15a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	96 c0       	rjmp	.+300    	; 0x15a <__bad_interrupt>
      2e:	00 00       	nop
      30:	94 c0       	rjmp	.+296    	; 0x15a <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c1       	rjmp	.+576    	; 0x276 <__vector_13>
      36:	00 00       	nop
      38:	90 c0       	rjmp	.+288    	; 0x15a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8e c0       	rjmp	.+284    	; 0x15a <__bad_interrupt>
      3e:	00 00       	nop
      40:	8c c0       	rjmp	.+280    	; 0x15a <__bad_interrupt>
      42:	00 00       	nop
      44:	8a c0       	rjmp	.+276    	; 0x15a <__bad_interrupt>
      46:	00 00       	nop
      48:	88 c0       	rjmp	.+272    	; 0x15a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	86 c0       	rjmp	.+268    	; 0x15a <__bad_interrupt>
      4e:	00 00       	nop
      50:	84 c0       	rjmp	.+264    	; 0x15a <__bad_interrupt>
      52:	00 00       	nop
      54:	82 c0       	rjmp	.+260    	; 0x15a <__bad_interrupt>
      56:	00 00       	nop
      58:	80 c0       	rjmp	.+256    	; 0x15a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7e c0       	rjmp	.+252    	; 0x15a <__bad_interrupt>
      5e:	00 00       	nop
      60:	7c c0       	rjmp	.+248    	; 0x15a <__bad_interrupt>
      62:	00 00       	nop
      64:	7a c0       	rjmp	.+244    	; 0x15a <__bad_interrupt>
      66:	00 00       	nop
      68:	78 c0       	rjmp	.+240    	; 0x15a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	76 c0       	rjmp	.+236    	; 0x15a <__bad_interrupt>
      6e:	00 00       	nop
      70:	74 c0       	rjmp	.+232    	; 0x15a <__bad_interrupt>
      72:	00 00       	nop
      74:	72 c0       	rjmp	.+228    	; 0x15a <__bad_interrupt>
      76:	00 00       	nop
      78:	70 c0       	rjmp	.+224    	; 0x15a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6e c0       	rjmp	.+220    	; 0x15a <__bad_interrupt>
      7e:	00 00       	nop
      80:	6c c0       	rjmp	.+216    	; 0x15a <__bad_interrupt>
      82:	00 00       	nop
      84:	6a c0       	rjmp	.+212    	; 0x15a <__bad_interrupt>
      86:	00 00       	nop
      88:	68 c0       	rjmp	.+208    	; 0x15a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 01       	movw	r30, r10
      8e:	1e 03       	fmul	r17, r22
      90:	1e 03       	fmul	r17, r22
      92:	1e 03       	fmul	r17, r22
      94:	1e 03       	fmul	r17, r22
      96:	1e 03       	fmul	r17, r22
      98:	1e 03       	fmul	r17, r22
      9a:	1e 03       	fmul	r17, r22
      9c:	1e 03       	fmul	r17, r22
      9e:	1e 03       	fmul	r17, r22
      a0:	1e 03       	fmul	r17, r22
      a2:	1e 03       	fmul	r17, r22
      a4:	1e 03       	fmul	r17, r22
      a6:	1e 03       	fmul	r17, r22
      a8:	1e 03       	fmul	r17, r22
      aa:	1e 03       	fmul	r17, r22
      ac:	1e 03       	fmul	r17, r22
      ae:	1e 03       	fmul	r17, r22
      b0:	1e 03       	fmul	r17, r22
      b2:	1e 03       	fmul	r17, r22
      b4:	1e 03       	fmul	r17, r22
      b6:	1e 03       	fmul	r17, r22
      b8:	1e 03       	fmul	r17, r22
      ba:	1e 03       	fmul	r17, r22
      bc:	1e 03       	fmul	r17, r22
      be:	1e 03       	fmul	r17, r22
      c0:	1e 03       	fmul	r17, r22
      c2:	1e 03       	fmul	r17, r22
      c4:	1e 03       	fmul	r17, r22
      c6:	1e 03       	fmul	r17, r22
      c8:	1e 03       	fmul	r17, r22
      ca:	1e 03       	fmul	r17, r22
      cc:	1e 03       	fmul	r17, r22
      ce:	1e 03       	fmul	r17, r22
      d0:	1e 03       	fmul	r17, r22
      d2:	1e 03       	fmul	r17, r22
      d4:	1e 03       	fmul	r17, r22
      d6:	1e 03       	fmul	r17, r22
      d8:	1e 03       	fmul	r17, r22
      da:	1e 03       	fmul	r17, r22
      dc:	1e 03       	fmul	r17, r22
      de:	1e 03       	fmul	r17, r22
      e0:	1e 03       	fmul	r17, r22
      e2:	1e 03       	fmul	r17, r22
      e4:	1e 03       	fmul	r17, r22
      e6:	1e 03       	fmul	r17, r22
      e8:	1e 03       	fmul	r17, r22
      ea:	1e 03       	fmul	r17, r22
      ec:	1e 03       	fmul	r17, r22
      ee:	fb 01       	movw	r30, r22
      f0:	01 02       	muls	r16, r17
      f2:	24 02       	muls	r18, r20
      f4:	47 02       	muls	r20, r23
      f6:	6a 02       	muls	r22, r26
      f8:	8d 02       	muls	r24, r29
      fa:	b0 02       	muls	r27, r16
      fc:	d3 02       	muls	r29, r19
      fe:	f7 02       	muls	r31, r23
     100:	94 03       	fmuls	r17, r20
     102:	a0 03       	fmuls	r18, r16
     104:	af 03       	fmulsu	r18, r23
     106:	be 03       	fmulsu	r19, r22
     108:	cd 03       	fmulsu	r20, r21
     10a:	dc 03       	fmulsu	r21, r20
     10c:	ea 03       	fmulsu	r22, r18
     10e:	f6 03       	fmuls	r23, r22
     110:	13 04       	cpc	r1, r3
     112:	04 05       	cpc	r16, r4
     114:	08 05       	cpc	r16, r8
     116:	39 05       	cpc	r19, r9
     118:	49 05       	cpc	r20, r9
     11a:	6c 05       	cpc	r22, r12
     11c:	7b 05       	cpc	r23, r11
     11e:	86 05       	cpc	r24, r6

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d0 e4       	ldi	r29, 0x40	; 64
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	1f e0       	ldi	r17, 0x0F	; 15
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	e4 e4       	ldi	r30, 0x44	; 68
     134:	f1 e1       	ldi	r31, 0x11	; 17
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a4 3a       	cpi	r26, 0xA4	; 164
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
     146:	2f e0       	ldi	r18, 0x0F	; 15
     148:	a4 ea       	ldi	r26, 0xA4	; 164
     14a:	bf e0       	ldi	r27, 0x0F	; 15
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a7 3e       	cpi	r26, 0xE7	; 231
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	d2 d5       	rcall	.+2980   	; 0xcfc <main>
     158:	f3 c7       	rjmp	.+4070   	; 0x1140 <_exit>

0000015a <__bad_interrupt>:
     15a:	52 cf       	rjmp	.-348    	; 0x0 <__vectors>

0000015c <delay_ms>:
	set_PWM(0);
}

void PWM_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
     15c:	18 16       	cp	r1, r24
     15e:	19 06       	cpc	r1, r25
     160:	5c f0       	brlt	.+22     	; 0x178 <delay_ms+0x1c>
     162:	08 95       	ret
     164:	00 00       	nop
     166:	21 50       	subi	r18, 0x01	; 1
     168:	31 09       	sbc	r19, r1
     16a:	e1 f7       	brne	.-8      	; 0x164 <delay_ms+0x8>
     16c:	4f 5f       	subi	r20, 0xFF	; 255
     16e:	5f 4f       	sbci	r21, 0xFF	; 255
     170:	84 17       	cp	r24, r20
     172:	95 07       	cpc	r25, r21
     174:	19 f4       	brne	.+6      	; 0x17c <delay_ms+0x20>
     176:	08 95       	ret
     178:	40 e0       	ldi	r20, 0x00	; 0
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	27 e0       	ldi	r18, 0x07	; 7
     17e:	33 e0       	ldi	r19, 0x03	; 3
     180:	f1 cf       	rjmp	.-30     	; 0x164 <delay_ms+0x8>

00000182 <LCD_WriteCommand>:
     182:	10 98       	cbi	0x02, 0	; 2
     184:	8b b9       	out	0x0b, r24	; 11
     186:	11 9a       	sbi	0x02, 1	; 2
     188:	00 00       	nop
     18a:	11 98       	cbi	0x02, 1	; 2
     18c:	82 e0       	ldi	r24, 0x02	; 2
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	e5 cf       	rjmp	.-54     	; 0x15c <delay_ms>
     192:	08 95       	ret

00000194 <LCD_ClearScreen>:
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	f5 cf       	rjmp	.-22     	; 0x182 <LCD_WriteCommand>
     198:	08 95       	ret

0000019a <LCD_Cursor>:
     19a:	81 31       	cpi	r24, 0x11	; 17
     19c:	18 f4       	brcc	.+6      	; 0x1a4 <LCD_Cursor+0xa>
     19e:	81 58       	subi	r24, 0x81	; 129
     1a0:	f0 cf       	rjmp	.-32     	; 0x182 <LCD_WriteCommand>
     1a2:	08 95       	ret
     1a4:	81 55       	subi	r24, 0x51	; 81
     1a6:	ed cf       	rjmp	.-38     	; 0x182 <LCD_WriteCommand>
     1a8:	08 95       	ret

000001aa <LCD_init>:
     1aa:	84 e6       	ldi	r24, 0x64	; 100
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	d6 df       	rcall	.-84     	; 0x15c <delay_ms>
     1b0:	88 e3       	ldi	r24, 0x38	; 56
     1b2:	e7 df       	rcall	.-50     	; 0x182 <LCD_WriteCommand>
     1b4:	86 e0       	ldi	r24, 0x06	; 6
     1b6:	e5 df       	rcall	.-54     	; 0x182 <LCD_WriteCommand>
     1b8:	8f e0       	ldi	r24, 0x0F	; 15
     1ba:	e3 df       	rcall	.-58     	; 0x182 <LCD_WriteCommand>
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	e1 df       	rcall	.-62     	; 0x182 <LCD_WriteCommand>
     1c0:	8a e0       	ldi	r24, 0x0A	; 10
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	cb cf       	rjmp	.-106    	; 0x15c <delay_ms>
     1c6:	08 95       	ret

000001c8 <LCD_WriteData>:
     1c8:	10 9a       	sbi	0x02, 0	; 2
     1ca:	8b b9       	out	0x0b, r24	; 11
     1cc:	11 9a       	sbi	0x02, 1	; 2
     1ce:	00 00       	nop
     1d0:	11 98       	cbi	0x02, 1	; 2
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	c2 cf       	rjmp	.-124    	; 0x15c <delay_ms>
     1d8:	08 95       	ret

000001da <LCD_DisplayString>:
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	18 2f       	mov	r17, r24
     1e4:	eb 01       	movw	r28, r22
     1e6:	d6 df       	rcall	.-84     	; 0x194 <LCD_ClearScreen>
     1e8:	88 81       	ld	r24, Y
     1ea:	88 23       	and	r24, r24
     1ec:	51 f0       	breq	.+20     	; 0x202 <LCD_DisplayString+0x28>
     1ee:	01 e0       	ldi	r16, 0x01	; 1
     1f0:	01 0f       	add	r16, r17
     1f2:	81 2f       	mov	r24, r17
     1f4:	d2 df       	rcall	.-92     	; 0x19a <LCD_Cursor>
     1f6:	89 91       	ld	r24, Y+
     1f8:	e7 df       	rcall	.-50     	; 0x1c8 <LCD_WriteData>
     1fa:	10 2f       	mov	r17, r16
     1fc:	88 81       	ld	r24, Y
     1fe:	81 11       	cpse	r24, r1
     200:	f6 cf       	rjmp	.-20     	; 0x1ee <LCD_DisplayString+0x14>
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	08 95       	ret

0000020c <TimerSet>:
     20c:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <_avr_timer_M>
     210:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <_avr_timer_M+0x1>
     214:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_avr_timer_M+0x2>
     218:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_avr_timer_M+0x3>
     21c:	60 93 dd 0f 	sts	0x0FDD, r22	; 0x800fdd <_avr_timer_cntcurr>
     220:	70 93 de 0f 	sts	0x0FDE, r23	; 0x800fde <_avr_timer_cntcurr+0x1>
     224:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <_avr_timer_cntcurr+0x2>
     228:	90 93 e0 0f 	sts	0x0FE0, r25	; 0x800fe0 <_avr_timer_cntcurr+0x3>
     22c:	08 95       	ret

0000022e <TimerOn>:
     22e:	8b e0       	ldi	r24, 0x0B	; 11
     230:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     234:	8d e7       	ldi	r24, 0x7D	; 125
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     23c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     246:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     24a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     24e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_avr_timer_M>
     252:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_avr_timer_M+0x1>
     256:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <_avr_timer_M+0x2>
     25a:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <_avr_timer_M+0x3>
     25e:	80 93 dd 0f 	sts	0x0FDD, r24	; 0x800fdd <_avr_timer_cntcurr>
     262:	90 93 de 0f 	sts	0x0FDE, r25	; 0x800fde <_avr_timer_cntcurr+0x1>
     266:	a0 93 df 0f 	sts	0x0FDF, r26	; 0x800fdf <_avr_timer_cntcurr+0x2>
     26a:	b0 93 e0 0f 	sts	0x0FE0, r27	; 0x800fe0 <_avr_timer_cntcurr+0x3>
     26e:	8f b7       	in	r24, 0x3f	; 63
     270:	80 68       	ori	r24, 0x80	; 128
     272:	8f bf       	out	0x3f, r24	; 63
     274:	08 95       	ret

00000276 <__vector_13>:
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	8f 93       	push	r24
     282:	9f 93       	push	r25
     284:	af 93       	push	r26
     286:	bf 93       	push	r27
     288:	80 91 dd 0f 	lds	r24, 0x0FDD	; 0x800fdd <_avr_timer_cntcurr>
     28c:	90 91 de 0f 	lds	r25, 0x0FDE	; 0x800fde <_avr_timer_cntcurr+0x1>
     290:	a0 91 df 0f 	lds	r26, 0x0FDF	; 0x800fdf <_avr_timer_cntcurr+0x2>
     294:	b0 91 e0 0f 	lds	r27, 0x0FE0	; 0x800fe0 <_avr_timer_cntcurr+0x3>
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	a1 09       	sbc	r26, r1
     29c:	b1 09       	sbc	r27, r1
     29e:	80 93 dd 0f 	sts	0x0FDD, r24	; 0x800fdd <_avr_timer_cntcurr>
     2a2:	90 93 de 0f 	sts	0x0FDE, r25	; 0x800fde <_avr_timer_cntcurr+0x1>
     2a6:	a0 93 df 0f 	sts	0x0FDF, r26	; 0x800fdf <_avr_timer_cntcurr+0x2>
     2aa:	b0 93 e0 0f 	sts	0x0FE0, r27	; 0x800fe0 <_avr_timer_cntcurr+0x3>
     2ae:	89 2b       	or	r24, r25
     2b0:	8a 2b       	or	r24, r26
     2b2:	8b 2b       	or	r24, r27
     2b4:	99 f4       	brne	.+38     	; 0x2dc <__vector_13+0x66>
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	80 93 e1 0f 	sts	0x0FE1, r24	; 0x800fe1 <TimerFlag>
     2bc:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_avr_timer_M>
     2c0:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_avr_timer_M+0x1>
     2c4:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <_avr_timer_M+0x2>
     2c8:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <_avr_timer_M+0x3>
     2cc:	80 93 dd 0f 	sts	0x0FDD, r24	; 0x800fdd <_avr_timer_cntcurr>
     2d0:	90 93 de 0f 	sts	0x0FDE, r25	; 0x800fde <_avr_timer_cntcurr+0x1>
     2d4:	a0 93 df 0f 	sts	0x0FDF, r26	; 0x800fdf <_avr_timer_cntcurr+0x2>
     2d8:	b0 93 e0 0f 	sts	0x0FE0, r27	; 0x800fe0 <_avr_timer_cntcurr+0x3>
     2dc:	bf 91       	pop	r27
     2de:	af 91       	pop	r26
     2e0:	9f 91       	pop	r25
     2e2:	8f 91       	pop	r24
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <GetKeypadKey>:
     2ee:	8f ee       	ldi	r24, 0xEF	; 239
     2f0:	88 b9       	out	0x08, r24	; 8
     2f2:	00 00       	nop
     2f4:	30 9b       	sbis	0x06, 0	; 6
     2f6:	2e c0       	rjmp	.+92     	; 0x354 <GetKeypadKey+0x66>
     2f8:	31 9b       	sbis	0x06, 1	; 6
     2fa:	2e c0       	rjmp	.+92     	; 0x358 <GetKeypadKey+0x6a>
     2fc:	32 9b       	sbis	0x06, 2	; 6
     2fe:	2e c0       	rjmp	.+92     	; 0x35c <GetKeypadKey+0x6e>
     300:	33 9b       	sbis	0x06, 3	; 6
     302:	2e c0       	rjmp	.+92     	; 0x360 <GetKeypadKey+0x72>
     304:	8f ed       	ldi	r24, 0xDF	; 223
     306:	88 b9       	out	0x08, r24	; 8
     308:	00 00       	nop
     30a:	30 9b       	sbis	0x06, 0	; 6
     30c:	2b c0       	rjmp	.+86     	; 0x364 <GetKeypadKey+0x76>
     30e:	31 9b       	sbis	0x06, 1	; 6
     310:	2b c0       	rjmp	.+86     	; 0x368 <GetKeypadKey+0x7a>
     312:	32 9b       	sbis	0x06, 2	; 6
     314:	2b c0       	rjmp	.+86     	; 0x36c <GetKeypadKey+0x7e>
     316:	33 9b       	sbis	0x06, 3	; 6
     318:	2b c0       	rjmp	.+86     	; 0x370 <GetKeypadKey+0x82>
     31a:	8f eb       	ldi	r24, 0xBF	; 191
     31c:	88 b9       	out	0x08, r24	; 8
     31e:	00 00       	nop
     320:	30 9b       	sbis	0x06, 0	; 6
     322:	28 c0       	rjmp	.+80     	; 0x374 <GetKeypadKey+0x86>
     324:	31 9b       	sbis	0x06, 1	; 6
     326:	28 c0       	rjmp	.+80     	; 0x378 <GetKeypadKey+0x8a>
     328:	32 9b       	sbis	0x06, 2	; 6
     32a:	28 c0       	rjmp	.+80     	; 0x37c <GetKeypadKey+0x8e>
     32c:	33 9b       	sbis	0x06, 3	; 6
     32e:	28 c0       	rjmp	.+80     	; 0x380 <GetKeypadKey+0x92>
     330:	8f e7       	ldi	r24, 0x7F	; 127
     332:	88 b9       	out	0x08, r24	; 8
     334:	00 00       	nop
     336:	30 9b       	sbis	0x06, 0	; 6
     338:	25 c0       	rjmp	.+74     	; 0x384 <GetKeypadKey+0x96>
     33a:	31 9b       	sbis	0x06, 1	; 6
     33c:	25 c0       	rjmp	.+74     	; 0x388 <GetKeypadKey+0x9a>
     33e:	32 9b       	sbis	0x06, 2	; 6
     340:	25 c0       	rjmp	.+74     	; 0x38c <GetKeypadKey+0x9e>
     342:	33 9b       	sbis	0x06, 3	; 6
     344:	25 c0       	rjmp	.+74     	; 0x390 <GetKeypadKey+0xa2>
     346:	80 91 dc 0f 	lds	r24, 0x0FDC	; 0x800fdc <click>
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	80 93 dc 0f 	sts	0x0FDC, r24	; 0x800fdc <click>
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	08 95       	ret
     354:	81 e3       	ldi	r24, 0x31	; 49
     356:	08 95       	ret
     358:	84 e3       	ldi	r24, 0x34	; 52
     35a:	08 95       	ret
     35c:	87 e3       	ldi	r24, 0x37	; 55
     35e:	08 95       	ret
     360:	8a e2       	ldi	r24, 0x2A	; 42
     362:	08 95       	ret
     364:	82 e3       	ldi	r24, 0x32	; 50
     366:	08 95       	ret
     368:	85 e3       	ldi	r24, 0x35	; 53
     36a:	08 95       	ret
     36c:	88 e3       	ldi	r24, 0x38	; 56
     36e:	08 95       	ret
     370:	80 e3       	ldi	r24, 0x30	; 48
     372:	08 95       	ret
     374:	83 e3       	ldi	r24, 0x33	; 51
     376:	08 95       	ret
     378:	86 e3       	ldi	r24, 0x36	; 54
     37a:	08 95       	ret
     37c:	89 e3       	ldi	r24, 0x39	; 57
     37e:	08 95       	ret
     380:	83 e2       	ldi	r24, 0x23	; 35
     382:	08 95       	ret
     384:	81 e4       	ldi	r24, 0x41	; 65
     386:	08 95       	ret
     388:	82 e4       	ldi	r24, 0x42	; 66
     38a:	08 95       	ret
     38c:	83 e4       	ldi	r24, 0x43	; 67
     38e:	08 95       	ret
     390:	84 e4       	ldi	r24, 0x44	; 68
     392:	08 95       	ret

00000394 <KeypadTick>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	ec 01       	movw	r28, r24
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	91 05       	cpc	r25, r1
     39e:	c9 f0       	breq	.+50     	; 0x3d2 <KeypadTick+0x3e>
     3a0:	82 30       	cpi	r24, 0x02	; 2
     3a2:	91 05       	cpc	r25, r1
     3a4:	31 f0       	breq	.+12     	; 0x3b2 <KeypadTick+0x1e>
     3a6:	89 2b       	or	r24, r25
     3a8:	21 f0       	breq	.+8      	; 0x3b2 <KeypadTick+0x1e>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 e4 0f 	sts	0x0FE4, r24	; 0x800fe4 <State>
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <KeypadTick+0x22>
     3b2:	c1 e0       	ldi	r28, 0x01	; 1
     3b4:	d0 e0       	ldi	r29, 0x00	; 0
     3b6:	c1 30       	cpi	r28, 0x01	; 1
     3b8:	d1 05       	cpc	r29, r1
     3ba:	39 f0       	breq	.+14     	; 0x3ca <KeypadTick+0x36>
     3bc:	c2 30       	cpi	r28, 0x02	; 2
     3be:	d1 05       	cpc	r29, r1
     3c0:	41 f0       	breq	.+16     	; 0x3d2 <KeypadTick+0x3e>
     3c2:	20 97       	sbiw	r28, 0x00	; 0
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <KeypadTick+0x34>
     3c6:	54 c1       	rjmp	.+680    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     3c8:	35 c1       	rjmp	.+618    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     3ca:	91 df       	rcall	.-222    	; 0x2ee <GetKeypadKey>
     3cc:	80 93 e2 0f 	sts	0x0FE2, r24	; 0x800fe2 <x>
     3d0:	4f c1       	rjmp	.+670    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     3d2:	e0 91 e2 0f 	lds	r30, 0x0FE2	; 0x800fe2 <x>
     3d6:	8e 2f       	mov	r24, r30
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	8a 33       	cpi	r24, 0x3A	; 58
     3dc:	91 05       	cpc	r25, r1
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <KeypadTick+0x4e>
     3e0:	2d c1       	rjmp	.+602    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     3e2:	fc 01       	movw	r30, r24
     3e4:	ea 5b       	subi	r30, 0xBA	; 186
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	a2 c6       	rjmp	.+3396   	; 0x112e <__tablejump2__>
     3ea:	80 e2       	ldi	r24, 0x20	; 32
     3ec:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     3f0:	c2 e0       	ldi	r28, 0x02	; 2
     3f2:	d0 e0       	ldi	r29, 0x00	; 0
     3f4:	3d c1       	rjmp	.+634    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     3f6:	80 e2       	ldi	r24, 0x20	; 32
     3f8:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     3fc:	c2 e0       	ldi	r28, 0x02	; 2
     3fe:	d0 e0       	ldi	r29, 0x00	; 0
     400:	37 c1       	rjmp	.+622    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     402:	90 91 dc 0f 	lds	r25, 0x0FDC	; 0x800fdc <click>
     406:	8b ea       	ldi	r24, 0xAB	; 171
     408:	98 9f       	mul	r25, r24
     40a:	81 2d       	mov	r24, r1
     40c:	11 24       	eor	r1, r1
     40e:	86 95       	lsr	r24
     410:	28 2f       	mov	r18, r24
     412:	22 0f       	add	r18, r18
     414:	82 0f       	add	r24, r18
     416:	98 1b       	sub	r25, r24
     418:	91 30       	cpi	r25, 0x01	; 1
     41a:	31 f4       	brne	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41c:	81 e4       	ldi	r24, 0x41	; 65
     41e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     422:	c2 e0       	ldi	r28, 0x02	; 2
     424:	d0 e0       	ldi	r29, 0x00	; 0
     426:	24 c1       	rjmp	.+584    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     428:	92 30       	cpi	r25, 0x02	; 2
     42a:	31 f4       	brne	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     42c:	82 e4       	ldi	r24, 0x42	; 66
     42e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     432:	c2 e0       	ldi	r28, 0x02	; 2
     434:	d0 e0       	ldi	r29, 0x00	; 0
     436:	1c c1       	rjmp	.+568    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     438:	91 11       	cpse	r25, r1
     43a:	03 c1       	rjmp	.+518    	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     43c:	83 e4       	ldi	r24, 0x43	; 67
     43e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     442:	c2 e0       	ldi	r28, 0x02	; 2
     444:	d0 e0       	ldi	r29, 0x00	; 0
     446:	14 c1       	rjmp	.+552    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     448:	90 91 dc 0f 	lds	r25, 0x0FDC	; 0x800fdc <click>
     44c:	8b ea       	ldi	r24, 0xAB	; 171
     44e:	98 9f       	mul	r25, r24
     450:	81 2d       	mov	r24, r1
     452:	11 24       	eor	r1, r1
     454:	86 95       	lsr	r24
     456:	28 2f       	mov	r18, r24
     458:	22 0f       	add	r18, r18
     45a:	82 0f       	add	r24, r18
     45c:	98 1b       	sub	r25, r24
     45e:	91 30       	cpi	r25, 0x01	; 1
     460:	31 f4       	brne	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     462:	84 e4       	ldi	r24, 0x44	; 68
     464:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     468:	c2 e0       	ldi	r28, 0x02	; 2
     46a:	d0 e0       	ldi	r29, 0x00	; 0
     46c:	01 c1       	rjmp	.+514    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     46e:	92 30       	cpi	r25, 0x02	; 2
     470:	31 f4       	brne	.+12     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     472:	85 e4       	ldi	r24, 0x45	; 69
     474:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     478:	c2 e0       	ldi	r28, 0x02	; 2
     47a:	d0 e0       	ldi	r29, 0x00	; 0
     47c:	f9 c0       	rjmp	.+498    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     47e:	91 11       	cpse	r25, r1
     480:	e3 c0       	rjmp	.+454    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     482:	86 e4       	ldi	r24, 0x46	; 70
     484:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     488:	c2 e0       	ldi	r28, 0x02	; 2
     48a:	d0 e0       	ldi	r29, 0x00	; 0
     48c:	f1 c0       	rjmp	.+482    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     48e:	90 91 dc 0f 	lds	r25, 0x0FDC	; 0x800fdc <click>
     492:	8b ea       	ldi	r24, 0xAB	; 171
     494:	98 9f       	mul	r25, r24
     496:	81 2d       	mov	r24, r1
     498:	11 24       	eor	r1, r1
     49a:	86 95       	lsr	r24
     49c:	28 2f       	mov	r18, r24
     49e:	22 0f       	add	r18, r18
     4a0:	82 0f       	add	r24, r18
     4a2:	98 1b       	sub	r25, r24
     4a4:	91 30       	cpi	r25, 0x01	; 1
     4a6:	31 f4       	brne	.+12     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4a8:	87 e4       	ldi	r24, 0x47	; 71
     4aa:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     4ae:	c2 e0       	ldi	r28, 0x02	; 2
     4b0:	d0 e0       	ldi	r29, 0x00	; 0
     4b2:	de c0       	rjmp	.+444    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	31 f4       	brne	.+12     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4b8:	88 e4       	ldi	r24, 0x48	; 72
     4ba:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     4be:	c2 e0       	ldi	r28, 0x02	; 2
     4c0:	d0 e0       	ldi	r29, 0x00	; 0
     4c2:	d6 c0       	rjmp	.+428    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     4c4:	91 11       	cpse	r25, r1
     4c6:	c3 c0       	rjmp	.+390    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     4c8:	89 e4       	ldi	r24, 0x49	; 73
     4ca:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     4ce:	c2 e0       	ldi	r28, 0x02	; 2
     4d0:	d0 e0       	ldi	r29, 0x00	; 0
     4d2:	ce c0       	rjmp	.+412    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     4d4:	90 91 dc 0f 	lds	r25, 0x0FDC	; 0x800fdc <click>
     4d8:	8b ea       	ldi	r24, 0xAB	; 171
     4da:	98 9f       	mul	r25, r24
     4dc:	81 2d       	mov	r24, r1
     4de:	11 24       	eor	r1, r1
     4e0:	86 95       	lsr	r24
     4e2:	28 2f       	mov	r18, r24
     4e4:	22 0f       	add	r18, r18
     4e6:	82 0f       	add	r24, r18
     4e8:	98 1b       	sub	r25, r24
     4ea:	91 30       	cpi	r25, 0x01	; 1
     4ec:	31 f4       	brne	.+12     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4ee:	8a e4       	ldi	r24, 0x4A	; 74
     4f0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     4f4:	c2 e0       	ldi	r28, 0x02	; 2
     4f6:	d0 e0       	ldi	r29, 0x00	; 0
     4f8:	bb c0       	rjmp	.+374    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     4fa:	92 30       	cpi	r25, 0x02	; 2
     4fc:	31 f4       	brne	.+12     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     4fe:	8b e4       	ldi	r24, 0x4B	; 75
     500:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     504:	c2 e0       	ldi	r28, 0x02	; 2
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	b3 c0       	rjmp	.+358    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     50a:	91 11       	cpse	r25, r1
     50c:	a3 c0       	rjmp	.+326    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     50e:	8c e4       	ldi	r24, 0x4C	; 76
     510:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     514:	c2 e0       	ldi	r28, 0x02	; 2
     516:	d0 e0       	ldi	r29, 0x00	; 0
     518:	ab c0       	rjmp	.+342    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     51a:	90 91 dc 0f 	lds	r25, 0x0FDC	; 0x800fdc <click>
     51e:	8b ea       	ldi	r24, 0xAB	; 171
     520:	98 9f       	mul	r25, r24
     522:	81 2d       	mov	r24, r1
     524:	11 24       	eor	r1, r1
     526:	86 95       	lsr	r24
     528:	28 2f       	mov	r18, r24
     52a:	22 0f       	add	r18, r18
     52c:	82 0f       	add	r24, r18
     52e:	98 1b       	sub	r25, r24
     530:	91 30       	cpi	r25, 0x01	; 1
     532:	31 f4       	brne	.+12     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     534:	8d e4       	ldi	r24, 0x4D	; 77
     536:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     53a:	c2 e0       	ldi	r28, 0x02	; 2
     53c:	d0 e0       	ldi	r29, 0x00	; 0
     53e:	98 c0       	rjmp	.+304    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     540:	92 30       	cpi	r25, 0x02	; 2
     542:	31 f4       	brne	.+12     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     544:	8e e4       	ldi	r24, 0x4E	; 78
     546:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     54a:	c2 e0       	ldi	r28, 0x02	; 2
     54c:	d0 e0       	ldi	r29, 0x00	; 0
     54e:	90 c0       	rjmp	.+288    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     550:	91 11       	cpse	r25, r1
     552:	83 c0       	rjmp	.+262    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     554:	8f e4       	ldi	r24, 0x4F	; 79
     556:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     55a:	c2 e0       	ldi	r28, 0x02	; 2
     55c:	d0 e0       	ldi	r29, 0x00	; 0
     55e:	88 c0       	rjmp	.+272    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     560:	80 91 dc 0f 	lds	r24, 0x0FDC	; 0x800fdc <click>
     564:	83 70       	andi	r24, 0x03	; 3
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	31 f4       	brne	.+12     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     56a:	80 e5       	ldi	r24, 0x50	; 80
     56c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     570:	c2 e0       	ldi	r28, 0x02	; 2
     572:	d0 e0       	ldi	r29, 0x00	; 0
     574:	7d c0       	rjmp	.+250    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	31 f4       	brne	.+12     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     57a:	81 e5       	ldi	r24, 0x51	; 81
     57c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     580:	c2 e0       	ldi	r28, 0x02	; 2
     582:	d0 e0       	ldi	r29, 0x00	; 0
     584:	75 c0       	rjmp	.+234    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     586:	83 30       	cpi	r24, 0x03	; 3
     588:	31 f4       	brne	.+12     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     58a:	82 e5       	ldi	r24, 0x52	; 82
     58c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     590:	c2 e0       	ldi	r28, 0x02	; 2
     592:	d0 e0       	ldi	r29, 0x00	; 0
     594:	6d c0       	rjmp	.+218    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     596:	81 11       	cpse	r24, r1
     598:	63 c0       	rjmp	.+198    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
     59a:	83 e5       	ldi	r24, 0x53	; 83
     59c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5a0:	c2 e0       	ldi	r28, 0x02	; 2
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
     5a4:	65 c0       	rjmp	.+202    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     5a6:	90 91 dc 0f 	lds	r25, 0x0FDC	; 0x800fdc <click>
     5aa:	8b ea       	ldi	r24, 0xAB	; 171
     5ac:	98 9f       	mul	r25, r24
     5ae:	81 2d       	mov	r24, r1
     5b0:	11 24       	eor	r1, r1
     5b2:	86 95       	lsr	r24
     5b4:	28 2f       	mov	r18, r24
     5b6:	22 0f       	add	r18, r18
     5b8:	82 0f       	add	r24, r18
     5ba:	98 1b       	sub	r25, r24
     5bc:	91 30       	cpi	r25, 0x01	; 1
     5be:	31 f4       	brne	.+12     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5c0:	84 e5       	ldi	r24, 0x54	; 84
     5c2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5c6:	c2 e0       	ldi	r28, 0x02	; 2
     5c8:	d0 e0       	ldi	r29, 0x00	; 0
     5ca:	52 c0       	rjmp	.+164    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     5cc:	92 30       	cpi	r25, 0x02	; 2
     5ce:	31 f4       	brne	.+12     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5d0:	85 e5       	ldi	r24, 0x55	; 85
     5d2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5d6:	c2 e0       	ldi	r28, 0x02	; 2
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
     5da:	4a c0       	rjmp	.+148    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     5dc:	93 30       	cpi	r25, 0x03	; 3
     5de:	09 f0       	breq	.+2      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5e0:	42 c0       	rjmp	.+132    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     5e2:	86 e5       	ldi	r24, 0x56	; 86
     5e4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5e8:	c2 e0       	ldi	r28, 0x02	; 2
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
     5ec:	41 c0       	rjmp	.+130    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     5ee:	80 91 dc 0f 	lds	r24, 0x0FDC	; 0x800fdc <click>
     5f2:	83 70       	andi	r24, 0x03	; 3
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	31 f4       	brne	.+12     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5f8:	87 e5       	ldi	r24, 0x57	; 87
     5fa:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     5fe:	c2 e0       	ldi	r28, 0x02	; 2
     600:	d0 e0       	ldi	r29, 0x00	; 0
     602:	36 c0       	rjmp	.+108    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	31 f4       	brne	.+12     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     608:	88 e5       	ldi	r24, 0x58	; 88
     60a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     60e:	c2 e0       	ldi	r28, 0x02	; 2
     610:	d0 e0       	ldi	r29, 0x00	; 0
     612:	2e c0       	rjmp	.+92     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	31 f4       	brne	.+12     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     618:	89 e5       	ldi	r24, 0x59	; 89
     61a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     61e:	c2 e0       	ldi	r28, 0x02	; 2
     620:	d0 e0       	ldi	r29, 0x00	; 0
     622:	26 c0       	rjmp	.+76     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     624:	81 11       	cpse	r24, r1
     626:	22 c0       	rjmp	.+68     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     628:	8a e5       	ldi	r24, 0x5A	; 90
     62a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
     62e:	c2 e0       	ldi	r28, 0x02	; 2
     630:	d0 e0       	ldi	r29, 0x00	; 0
     632:	1e c0       	rjmp	.+60     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	80 93 e4 0f 	sts	0x0FE4, r24	; 0x800fe4 <State>
     63a:	1a c0       	rjmp	.+52     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     63c:	c2 e0       	ldi	r28, 0x02	; 2
     63e:	d0 e0       	ldi	r29, 0x00	; 0
     640:	17 c0       	rjmp	.+46     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     642:	c2 e0       	ldi	r28, 0x02	; 2
     644:	d0 e0       	ldi	r29, 0x00	; 0
     646:	14 c0       	rjmp	.+40     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     648:	c2 e0       	ldi	r28, 0x02	; 2
     64a:	d0 e0       	ldi	r29, 0x00	; 0
     64c:	11 c0       	rjmp	.+34     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     64e:	c2 e0       	ldi	r28, 0x02	; 2
     650:	d0 e0       	ldi	r29, 0x00	; 0
     652:	0e c0       	rjmp	.+28     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     654:	c2 e0       	ldi	r28, 0x02	; 2
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	0b c0       	rjmp	.+22     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     65a:	c2 e0       	ldi	r28, 0x02	; 2
     65c:	d0 e0       	ldi	r29, 0x00	; 0
     65e:	08 c0       	rjmp	.+16     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     660:	c2 e0       	ldi	r28, 0x02	; 2
     662:	d0 e0       	ldi	r29, 0x00	; 0
     664:	05 c0       	rjmp	.+10     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     666:	c2 e0       	ldi	r28, 0x02	; 2
     668:	d0 e0       	ldi	r29, 0x00	; 0
     66a:	02 c0       	rjmp	.+4      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     66c:	c2 e0       	ldi	r28, 0x02	; 2
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	ce 01       	movw	r24, r28
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <N5110_Cmnd>:
     678:	cf 93       	push	r28
     67a:	c8 2f       	mov	r28, r24
     67c:	29 98       	cbi	0x05, 1	; 5
     67e:	cd d3       	rcall	.+1946   	; 0xe1a <SPI_SS_Enable>
     680:	8c 2f       	mov	r24, r28
     682:	d7 d3       	rcall	.+1966   	; 0xe32 <SPI_Write>
     684:	29 9a       	sbi	0x05, 1	; 5
     686:	cb d3       	rcall	.+1942   	; 0xe1e <SPI_SS_Disable>
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <N5110_Reset>:
     68c:	28 98       	cbi	0x05, 0	; 5
     68e:	2f ef       	ldi	r18, 0xFF	; 255
     690:	80 e7       	ldi	r24, 0x70	; 112
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	21 50       	subi	r18, 0x01	; 1
     696:	80 40       	sbci	r24, 0x00	; 0
     698:	90 40       	sbci	r25, 0x00	; 0
     69a:	e1 f7       	brne	.-8      	; 0x694 <N5110_Reset+0x8>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <N5110_Reset+0x12>
     69e:	00 00       	nop
     6a0:	28 9a       	sbi	0x05, 0	; 5
     6a2:	08 95       	ret

000006a4 <N5110_init>:
     6a4:	f3 df       	rcall	.-26     	; 0x68c <N5110_Reset>
     6a6:	81 e2       	ldi	r24, 0x21	; 33
     6a8:	e7 df       	rcall	.-50     	; 0x678 <N5110_Cmnd>
     6aa:	80 ec       	ldi	r24, 0xC0	; 192
     6ac:	e5 df       	rcall	.-54     	; 0x678 <N5110_Cmnd>
     6ae:	87 e0       	ldi	r24, 0x07	; 7
     6b0:	e3 df       	rcall	.-58     	; 0x678 <N5110_Cmnd>
     6b2:	83 e1       	ldi	r24, 0x13	; 19
     6b4:	e1 df       	rcall	.-62     	; 0x678 <N5110_Cmnd>
     6b6:	80 e2       	ldi	r24, 0x20	; 32
     6b8:	df df       	rcall	.-66     	; 0x678 <N5110_Cmnd>
     6ba:	8c e0       	ldi	r24, 0x0C	; 12
     6bc:	dd cf       	rjmp	.-70     	; 0x678 <N5110_Cmnd>
     6be:	08 95       	ret

000006c0 <lcd_setXY>:
     6c0:	cf 93       	push	r28
     6c2:	c6 2f       	mov	r28, r22
     6c4:	d9 df       	rcall	.-78     	; 0x678 <N5110_Cmnd>
     6c6:	8c 2f       	mov	r24, r28
     6c8:	d7 df       	rcall	.-82     	; 0x678 <N5110_Cmnd>
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <N5110_clear>:
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	a3 d3       	rcall	.+1862   	; 0xe1a <SPI_SS_Enable>
     6d4:	29 9a       	sbi	0x05, 1	; 5
     6d6:	c8 ef       	ldi	r28, 0xF8	; 248
     6d8:	d1 e0       	ldi	r29, 0x01	; 1
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	aa d3       	rcall	.+1876   	; 0xe32 <SPI_Write>
     6de:	21 97       	sbiw	r28, 0x01	; 1
     6e0:	e1 f7       	brne	.-8      	; 0x6da <N5110_clear+0xc>
     6e2:	29 98       	cbi	0x05, 1	; 5
     6e4:	9c d3       	rcall	.+1848   	; 0xe1e <SPI_SS_Disable>
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <N5110_image>:
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	8c 01       	movw	r16, r24
     6f6:	91 d3       	rcall	.+1826   	; 0xe1a <SPI_SS_Enable>
     6f8:	29 9a       	sbi	0x05, 1	; 5
     6fa:	e8 01       	movw	r28, r16
     6fc:	08 50       	subi	r16, 0x08	; 8
     6fe:	1e 4f       	sbci	r17, 0xFE	; 254
     700:	89 91       	ld	r24, Y+
     702:	97 d3       	rcall	.+1838   	; 0xe32 <SPI_Write>
     704:	c0 17       	cp	r28, r16
     706:	d1 07       	cpc	r29, r17
     708:	d9 f7       	brne	.-10     	; 0x700 <N5110_image+0x14>
     70a:	29 98       	cbi	0x05, 1	; 5
     70c:	88 d3       	rcall	.+1808   	; 0xe1e <SPI_SS_Disable>
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <Nokia_Tick>:
     718:	89 30       	cpi	r24, 0x09	; 9
     71a:	91 05       	cpc	r25, r1
     71c:	08 f0       	brcs	.+2      	; 0x720 <Nokia_Tick+0x8>
     71e:	6d c0       	rjmp	.+218    	; 0x7fa <Nokia_Tick+0xe2>
     720:	fc 01       	movw	r30, r24
     722:	e0 58       	subi	r30, 0x80	; 128
     724:	ff 4f       	sbci	r31, 0xFF	; 255
     726:	03 c5       	rjmp	.+2566   	; 0x112e <__tablejump2__>
     728:	7c d3       	rcall	.+1784   	; 0xe22 <SPI_Init>
     72a:	bc df       	rcall	.-136    	; 0x6a4 <N5110_init>
     72c:	d0 df       	rcall	.-96     	; 0x6ce <N5110_clear>
     72e:	60 e8       	ldi	r22, 0x80	; 128
     730:	80 e4       	ldi	r24, 0x40	; 64
     732:	c6 df       	rcall	.-116    	; 0x6c0 <lcd_setXY>
     734:	8b ed       	ldi	r24, 0xDB	; 219
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	d9 df       	rcall	.-78     	; 0x6ec <N5110_image>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	08 95       	ret
     740:	20 91 db 0f 	lds	r18, 0x0FDB	; 0x800fdb <strike>
     744:	21 30       	cpi	r18, 0x01	; 1
     746:	09 f0       	breq	.+2      	; 0x74a <Nokia_Tick+0x32>
     748:	6e c0       	rjmp	.+220    	; 0x826 <Nokia_Tick+0x10e>
     74a:	c1 df       	rcall	.-126    	; 0x6ce <N5110_clear>
     74c:	60 e8       	ldi	r22, 0x80	; 128
     74e:	80 e4       	ldi	r24, 0x40	; 64
     750:	b7 df       	rcall	.-146    	; 0x6c0 <lcd_setXY>
     752:	8b ea       	ldi	r24, 0xAB	; 171
     754:	9d e0       	ldi	r25, 0x0D	; 13
     756:	ca df       	rcall	.-108    	; 0x6ec <N5110_image>
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	08 95       	ret
     75e:	20 91 db 0f 	lds	r18, 0x0FDB	; 0x800fdb <strike>
     762:	22 30       	cpi	r18, 0x02	; 2
     764:	09 f0       	breq	.+2      	; 0x768 <Nokia_Tick+0x50>
     766:	5f c0       	rjmp	.+190    	; 0x826 <Nokia_Tick+0x10e>
     768:	b2 df       	rcall	.-156    	; 0x6ce <N5110_clear>
     76a:	60 e8       	ldi	r22, 0x80	; 128
     76c:	80 e4       	ldi	r24, 0x40	; 64
     76e:	a8 df       	rcall	.-176    	; 0x6c0 <lcd_setXY>
     770:	83 eb       	ldi	r24, 0xB3	; 179
     772:	9b e0       	ldi	r25, 0x0B	; 11
     774:	bb df       	rcall	.-138    	; 0x6ec <N5110_image>
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	08 95       	ret
     77c:	20 91 db 0f 	lds	r18, 0x0FDB	; 0x800fdb <strike>
     780:	23 30       	cpi	r18, 0x03	; 3
     782:	09 f0       	breq	.+2      	; 0x786 <Nokia_Tick+0x6e>
     784:	50 c0       	rjmp	.+160    	; 0x826 <Nokia_Tick+0x10e>
     786:	a3 df       	rcall	.-186    	; 0x6ce <N5110_clear>
     788:	60 e8       	ldi	r22, 0x80	; 128
     78a:	80 e4       	ldi	r24, 0x40	; 64
     78c:	99 df       	rcall	.-206    	; 0x6c0 <lcd_setXY>
     78e:	8b eb       	ldi	r24, 0xBB	; 187
     790:	99 e0       	ldi	r25, 0x09	; 9
     792:	ac df       	rcall	.-168    	; 0x6ec <N5110_image>
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	08 95       	ret
     79a:	20 91 db 0f 	lds	r18, 0x0FDB	; 0x800fdb <strike>
     79e:	24 30       	cpi	r18, 0x04	; 4
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <Nokia_Tick+0x8c>
     7a2:	41 c0       	rjmp	.+130    	; 0x826 <Nokia_Tick+0x10e>
     7a4:	94 df       	rcall	.-216    	; 0x6ce <N5110_clear>
     7a6:	60 e8       	ldi	r22, 0x80	; 128
     7a8:	80 e4       	ldi	r24, 0x40	; 64
     7aa:	8a df       	rcall	.-236    	; 0x6c0 <lcd_setXY>
     7ac:	83 ec       	ldi	r24, 0xC3	; 195
     7ae:	97 e0       	ldi	r25, 0x07	; 7
     7b0:	9d df       	rcall	.-198    	; 0x6ec <N5110_image>
     7b2:	85 e0       	ldi	r24, 0x05	; 5
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	08 95       	ret
     7b8:	20 91 db 0f 	lds	r18, 0x0FDB	; 0x800fdb <strike>
     7bc:	25 30       	cpi	r18, 0x05	; 5
     7be:	99 f5       	brne	.+102    	; 0x826 <Nokia_Tick+0x10e>
     7c0:	86 df       	rcall	.-244    	; 0x6ce <N5110_clear>
     7c2:	60 e8       	ldi	r22, 0x80	; 128
     7c4:	80 e4       	ldi	r24, 0x40	; 64
     7c6:	7c df       	rcall	.-264    	; 0x6c0 <lcd_setXY>
     7c8:	8b ec       	ldi	r24, 0xCB	; 203
     7ca:	95 e0       	ldi	r25, 0x05	; 5
     7cc:	8f df       	rcall	.-226    	; 0x6ec <N5110_image>
     7ce:	86 e0       	ldi	r24, 0x06	; 6
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	08 95       	ret
     7d4:	20 91 db 0f 	lds	r18, 0x0FDB	; 0x800fdb <strike>
     7d8:	26 30       	cpi	r18, 0x06	; 6
     7da:	29 f5       	brne	.+74     	; 0x826 <Nokia_Tick+0x10e>
     7dc:	78 df       	rcall	.-272    	; 0x6ce <N5110_clear>
     7de:	60 e8       	ldi	r22, 0x80	; 128
     7e0:	80 e4       	ldi	r24, 0x40	; 64
     7e2:	6e df       	rcall	.-292    	; 0x6c0 <lcd_setXY>
     7e4:	83 ed       	ldi	r24, 0xD3	; 211
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	81 df       	rcall	.-254    	; 0x6ec <N5110_image>
     7ea:	0a c0       	rjmp	.+20     	; 0x800 <Nokia_Tick+0xe8>
     7ec:	80 91 da 0f 	lds	r24, 0x0FDA	; 0x800fda <counter>
     7f0:	85 31       	cpi	r24, 0x15	; 21
     7f2:	30 f0       	brcs	.+12     	; 0x800 <Nokia_Tick+0xe8>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	08 95       	ret
     7fa:	87 30       	cpi	r24, 0x07	; 7
     7fc:	91 05       	cpc	r25, r1
     7fe:	99 f4       	brne	.+38     	; 0x826 <Nokia_Tick+0x10e>
     800:	80 91 da 0f 	lds	r24, 0x0FDA	; 0x800fda <counter>
     804:	80 fd       	sbrc	r24, 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <Nokia_Tick+0xf4>
     808:	62 df       	rcall	.-316    	; 0x6ce <N5110_clear>
     80a:	06 c0       	rjmp	.+12     	; 0x818 <Nokia_Tick+0x100>
     80c:	60 e8       	ldi	r22, 0x80	; 128
     80e:	80 e4       	ldi	r24, 0x40	; 64
     810:	57 df       	rcall	.-338    	; 0x6c0 <lcd_setXY>
     812:	83 ed       	ldi	r24, 0xD3	; 211
     814:	93 e0       	ldi	r25, 0x03	; 3
     816:	6a df       	rcall	.-300    	; 0x6ec <N5110_image>
     818:	80 91 da 0f 	lds	r24, 0x0FDA	; 0x800fda <counter>
     81c:	8f 5f       	subi	r24, 0xFF	; 255
     81e:	80 93 da 0f 	sts	0x0FDA, r24	; 0x800fda <counter>
     822:	87 e0       	ldi	r24, 0x07	; 7
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	08 95       	ret

00000828 <set_PWM>:
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	6b 01       	movw	r12, r22
     832:	7c 01       	movw	r14, r24
     834:	9b 01       	movw	r18, r22
     836:	ac 01       	movw	r20, r24
     838:	60 91 a4 0f 	lds	r22, 0x0FA4	; 0x800fa4 <__data_end>
     83c:	70 91 a5 0f 	lds	r23, 0x0FA5	; 0x800fa5 <__data_end+0x1>
     840:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <__data_end+0x2>
     844:	90 91 a7 0f 	lds	r25, 0x0FA7	; 0x800fa7 <__data_end+0x3>
     848:	f9 d2       	rcall	.+1522   	; 0xe3c <__cmpsf2>
     84a:	88 23       	and	r24, r24
     84c:	09 f4       	brne	.+2      	; 0x850 <set_PWM+0x28>
     84e:	40 c0       	rjmp	.+128    	; 0x8d0 <set_PWM+0xa8>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	a9 01       	movw	r20, r18
     856:	c7 01       	movw	r24, r14
     858:	b6 01       	movw	r22, r12
     85a:	f0 d2       	rcall	.+1504   	; 0xe3c <__cmpsf2>
     85c:	81 11       	cpse	r24, r1
     85e:	04 c0       	rjmp	.+8      	; 0x868 <set_PWM+0x40>
     860:	85 b5       	in	r24, 0x25	; 37
     862:	88 70       	andi	r24, 0x08	; 8
     864:	85 bd       	out	0x25, r24	; 37
     866:	03 c0       	rjmp	.+6      	; 0x86e <set_PWM+0x46>
     868:	85 b5       	in	r24, 0x25	; 37
     86a:	83 60       	ori	r24, 0x03	; 3
     86c:	85 bd       	out	0x25, r24	; 37
     86e:	28 e5       	ldi	r18, 0x58	; 88
     870:	39 e3       	ldi	r19, 0x39	; 57
     872:	44 e7       	ldi	r20, 0x74	; 116
     874:	5f e3       	ldi	r21, 0x3F	; 63
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	e0 d2       	rcall	.+1472   	; 0xe3c <__cmpsf2>
     87c:	88 23       	and	r24, r24
     87e:	1c f4       	brge	.+6      	; 0x886 <set_PWM+0x5e>
     880:	8f ef       	ldi	r24, 0xFF	; 255
     882:	87 bd       	out	0x27, r24	; 39
     884:	1c c0       	rjmp	.+56     	; 0x8be <set_PWM+0x96>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	34 e2       	ldi	r19, 0x24	; 36
     88a:	44 ef       	ldi	r20, 0xF4	; 244
     88c:	56 e4       	ldi	r21, 0x46	; 70
     88e:	c7 01       	movw	r24, r14
     890:	b6 01       	movw	r22, r12
     892:	e6 d3       	rcall	.+1996   	; 0x1060 <__gesf2>
     894:	18 16       	cp	r1, r24
     896:	14 f4       	brge	.+4      	; 0x89c <set_PWM+0x74>
     898:	17 bc       	out	0x27, r1	; 39
     89a:	11 c0       	rjmp	.+34     	; 0x8be <set_PWM+0x96>
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	53 e4       	ldi	r21, 0x43	; 67
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	df d3       	rcall	.+1982   	; 0x1068 <__mulsf3>
     8aa:	9b 01       	movw	r18, r22
     8ac:	ac 01       	movw	r20, r24
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	74 e2       	ldi	r23, 0x24	; 36
     8b2:	84 ef       	ldi	r24, 0xF4	; 244
     8b4:	9a e4       	ldi	r25, 0x4A	; 74
     8b6:	c6 d2       	rcall	.+1420   	; 0xe44 <__divsf3>
     8b8:	2d d3       	rcall	.+1626   	; 0xf14 <__fixsfsi>
     8ba:	61 50       	subi	r22, 0x01	; 1
     8bc:	67 bd       	out	0x27, r22	; 39
     8be:	16 bc       	out	0x26, r1	; 38
     8c0:	c0 92 a4 0f 	sts	0x0FA4, r12	; 0x800fa4 <__data_end>
     8c4:	d0 92 a5 0f 	sts	0x0FA5, r13	; 0x800fa5 <__data_end+0x1>
     8c8:	e0 92 a6 0f 	sts	0x0FA6, r14	; 0x800fa6 <__data_end+0x2>
     8cc:	f0 92 a7 0f 	sts	0x0FA7, r15	; 0x800fa7 <__data_end+0x3>
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	08 95       	ret

000008da <WA_Tick>:
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	91 05       	cpc	r25, r1
     8de:	c1 f0       	breq	.+48     	; 0x910 <WA_Tick+0x36>
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	91 05       	cpc	r25, r1
     8e4:	41 f0       	breq	.+16     	; 0x8f6 <WA_Tick+0x1c>
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	59 f4       	brne	.+22     	; 0x900 <WA_Tick+0x26>
     8ea:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <letterFound>
     8ee:	88 23       	and	r24, r24
     8f0:	79 f0       	breq	.+30     	; 0x910 <WA_Tick+0x36>
     8f2:	12 9a       	sbi	0x02, 2	; 2
     8f4:	16 c0       	rjmp	.+44     	; 0x922 <WA_Tick+0x48>
     8f6:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <letterFound>
     8fa:	81 11       	cpse	r24, r1
     8fc:	20 c0       	rjmp	.+64     	; 0x93e <WA_Tick+0x64>
     8fe:	08 c0       	rjmp	.+16     	; 0x910 <WA_Tick+0x36>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	91 05       	cpc	r25, r1
     904:	71 f0       	breq	.+28     	; 0x922 <WA_Tick+0x48>
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	91 05       	cpc	r25, r1
     90a:	c9 f0       	breq	.+50     	; 0x93e <WA_Tick+0x64>
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	f1 f4       	brne	.+60     	; 0x94c <WA_Tick+0x72>
     910:	10 92 d8 0f 	sts	0x0FD8, r1	; 0x800fd8 <WA_Count>
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	cb 01       	movw	r24, r22
     91a:	86 df       	rcall	.-244    	; 0x828 <set_PWM>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	08 95       	ret
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	70 ed       	ldi	r23, 0xD0	; 208
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	94 e4       	ldi	r25, 0x44	; 68
     92a:	7e df       	rcall	.-260    	; 0x828 <set_PWM>
     92c:	80 91 d8 0f 	lds	r24, 0x0FD8	; 0x800fd8 <WA_Count>
     930:	8f 5f       	subi	r24, 0xFF	; 255
     932:	80 93 d8 0f 	sts	0x0FD8, r24	; 0x800fd8 <WA_Count>
     936:	12 9a       	sbi	0x02, 2	; 2
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	08 95       	ret
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	cb 01       	movw	r24, r22
     944:	71 df       	rcall	.-286    	; 0x828 <set_PWM>
     946:	12 98       	cbi	0x02, 2	; 2
     948:	82 e0       	ldi	r24, 0x02	; 2
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	08 95       	ret

0000094e <PWM_on>:
     94e:	81 e4       	ldi	r24, 0x41	; 65
     950:	84 bd       	out	0x24, r24	; 36
     952:	8b e0       	ldi	r24, 0x0B	; 11
     954:	85 bd       	out	0x25, r24	; 37
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	cb 01       	movw	r24, r22
     95c:	65 cf       	rjmp	.-310    	; 0x828 <set_PWM>
     95e:	08 95       	ret

00000960 <LCDBuildChar>:
unsigned char win = 0;



void LCDBuildChar(unsigned char loc, unsigned char *p)
{
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
	unsigned char i;
	if(loc<8) //If valid address
     968:	88 30       	cpi	r24, 0x08	; 8
     96a:	70 f4       	brcc	.+28     	; 0x988 <LCDBuildChar+0x28>
     96c:	8b 01       	movw	r16, r22
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
     96e:	88 0f       	add	r24, r24
     970:	88 0f       	add	r24, r24
     972:	88 0f       	add	r24, r24
     974:	80 5c       	subi	r24, 0xC0	; 192
     976:	05 dc       	rcall	.-2038   	; 0x182 <LCD_WriteCommand>
     978:	e8 01       	movw	r28, r16
     97a:	08 5f       	subi	r16, 0xF8	; 248
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
     97e:	89 91       	ld	r24, Y+
     980:	23 dc       	rcall	.-1978   	; 0x1c8 <LCD_WriteData>
{
	unsigned char i;
	if(loc<8) //If valid address
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		for(i=0;i<8;i++)
     982:	c0 17       	cp	r28, r16
     984:	d1 07       	cpc	r29, r17
     986:	d9 f7       	brne	.-10     	; 0x97e <LCDBuildChar+0x1e>
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	08 95       	ret

00000992 <CheckGuessed>:

void CheckGuessed(){

	letterFound = 0; //letter exists in word
     992:	10 92 d9 0f 	sts	0x0FD9, r1	; 0x800fd9 <letterFound>
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     996:	20 91 d6 0f 	lds	r18, 0x0FD6	; 0x800fd6 <WTG_Index>
     99a:	22 23       	and	r18, r18
     99c:	e9 f0       	breq	.+58     	; 0x9d8 <CheckGuessed+0x46>
		if(wordToGuess[b] == P2Guess){
     99e:	90 91 e5 0f 	lds	r25, 0x0FE5	; 0x800fe5 <P2Guess>
     9a2:	ec e5       	ldi	r30, 0x5C	; 92
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	a0 e0       	ldi	r26, 0x00	; 0
     9a8:	b1 e0       	ldi	r27, 0x01	; 1
     9aa:	21 50       	subi	r18, 0x01	; 1
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	23 5a       	subi	r18, 0xA3	; 163
     9b0:	3e 4f       	sbci	r19, 0xFE	; 254
     9b2:	81 91       	ld	r24, Z+
     9b4:	89 13       	cpse	r24, r25
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <CheckGuessed+0x32>
			displayGuess[b] = wordToGuess[b];
     9b8:	9c 93       	st	X, r25

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     9ba:	e2 17       	cp	r30, r18
     9bc:	f3 07       	cpc	r31, r19
     9be:	91 f4       	brne	.+36     	; 0x9e4 <CheckGuessed+0x52>
		if(wordToGuess[b] == P2Guess){
			displayGuess[b] = wordToGuess[b];
			letterFound = 1;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <CheckGuessed+0x3e>

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     9c4:	e2 17       	cp	r30, r18
     9c6:	f3 07       	cpc	r31, r19
     9c8:	11 f0       	breq	.+4      	; 0x9ce <CheckGuessed+0x3c>
     9ca:	11 96       	adiw	r26, 0x01	; 1
     9cc:	f2 cf       	rjmp	.-28     	; 0x9b2 <CheckGuessed+0x20>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <letterFound>
			letterFound = 1;
		}
		b++;
	}//end while
	
	if(letterFound == 0){
     9d4:	81 11       	cpse	r24, r1
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <CheckGuessed+0x58>
		strike++;
     9d8:	80 91 db 0f 	lds	r24, 0x0FDB	; 0x800fdb <strike>
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	80 93 db 0f 	sts	0x0FDB, r24	; 0x800fdb <strike>
	}
}
     9e2:	08 95       	ret
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <letterFound>
     9ea:	08 95       	ret

000009ec <CheckCorrect>:
		}
		b++;
	}//end while
	
	if(checkWin){
		win = 1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 d5 0f 	sts	0x0FD5, r24	; 0x800fd5 <win>
     9f2:	08 95       	ret

000009f4 <LCD_Tick>:

enum LCD_States{Init, Wait, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
	switch (state)
     9f8:	87 30       	cpi	r24, 0x07	; 7
     9fa:	91 05       	cpc	r25, r1
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <LCD_Tick+0xc>
     9fe:	91 c0       	rjmp	.+290    	; 0xb22 <LCD_Tick+0x12e>
     a00:	fc 01       	movw	r30, r24
     a02:	e7 57       	subi	r30, 0x77	; 119
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	93 c3       	rjmp	.+1830   	; 0x112e <__tablejump2__>
	{
		case Init : state = WelcomeLCD;
					LCD_ClearScreen();
     a08:	c5 db       	rcall	.-2166   	; 0x194 <LCD_ClearScreen>
     a0a:	12 98       	cbi	0x02, 2	; 2
					PORTA = SetBit(PORTA,2,0);
     a0c:	13 98       	cbi	0x02, 3	; 2
					PORTA = SetBit(PORTA,3,0);
     a0e:	9f c0       	rjmp	.+318    	; 0xb4e <LCD_Tick+0x15a>
// 					//used to set image on nokia screen
//  					lcd_setXY(0x40,0x80);
//  					N5110_image(&head_body_arm_leg2);
					
					
		break;
     a10:	80 b1       	in	r24, 0x00	; 0
		case Wait : if(GetBit(~PINA,7)){
     a12:	80 95       	com	r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	88 0f       	add	r24, r24
     a18:	89 2f       	mov	r24, r25
     a1a:	88 1f       	adc	r24, r24
     a1c:	99 0b       	sbc	r25, r25
     a1e:	91 95       	neg	r25
     a20:	89 2b       	or	r24, r25
     a22:	09 f4       	brne	.+2      	; 0xa26 <LCD_Tick+0x32>
     a24:	66 c1       	rjmp	.+716    	; 0xcf2 <LCD_Tick+0x2fe>
     a26:	10 92 d4 0f 	sts	0x0FD4, r1	; 0x800fd4 <count>
						state = WelcomeLCD;
						count = 0;
						LCD_ClearScreen();
     a2a:	b4 db       	rcall	.-2200   	; 0x194 <LCD_ClearScreen>
     a2c:	10 92 d6 0f 	sts	0x0FD6, r1	; 0x800fd6 <WTG_Index>
						LCDindex = 0;
						WTG_Index = 0; //world to guess index
     a30:	80 e2       	ldi	r24, 0x20	; 32
						lastClicked = ' ';  //last letter user clicked
     a32:	80 93 e6 0f 	sts	0x0FE6, r24	; 0x800fe6 <lastClicked>
     a36:	80 93 e5 0f 	sts	0x0FE5, r24	; 0x800fe5 <P2Guess>
						P2Guess = ' ';
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	ac e5       	ldi	r26, 0x5C	; 92
     a40:	b1 e0       	ldi	r27, 0x01	; 1
     a42:	21 e1       	ldi	r18, 0x11	; 17
     a44:	31 e0       	ldi	r19, 0x01	; 1
     a46:	9f e5       	ldi	r25, 0x5F	; 95
						for(unsigned char k = 0; k < 17; k++){
							displayGuess[k] = '_';
     a48:	91 93       	st	Z+, r25
     a4a:	8d 93       	st	X+, r24
							wordToGuess[k] = ' ';
     a4c:	e2 17       	cp	r30, r18
						LCD_ClearScreen();
						LCDindex = 0;
						WTG_Index = 0; //world to guess index
						lastClicked = ' ';  //last letter user clicked
						P2Guess = ' ';
						for(unsigned char k = 0; k < 17; k++){
     a4e:	f3 07       	cpc	r31, r19
     a50:	d9 f7       	brne	.-10     	; 0xa48 <LCD_Tick+0x54>
     a52:	10 92 d9 0f 	sts	0x0FD9, r1	; 0x800fd9 <letterFound>
							displayGuess[k] = '_';
							wordToGuess[k] = ' ';
						}
						letterFound = 0; //checks is the letter P2 guess was in P1s word
     a56:	10 92 d8 0f 	sts	0x0FD8, r1	; 0x800fd8 <WA_Count>
						WA_Count = 0;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
						index = 1;
     a5c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <index>
     a60:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <click>
						click = 0;
     a64:	10 92 db 0f 	sts	0x0FDB, r1	; 0x800fdb <strike>
						strike = 0;
     a68:	10 92 da 0f 	sts	0x0FDA, r1	; 0x800fda <counter>
						counter = 0;
     a6c:	10 92 d5 0f 	sts	0x0FD5, r1	; 0x800fd5 <win>
						win = 0;
     a70:	6e c0       	rjmp	.+220    	; 0xb4e <LCD_Tick+0x15a>
     a72:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
					}else{
						state = Wait;
					}
		break;
		case WelcomeLCD : if(count <= 51){ 
     a76:	84 33       	cpi	r24, 0x34	; 52
     a78:	08 f4       	brcc	.+2      	; 0xa7c <LCD_Tick+0x88>
     a7a:	69 c0       	rjmp	.+210    	; 0xb4e <LCD_Tick+0x15a>
							  state = WelcomeLCD;
						  }
						  else if(count > 51){
							  state = P1InputLCD;
							  LCD_ClearScreen();
     a7c:	8b db       	rcall	.-2282   	; 0x194 <LCD_ClearScreen>
							  LCD_DisplayString(17,"16 Letters MAX");
     a7e:	63 e7       	ldi	r22, 0x73	; 115
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	81 e1       	ldi	r24, 0x11	; 17
     a84:	aa db       	rcall	.-2220   	; 0x1da <LCD_DisplayString>
							  LCD_Cursor(1);
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	88 db       	rcall	.-2288   	; 0x19a <LCD_Cursor>
     a8a:	81 e0       	ldi	r24, 0x01	; 1
							  LCDindex = 1;
     a8c:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <LCDindex>
     a90:	a8 c0       	rjmp	.+336    	; 0xbe2 <LCD_Tick+0x1ee>
						 }
		break;
		case P1InputLCD :	if(GetBit(~PINA, 6)){
     a92:	80 b1       	in	r24, 0x00	; 0
     a94:	80 95       	com	r24
     a96:	86 ff       	sbrs	r24, 6
								LCD_ClearScreen();
     a98:	a4 c0       	rjmp	.+328    	; 0xbe2 <LCD_Tick+0x1ee>
     a9a:	7c db       	rcall	.-2312   	; 0x194 <LCD_ClearScreen>
								state = P2InputLCD;
								delay_ms(2);
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	5d db       	rcall	.-2374   	; 0x15c <delay_ms>
     aa2:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
							
							
							for(unsigned char a = 0; a < WTG_Index; a++){
     aa6:	88 23       	and	r24, r24
     aa8:	89 f0       	breq	.+34     	; 0xacc <LCD_Tick+0xd8>
     aaa:	c0 e0       	ldi	r28, 0x00	; 0
     aac:	df e5       	ldi	r29, 0x5F	; 95
								displayGuess[a] = '_';
     aae:	ec 2f       	mov	r30, r28
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	e0 50       	subi	r30, 0x00	; 0
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
								LCD_Cursor(a + 17);
     ab6:	d0 83       	st	Z, r29
     ab8:	81 e1       	ldi	r24, 0x11	; 17
     aba:	8c 0f       	add	r24, r28
								LCD_WriteData('_');
     abc:	6e db       	rcall	.-2340   	; 0x19a <LCD_Cursor>
     abe:	8d 2f       	mov	r24, r29
     ac0:	83 db       	rcall	.-2298   	; 0x1c8 <LCD_WriteData>
								LCD_ClearScreen();
								state = P2InputLCD;
								delay_ms(2);
							
							
							for(unsigned char a = 0; a < WTG_Index; a++){
     ac2:	cf 5f       	subi	r28, 0xFF	; 255
     ac4:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
     ac8:	c8 17       	cp	r28, r24
     aca:	88 f3       	brcs	.-30     	; 0xaae <LCD_Tick+0xba>
								displayGuess[a] = '_';
								LCD_Cursor(a + 17);
								LCD_WriteData('_');
							}
								
							LCD_Cursor(1);
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	65 db       	rcall	.-2358   	; 0x19a <LCD_Cursor>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
							LCDindex = 1;					
     ad2:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <LCDindex>
     ad6:	af c0       	rjmp	.+350    	; 0xc36 <LCD_Tick+0x242>
     ad8:	80 91 db 0f 	lds	r24, 0x0FDB	; 0x800fdb <strike>
						}else{						
							state = P1InputLCD;
						}
		break;
		case P2InputLCD :	if(strike == 6){
     adc:	86 30       	cpi	r24, 0x06	; 6
     ade:	19 f4       	brne	.+6      	; 0xae6 <LCD_Tick+0xf2>
     ae0:	10 92 d4 0f 	sts	0x0FD4, r1	; 0x800fd4 <count>
								state = LoseLCD;
								count = 0;
     ae4:	f2 c0       	rjmp	.+484    	; 0xcca <LCD_Tick+0x2d6>
     ae6:	80 91 d5 0f 	lds	r24, 0x0FD5	; 0x800fd5 <win>
							} else if(win){
     aea:	88 23       	and	r24, r24
     aec:	09 f4       	brne	.+2      	; 0xaf0 <LCD_Tick+0xfc>
     aee:	a3 c0       	rjmp	.+326    	; 0xc36 <LCD_Tick+0x242>
								state = WinLCD;
								count = 0;
     af0:	10 92 d4 0f 	sts	0x0FD4, r1	; 0x800fd4 <count>
							else
							{
								state = P2InputLCD;
							}
		break;
		case WinLCD:	if(count <= 20){
     af4:	d8 c0       	rjmp	.+432    	; 0xca6 <LCD_Tick+0x2b2>
     af6:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     afa:	85 31       	cpi	r24, 0x15	; 21
     afc:	08 f4       	brcc	.+2      	; 0xb00 <LCD_Tick+0x10c>
							state = WinLCD;
						}else if(count > 20){
							state = Wait;
							LCD_ClearScreen();
     afe:	cf c0       	rjmp	.+414    	; 0xc9e <LCD_Tick+0x2aa>
							LCD_DisplayString(1, "Press RESET to start a new game");
     b00:	49 db       	rcall	.-2414   	; 0x194 <LCD_ClearScreen>
     b02:	62 e8       	ldi	r22, 0x82	; 130
     b04:	71 e0       	ldi	r23, 0x01	; 1
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	68 db       	rcall	.-2352   	; 0x1da <LCD_DisplayString>
						}
						
		break;
		case LoseLCD :	if(count <= 20){
     b0a:	f3 c0       	rjmp	.+486    	; 0xcf2 <LCD_Tick+0x2fe>
     b0c:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     b10:	85 31       	cpi	r24, 0x15	; 21
     b12:	08 f4       	brcc	.+2      	; 0xb16 <LCD_Tick+0x122>
							state = LoseLCD;
						}else if(count > 20)
						{
							state = Wait;
							LCD_ClearScreen();
     b14:	d6 c0       	rjmp	.+428    	; 0xcc2 <LCD_Tick+0x2ce>
     b16:	3e db       	rcall	.-2436   	; 0x194 <LCD_ClearScreen>
							LCD_DisplayString(1, "Press RESET to start a new game");
     b18:	62 e8       	ldi	r22, 0x82	; 130
     b1a:	71 e0       	ldi	r23, 0x01	; 1
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	5d db       	rcall	.-2374   	; 0x1da <LCD_DisplayString>
     b20:	e8 c0       	rjmp	.+464    	; 0xcf2 <LCD_Tick+0x2fe>
     b22:	84 30       	cpi	r24, 0x04	; 4
						}
		break;
	}//end Transitions
	
	switch (state)
     b24:	91 05       	cpc	r25, r1
     b26:	09 f4       	brne	.+2      	; 0xb2a <LCD_Tick+0x136>
     b28:	86 c0       	rjmp	.+268    	; 0xc36 <LCD_Tick+0x242>
     b2a:	44 f4       	brge	.+16     	; 0xb3c <LCD_Tick+0x148>
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	91 05       	cpc	r25, r1
     b30:	71 f0       	breq	.+28     	; 0xb4e <LCD_Tick+0x15a>
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	91 05       	cpc	r25, r1
     b36:	09 f4       	brne	.+2      	; 0xb3a <LCD_Tick+0x146>
     b38:	54 c0       	rjmp	.+168    	; 0xbe2 <LCD_Tick+0x1ee>
     b3a:	dd c0       	rjmp	.+442    	; 0xcf6 <LCD_Tick+0x302>
     b3c:	85 30       	cpi	r24, 0x05	; 5
     b3e:	91 05       	cpc	r25, r1
     b40:	09 f4       	brne	.+2      	; 0xb44 <LCD_Tick+0x150>
     b42:	ad c0       	rjmp	.+346    	; 0xc9e <LCD_Tick+0x2aa>
     b44:	86 30       	cpi	r24, 0x06	; 6
     b46:	91 05       	cpc	r25, r1
     b48:	09 f0       	breq	.+2      	; 0xb4c <LCD_Tick+0x158>
     b4a:	d5 c0       	rjmp	.+426    	; 0xcf6 <LCD_Tick+0x302>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
			for(LCDindex = 0; LCDindex < 16; LCDindex++){
     b4c:	ba c0       	rjmp	.+372    	; 0xcc2 <LCD_Tick+0x2ce>
     b4e:	10 92 d7 0f 	sts	0x0FD7, r1	; 0x800fd7 <LCDindex>
				LCD_Cursor(LCDindex + 1);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	8f 5f       	subi	r24, 0xFF	; 255
     b56:	21 db       	rcall	.-2494   	; 0x19a <LCD_Cursor>
				LCD_WriteData(welcomeMessage[LCDindex]);
     b58:	e0 91 d7 0f 	lds	r30, 0x0FD7	; 0x800fd7 <LCDindex>
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	e7 5e       	subi	r30, 0xE7	; 231
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	80 81       	ld	r24, Z
     b64:	31 db       	rcall	.-2462   	; 0x1c8 <LCD_WriteData>
     b66:	80 91 d7 0f 	lds	r24, 0x0FD7	; 0x800fd7 <LCDindex>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
			for(LCDindex = 0; LCDindex < 16; LCDindex++){
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <LCDindex>
     b70:	80 31       	cpi	r24, 0x10	; 16
     b72:	80 f3       	brcs	.-32     	; 0xb54 <LCD_Tick+0x160>
     b74:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <welcomeMessage>
				LCD_WriteData(welcomeMessage[LCDindex]);
			}
		
		
		
		front = welcomeMessage[0];
     b78:	90 93 e3 0f 	sts	0x0FE3, r25	; 0x800fe3 <front>
     b7c:	e9 e1       	ldi	r30, 0x19	; 25
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
		
		for (unsigned char j = 0; j < 67; j++) {
			welcomeMessage[j] = welcomeMessage[j + 1];
     b80:	2c e5       	ldi	r18, 0x5C	; 92
		
		
		
		front = welcomeMessage[0];
		
		for (unsigned char j = 0; j < 67; j++) {
     b82:	31 e0       	ldi	r19, 0x01	; 1
     b84:	81 81       	ldd	r24, Z+1	; 0x01
			welcomeMessage[j] = welcomeMessage[j + 1];
		}
		// put the saved character on the end
		welcomeMessage[67] = front;
     b86:	81 93       	st	Z+, r24
		
		LCDBuildChar(0, customChar);
     b88:	e2 17       	cp	r30, r18
     b8a:	f3 07       	cpc	r31, r19
     b8c:	d9 f7       	brne	.-10     	; 0xb84 <LCD_Tick+0x190>
			LCD_Cursor(17);
     b8e:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <wordToGuess>
			LCD_WriteData(0x00);
     b92:	61 e1       	ldi	r22, 0x11	; 17
     b94:	71 e0       	ldi	r23, 0x01	; 1
			LCD_Cursor(20);
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	e3 de       	rcall	.-570    	; 0x960 <LCDBuildChar>
			LCD_WriteData(0x00);
     b9a:	81 e1       	ldi	r24, 0x11	; 17
     b9c:	fe da       	rcall	.-2564   	; 0x19a <LCD_Cursor>
			LCD_Cursor(23);
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	13 db       	rcall	.-2522   	; 0x1c8 <LCD_WriteData>
     ba2:	84 e1       	ldi	r24, 0x14	; 20
			LCD_WriteData(0x00);
     ba4:	fa da       	rcall	.-2572   	; 0x19a <LCD_Cursor>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0f db       	rcall	.-2530   	; 0x1c8 <LCD_WriteData>
			LCD_Cursor(26);
     baa:	87 e1       	ldi	r24, 0x17	; 23
     bac:	f6 da       	rcall	.-2580   	; 0x19a <LCD_Cursor>
     bae:	80 e0       	ldi	r24, 0x00	; 0
			LCD_WriteData(0x00);
     bb0:	0b db       	rcall	.-2538   	; 0x1c8 <LCD_WriteData>
     bb2:	8a e1       	ldi	r24, 0x1A	; 26
     bb4:	f2 da       	rcall	.-2588   	; 0x19a <LCD_Cursor>
			LCD_Cursor(29);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	07 db       	rcall	.-2546   	; 0x1c8 <LCD_WriteData>
     bba:	8d e1       	ldi	r24, 0x1D	; 29
			LCD_WriteData(0x00);
     bbc:	ee da       	rcall	.-2596   	; 0x19a <LCD_Cursor>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	03 db       	rcall	.-2554   	; 0x1c8 <LCD_WriteData>
			LCD_Cursor(32);
     bc2:	80 e2       	ldi	r24, 0x20	; 32
     bc4:	ea da       	rcall	.-2604   	; 0x19a <LCD_Cursor>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
			LCD_WriteData(0x00);
     bc8:	ff da       	rcall	.-2562   	; 0x1c8 <LCD_WriteData>
     bca:	83 e2       	ldi	r24, 0x23	; 35
     bcc:	e6 da       	rcall	.-2612   	; 0x19a <LCD_Cursor>
			LCD_Cursor(35);
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	fb da       	rcall	.-2570   	; 0x1c8 <LCD_WriteData>
     bd2:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
			LCD_WriteData(0x00);
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	80 93 d4 0f 	sts	0x0FD4, r24	; 0x800fd4 <count>
		
		count++;
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	8a c0       	rjmp	.+276    	; 0xcf6 <LCD_Tick+0x302>
     be2:	80 b1       	in	r24, 0x00	; 0
		
			
		break;
     be4:	80 95       	com	r24
     be6:	85 ff       	sbrs	r24, 5
		case P1InputLCD :
			
			if(GetBit(~PINA,5)){
     be8:	18 c0       	rjmp	.+48     	; 0xc1a <LCD_Tick+0x226>
     bea:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
     bee:	80 31       	cpi	r24, 0x10	; 16
				if(WTG_Index < 16){
     bf0:	a0 f4       	brcc	.+40     	; 0xc1a <LCD_Tick+0x226>
     bf2:	90 91 d7 0f 	lds	r25, 0x0FD7	; 0x800fd7 <LCDindex>
					LCDindex++;
     bf6:	9f 5f       	subi	r25, 0xFF	; 255
     bf8:	90 93 d7 0f 	sts	0x0FD7, r25	; 0x800fd7 <LCDindex>
     bfc:	e8 2f       	mov	r30, r24
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
					wordToGuess[WTG_Index] = lastClicked;
     c00:	e4 5a       	subi	r30, 0xA4	; 164
     c02:	fe 4f       	sbci	r31, 0xFE	; 254
     c04:	90 91 e6 0f 	lds	r25, 0x0FE6	; 0x800fe6 <lastClicked>
     c08:	90 83       	st	Z, r25
     c0a:	8f 5f       	subi	r24, 0xFF	; 255
     c0c:	80 93 d6 0f 	sts	0x0FD6, r24	; 0x800fd6 <WTG_Index>
					WTG_Index++;
     c10:	80 e2       	ldi	r24, 0x20	; 32
     c12:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
					character = ' ';
     c16:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <click>
					click = 0;
					
				}
				
			}
			LCD_Cursor(LCDindex);
     c1a:	80 91 d7 0f 	lds	r24, 0x0FD7	; 0x800fd7 <LCDindex>
			if(character != ' '){
     c1e:	bd da       	rcall	.-2694   	; 0x19a <LCD_Cursor>
     c20:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <character>
     c24:	80 32       	cpi	r24, 0x20	; 32
     c26:	09 f4       	brne	.+2      	; 0xc2a <LCD_Tick+0x236>
				lastClicked = character;
     c28:	5e c0       	rjmp	.+188    	; 0xce6 <LCD_Tick+0x2f2>
				LCD_WriteData(character);
     c2a:	80 93 e6 0f 	sts	0x0FE6, r24	; 0x800fe6 <lastClicked>
     c2e:	cc da       	rcall	.-2664   	; 0x1c8 <LCD_WriteData>
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	90 e0       	ldi	r25, 0x00	; 0

		
		break;
 		case P2InputLCD : 

				if(GetBit(~PINA,5)){
     c34:	60 c0       	rjmp	.+192    	; 0xcf6 <LCD_Tick+0x302>
     c36:	80 b1       	in	r24, 0x00	; 0
     c38:	80 95       	com	r24
						P2Guess = lastClicked;
     c3a:	85 ff       	sbrs	r24, 5
     c3c:	24 c0       	rjmp	.+72     	; 0xc86 <LCD_Tick+0x292>
     c3e:	80 91 e6 0f 	lds	r24, 0x0FE6	; 0x800fe6 <lastClicked>
						character = ' ';
     c42:	80 93 e5 0f 	sts	0x0FE5, r24	; 0x800fe5 <P2Guess>
						click = 0;
     c46:	80 e2       	ldi	r24, 0x20	; 32
     c48:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <character>
						LCD_Cursor(1);
     c4c:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <click>
						LCD_WriteData(' ');
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	a3 da       	rcall	.-2746   	; 0x19a <LCD_Cursor>
						LCD_Cursor(1);
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	b8 da       	rcall	.-2704   	; 0x1c8 <LCD_WriteData>
     c58:	81 e0       	ldi	r24, 0x01	; 1
						
						CheckGuessed();
     c5a:	9f da       	rcall	.-2754   	; 0x19a <LCD_Cursor>
						CheckCorrect();
     c5c:	9a de       	rcall	.-716    	; 0x992 <CheckGuessed>
     c5e:	c6 de       	rcall	.-628    	; 0x9ec <CheckCorrect>
						for(unsigned char a = 0; a < WTG_Index; a++){
     c60:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
     c64:	88 23       	and	r24, r24
     c66:	79 f0       	breq	.+30     	; 0xc86 <LCD_Tick+0x292>
							LCD_Cursor(a + 17);
     c68:	c0 e0       	ldi	r28, 0x00	; 0
     c6a:	81 e1       	ldi	r24, 0x11	; 17
     c6c:	8c 0f       	add	r24, r28
     c6e:	95 da       	rcall	.-2774   	; 0x19a <LCD_Cursor>
							LCD_WriteData(displayGuess[a]);
     c70:	ec 2f       	mov	r30, r28
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	e0 50       	subi	r30, 0x00	; 0
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	80 81       	ld	r24, Z
     c7a:	a6 da       	rcall	.-2740   	; 0x1c8 <LCD_WriteData>
						LCD_WriteData(' ');
						LCD_Cursor(1);
						
						CheckGuessed();
						CheckCorrect();
						for(unsigned char a = 0; a < WTG_Index; a++){
     c7c:	cf 5f       	subi	r28, 0xFF	; 255
     c7e:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <WTG_Index>
     c82:	c8 17       	cp	r28, r24
							LCD_WriteData(displayGuess[a]);
						}
						
					
				}
				LCD_Cursor(1);
     c84:	90 f3       	brcs	.-28     	; 0xc6a <LCD_Tick+0x276>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	88 da       	rcall	.-2800   	; 0x19a <LCD_Cursor>
				if(character != ' '){
     c8a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <character>
     c8e:	80 32       	cpi	r24, 0x20	; 32
     c90:	69 f1       	breq	.+90     	; 0xcec <LCD_Tick+0x2f8>
					lastClicked = character;
     c92:	80 93 e6 0f 	sts	0x0FE6, r24	; 0x800fe6 <lastClicked>
					LCD_WriteData(character);
     c96:	98 da       	rcall	.-2768   	; 0x1c8 <LCD_WriteData>
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	2c c0       	rjmp	.+88     	; 0xcf6 <LCD_Tick+0x302>
     c9e:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
				}
				
							
		break;
		case WinLCD:	if(count % 4 == 0){
     ca2:	83 70       	andi	r24, 0x03	; 3
     ca4:	11 f4       	brne	.+4      	; 0xcaa <LCD_Tick+0x2b6>
     ca6:	76 da       	rcall	.-2836   	; 0x194 <LCD_ClearScreen>
							LCD_ClearScreen();
     ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <LCD_Tick+0x2be>
     caa:	62 ea       	ldi	r22, 0xA2	; 162
     cac:	71 e0       	ldi	r23, 0x01	; 1
						}else {
							LCD_DisplayString(1, "YOU WIN! YOU WIN! YOU WIN!");
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	94 da       	rcall	.-2776   	; 0x1da <LCD_DisplayString>
     cb2:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
						}
						count++;
     cb8:	80 93 d4 0f 	sts	0x0FD4, r24	; 0x800fd4 <count>
     cbc:	85 e0       	ldi	r24, 0x05	; 5
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	1a c0       	rjmp	.+52     	; 0xcf6 <LCD_Tick+0x302>
		break;
     cc2:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     cc6:	80 fd       	sbrc	r24, 0
		case LoseLCD :	if(count % 2 == 0){
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <LCD_Tick+0x2da>
     cca:	64 da       	rcall	.-2872   	; 0x194 <LCD_ClearScreen>
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <LCD_Tick+0x2e2>
     cce:	6d eb       	ldi	r22, 0xBD	; 189
							LCD_ClearScreen();
     cd0:	71 e0       	ldi	r23, 0x01	; 1
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	82 da       	rcall	.-2812   	; 0x1da <LCD_DisplayString>
						}else {
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
     cd6:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <count>
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 93 d4 0f 	sts	0x0FD4, r24	; 0x800fd4 <count>
						}
						count++;
     ce0:	86 e0       	ldi	r24, 0x06	; 6
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <LCD_Tick+0x302>
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	90 e0       	ldi	r25, 0x00	; 0
						
		break;
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <LCD_Tick+0x302>
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <LCD_Tick+0x302>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <main>:
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	8a b9       	out	0x0a, r24	; 10
	}//end Initializations
	
	
	return state;
}
     d00:	1b b8       	out	0x0b, r1	; 11
     d02:	81 b9       	out	0x01, r24	; 1
     d04:	82 b9       	out	0x02, r24	; 2

int main(void)
{
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
	DDRA = 0xFF; PORTA = 0xFF; // LCD control lines
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
     d06:	84 b9       	out	0x04, r24	; 4
     d08:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
     d0a:	80 ef       	ldi	r24, 0xF0	; 240
     d0c:	87 b9       	out	0x07, r24	; 7
     d0e:	8f e0       	ldi	r24, 0x0F	; 15
     d10:	88 b9       	out	0x08, r24	; 8
	unsigned long NokiaPeriod = 500;
	
	unsigned long period = 100;
	unsigned char i = 0;
	
	Tasks[i].state = Init;
     d12:	e8 ea       	ldi	r30, 0xA8	; 168
     d14:	ff e0       	ldi	r31, 0x0F	; 15
     d16:	10 82       	st	Z, r1
	Tasks[i].period = LCDPeriod;
     d18:	84 ef       	ldi	r24, 0xF4	; 244
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	a0 e0       	ldi	r26, 0x00	; 0
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	81 83       	std	Z+1, r24	; 0x01
     d22:	92 83       	std	Z+2, r25	; 0x02
     d24:	a3 83       	std	Z+3, r26	; 0x03
     d26:	b4 83       	std	Z+4, r27	; 0x04
	Tasks[i].elapsedTime = LCDPeriod;
     d28:	85 83       	std	Z+5, r24	; 0x05
     d2a:	96 83       	std	Z+6, r25	; 0x06
     d2c:	a7 83       	std	Z+7, r26	; 0x07
     d2e:	b0 87       	std	Z+8, r27	; 0x08
	Tasks[i].TickFct = &LCD_Tick;
     d30:	2a ef       	ldi	r18, 0xFA	; 250
     d32:	34 e0       	ldi	r19, 0x04	; 4
     d34:	32 87       	std	Z+10, r19	; 0x0a
     d36:	21 87       	std	Z+9, r18	; 0x09
	i++;
	Tasks[i].state = Wait_KP;
     d38:	13 86       	std	Z+11, r1	; 0x0b
	Tasks[i].period = KPPeriod;
     d3a:	4c e2       	ldi	r20, 0x2C	; 44
     d3c:	51 e0       	ldi	r21, 0x01	; 1
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	44 87       	std	Z+12, r20	; 0x0c
     d44:	55 87       	std	Z+13, r21	; 0x0d
     d46:	66 87       	std	Z+14, r22	; 0x0e
     d48:	77 87       	std	Z+15, r23	; 0x0f
	Tasks[i].elapsedTime = KPPeriod;
     d4a:	40 8b       	std	Z+16, r20	; 0x10
     d4c:	51 8b       	std	Z+17, r21	; 0x11
     d4e:	62 8b       	std	Z+18, r22	; 0x12
     d50:	73 8b       	std	Z+19, r23	; 0x13
	Tasks[i].TickFct = &KeypadTick;
     d52:	2a ec       	ldi	r18, 0xCA	; 202
     d54:	31 e0       	ldi	r19, 0x01	; 1
     d56:	35 8b       	std	Z+21, r19	; 0x15
     d58:	24 8b       	std	Z+20, r18	; 0x14
	i++;
	Tasks[i].state = WA_Wait;
     d5a:	16 8a       	std	Z+22, r1	; 0x16
	Tasks[i].period = WAPeriod;
     d5c:	44 e6       	ldi	r20, 0x64	; 100
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	47 8b       	std	Z+23, r20	; 0x17
     d66:	50 8f       	std	Z+24, r21	; 0x18
     d68:	61 8f       	std	Z+25, r22	; 0x19
     d6a:	72 8f       	std	Z+26, r23	; 0x1a
	Tasks[i].elapsedTime = WAPeriod;
     d6c:	43 8f       	std	Z+27, r20	; 0x1b
     d6e:	54 8f       	std	Z+28, r21	; 0x1c
     d70:	65 8f       	std	Z+29, r22	; 0x1d
     d72:	76 8f       	std	Z+30, r23	; 0x1e
	Tasks[i].TickFct = &WA_Tick;
     d74:	2d e6       	ldi	r18, 0x6D	; 109
     d76:	34 e0       	ldi	r19, 0x04	; 4
     d78:	30 a3       	std	Z+32, r19	; 0x20
     d7a:	27 8f       	std	Z+31, r18	; 0x1f
	i++;
	Tasks[i].state = Nokia_Init;
     d7c:	11 a2       	std	Z+33, r1	; 0x21
	Tasks[i].period = NokiaPeriod;
     d7e:	82 a3       	std	Z+34, r24	; 0x22
     d80:	93 a3       	std	Z+35, r25	; 0x23
     d82:	a4 a3       	std	Z+36, r26	; 0x24
     d84:	b5 a3       	std	Z+37, r27	; 0x25
	Tasks[i].elapsedTime = NokiaPeriod;
     d86:	86 a3       	std	Z+38, r24	; 0x26
     d88:	97 a3       	std	Z+39, r25	; 0x27
     d8a:	a0 a7       	std	Z+40, r26	; 0x28
     d8c:	b1 a7       	std	Z+41, r27	; 0x29
	Tasks[i].TickFct = &Nokia_Tick;
     d8e:	8c e8       	ldi	r24, 0x8C	; 140
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	93 a7       	std	Z+43, r25	; 0x2b
     d94:	82 a7       	std	Z+42, r24	; 0x2a
	
	//LCDBuildChar(0, customChar);
	TimerSet(period);
     d96:	64 e6       	ldi	r22, 0x64	; 100
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	36 da       	rcall	.-2964   	; 0x20c <TimerSet>
	TimerOn();
     da0:	46 da       	rcall	.-2932   	; 0x22e <TimerOn>
	LCD_init();
     da2:	03 da       	rcall	.-3066   	; 0x1aa <LCD_init>
     da4:	d4 dd       	rcall	.-1112   	; 0x94e <PWM_on>
	PWM_on();
     da6:	0f 2e       	mov	r0, r31
     da8:	f4 ed       	ldi	r31, 0xD4	; 212
     daa:	ef 2e       	mov	r14, r31
     dac:	ff e0       	ldi	r31, 0x0F	; 15
     dae:	ff 2e       	mov	r15, r31
     db0:	f0 2d       	mov	r31, r0
     db2:	c8 ea       	ldi	r28, 0xA8	; 168
     db4:	df e0       	ldi	r29, 0x0F	; 15
     db6:	8e 01       	movw	r16, r28
     db8:	4d 81       	ldd	r20, Y+5	; 0x05
     dba:	5e 81       	ldd	r21, Y+6	; 0x06
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 4; i++ ) {
			// Task is ready to tick
			if ( Tasks[i].elapsedTime == Tasks[i].period ) {
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	ab 81       	ldd	r26, Y+3	; 0x03
     dc6:	bc 81       	ldd	r27, Y+4	; 0x04
     dc8:	48 17       	cp	r20, r24
     dca:	59 07       	cpc	r21, r25
     dcc:	6a 07       	cpc	r22, r26
     dce:	7b 07       	cpc	r23, r27
     dd0:	61 f4       	brne	.+24     	; 0xdea <main+0xee>
     dd2:	88 81       	ld	r24, Y
     dd4:	e9 85       	ldd	r30, Y+9	; 0x09
				// Setting next state for task
				Tasks[i].state = Tasks[i].TickFct(Tasks[i].state);
     dd6:	fa 85       	ldd	r31, Y+10	; 0x0a
     dd8:	08 2e       	mov	r0, r24
     dda:	00 0c       	add	r0, r0
     ddc:	99 0b       	sbc	r25, r25
     dde:	09 95       	icall
     de0:	88 83       	st	Y, r24
     de2:	1d 82       	std	Y+5, r1	; 0x05
     de4:	1e 82       	std	Y+6, r1	; 0x06
				// Reset the elapsed time for next tick.
				Tasks[i].elapsedTime = 0;
     de6:	1f 82       	std	Y+7, r1	; 0x07
     de8:	18 86       	std	Y+8, r1	; 0x08
     dea:	f8 01       	movw	r30, r16
     dec:	85 81       	ldd	r24, Z+5	; 0x05
			}
			Tasks[i].elapsedTime += period;
     dee:	96 81       	ldd	r25, Z+6	; 0x06
     df0:	a7 81       	ldd	r26, Z+7	; 0x07
     df2:	b0 85       	ldd	r27, Z+8	; 0x08
     df4:	8c 59       	subi	r24, 0x9C	; 156
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	af 4f       	sbci	r26, 0xFF	; 255
     dfa:	bf 4f       	sbci	r27, 0xFF	; 255
     dfc:	85 83       	std	Z+5, r24	; 0x05
     dfe:	96 83       	std	Z+6, r25	; 0x06
     e00:	a7 83       	std	Z+7, r26	; 0x07
     e02:	b0 87       	std	Z+8, r27	; 0x08
     e04:	2b 96       	adiw	r28, 0x0b	; 11
     e06:	ce 15       	cp	r28, r14
     e08:	df 05       	cpc	r29, r15
	
	
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 4; i++ ) {
     e0a:	a9 f6       	brne	.-86     	; 0xdb6 <main+0xba>
     e0c:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <TimerFlag>
				Tasks[i].elapsedTime = 0;
			}
			Tasks[i].elapsedTime += period;
		}
		
		while (!TimerFlag){}
     e10:	88 23       	and	r24, r24
     e12:	e1 f3       	breq	.-8      	; 0xe0c <main+0x110>
     e14:	10 92 e1 0f 	sts	0x0FE1, r1	; 0x800fe1 <TimerFlag>
		TimerFlag = 0;
     e18:	cc cf       	rjmp	.-104    	; 0xdb2 <main+0xb6>

00000e1a <SPI_SS_Enable>:
     e1a:	2c 98       	cbi	0x05, 4	; 5
		
	}
     e1c:	08 95       	ret

00000e1e <SPI_SS_Disable>:
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
     e1e:	2c 9a       	sbi	0x05, 4	; 5
     e20:	08 95       	ret

00000e22 <SPI_Init>:
     e22:	83 eb       	ldi	r24, 0xB3	; 179
     e24:	84 b9       	out	0x04, r24	; 4
     e26:	28 9a       	sbi	0x05, 0	; 5
     e28:	26 98       	cbi	0x04, 6	; 4
     e2a:	2c 9a       	sbi	0x05, 4	; 5
     e2c:	81 e5       	ldi	r24, 0x51	; 81
     e2e:	8c bd       	out	0x2c, r24	; 44
     e30:	08 95       	ret

00000e32 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
     e32:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
     e34:	0d b4       	in	r0, 0x2d	; 45
     e36:	07 fe       	sbrs	r0, 7
     e38:	fd cf       	rjmp	.-6      	; 0xe34 <SPI_Write+0x2>
}
     e3a:	08 95       	ret

00000e3c <__cmpsf2>:
     e3c:	9c d0       	rcall	.+312    	; 0xf76 <__fp_cmp>
     e3e:	08 f4       	brcc	.+2      	; 0xe42 <__cmpsf2+0x6>
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	08 95       	ret

00000e44 <__divsf3>:
     e44:	0c d0       	rcall	.+24     	; 0xe5e <__divsf3x>
     e46:	d2 c0       	rjmp	.+420    	; 0xfec <__fp_round>
     e48:	ca d0       	rcall	.+404    	; 0xfde <__fp_pscB>
     e4a:	40 f0       	brcs	.+16     	; 0xe5c <__divsf3+0x18>
     e4c:	c1 d0       	rcall	.+386    	; 0xfd0 <__fp_pscA>
     e4e:	30 f0       	brcs	.+12     	; 0xe5c <__divsf3+0x18>
     e50:	21 f4       	brne	.+8      	; 0xe5a <__divsf3+0x16>
     e52:	5f 3f       	cpi	r21, 0xFF	; 255
     e54:	19 f0       	breq	.+6      	; 0xe5c <__divsf3+0x18>
     e56:	b3 c0       	rjmp	.+358    	; 0xfbe <__fp_inf>
     e58:	51 11       	cpse	r21, r1
     e5a:	fc c0       	rjmp	.+504    	; 0x1054 <__fp_szero>
     e5c:	b6 c0       	rjmp	.+364    	; 0xfca <__fp_nan>

00000e5e <__divsf3x>:
     e5e:	d7 d0       	rcall	.+430    	; 0x100e <__fp_split3>
     e60:	98 f3       	brcs	.-26     	; 0xe48 <__divsf3+0x4>

00000e62 <__divsf3_pse>:
     e62:	99 23       	and	r25, r25
     e64:	c9 f3       	breq	.-14     	; 0xe58 <__divsf3+0x14>
     e66:	55 23       	and	r21, r21
     e68:	b1 f3       	breq	.-20     	; 0xe56 <__divsf3+0x12>
     e6a:	95 1b       	sub	r25, r21
     e6c:	55 0b       	sbc	r21, r21
     e6e:	bb 27       	eor	r27, r27
     e70:	aa 27       	eor	r26, r26
     e72:	62 17       	cp	r22, r18
     e74:	73 07       	cpc	r23, r19
     e76:	84 07       	cpc	r24, r20
     e78:	38 f0       	brcs	.+14     	; 0xe88 <__divsf3_pse+0x26>
     e7a:	9f 5f       	subi	r25, 0xFF	; 255
     e7c:	5f 4f       	sbci	r21, 0xFF	; 255
     e7e:	22 0f       	add	r18, r18
     e80:	33 1f       	adc	r19, r19
     e82:	44 1f       	adc	r20, r20
     e84:	aa 1f       	adc	r26, r26
     e86:	a9 f3       	breq	.-22     	; 0xe72 <__divsf3_pse+0x10>
     e88:	33 d0       	rcall	.+102    	; 0xef0 <__divsf3_pse+0x8e>
     e8a:	0e 2e       	mov	r0, r30
     e8c:	3a f0       	brmi	.+14     	; 0xe9c <__divsf3_pse+0x3a>
     e8e:	e0 e8       	ldi	r30, 0x80	; 128
     e90:	30 d0       	rcall	.+96     	; 0xef2 <__divsf3_pse+0x90>
     e92:	91 50       	subi	r25, 0x01	; 1
     e94:	50 40       	sbci	r21, 0x00	; 0
     e96:	e6 95       	lsr	r30
     e98:	00 1c       	adc	r0, r0
     e9a:	ca f7       	brpl	.-14     	; 0xe8e <__divsf3_pse+0x2c>
     e9c:	29 d0       	rcall	.+82     	; 0xef0 <__divsf3_pse+0x8e>
     e9e:	fe 2f       	mov	r31, r30
     ea0:	27 d0       	rcall	.+78     	; 0xef0 <__divsf3_pse+0x8e>
     ea2:	66 0f       	add	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	bb 1f       	adc	r27, r27
     eaa:	26 17       	cp	r18, r22
     eac:	37 07       	cpc	r19, r23
     eae:	48 07       	cpc	r20, r24
     eb0:	ab 07       	cpc	r26, r27
     eb2:	b0 e8       	ldi	r27, 0x80	; 128
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <__divsf3_pse+0x56>
     eb6:	bb 0b       	sbc	r27, r27
     eb8:	80 2d       	mov	r24, r0
     eba:	bf 01       	movw	r22, r30
     ebc:	ff 27       	eor	r31, r31
     ebe:	93 58       	subi	r25, 0x83	; 131
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255
     ec2:	2a f0       	brmi	.+10     	; 0xece <__divsf3_pse+0x6c>
     ec4:	9e 3f       	cpi	r25, 0xFE	; 254
     ec6:	51 05       	cpc	r21, r1
     ec8:	68 f0       	brcs	.+26     	; 0xee4 <__divsf3_pse+0x82>
     eca:	79 c0       	rjmp	.+242    	; 0xfbe <__fp_inf>
     ecc:	c3 c0       	rjmp	.+390    	; 0x1054 <__fp_szero>
     ece:	5f 3f       	cpi	r21, 0xFF	; 255
     ed0:	ec f3       	brlt	.-6      	; 0xecc <__divsf3_pse+0x6a>
     ed2:	98 3e       	cpi	r25, 0xE8	; 232
     ed4:	dc f3       	brlt	.-10     	; 0xecc <__divsf3_pse+0x6a>
     ed6:	86 95       	lsr	r24
     ed8:	77 95       	ror	r23
     eda:	67 95       	ror	r22
     edc:	b7 95       	ror	r27
     ede:	f7 95       	ror	r31
     ee0:	9f 5f       	subi	r25, 0xFF	; 255
     ee2:	c9 f7       	brne	.-14     	; 0xed6 <__divsf3_pse+0x74>
     ee4:	88 0f       	add	r24, r24
     ee6:	91 1d       	adc	r25, r1
     ee8:	96 95       	lsr	r25
     eea:	87 95       	ror	r24
     eec:	97 f9       	bld	r25, 7
     eee:	08 95       	ret
     ef0:	e1 e0       	ldi	r30, 0x01	; 1
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	88 1f       	adc	r24, r24
     ef8:	bb 1f       	adc	r27, r27
     efa:	62 17       	cp	r22, r18
     efc:	73 07       	cpc	r23, r19
     efe:	84 07       	cpc	r24, r20
     f00:	ba 07       	cpc	r27, r26
     f02:	20 f0       	brcs	.+8      	; 0xf0c <__divsf3_pse+0xaa>
     f04:	62 1b       	sub	r22, r18
     f06:	73 0b       	sbc	r23, r19
     f08:	84 0b       	sbc	r24, r20
     f0a:	ba 0b       	sbc	r27, r26
     f0c:	ee 1f       	adc	r30, r30
     f0e:	88 f7       	brcc	.-30     	; 0xef2 <__divsf3_pse+0x90>
     f10:	e0 95       	com	r30
     f12:	08 95       	ret

00000f14 <__fixsfsi>:
     f14:	04 d0       	rcall	.+8      	; 0xf1e <__fixunssfsi>
     f16:	68 94       	set
     f18:	b1 11       	cpse	r27, r1
     f1a:	9c c0       	rjmp	.+312    	; 0x1054 <__fp_szero>
     f1c:	08 95       	ret

00000f1e <__fixunssfsi>:
     f1e:	7f d0       	rcall	.+254    	; 0x101e <__fp_splitA>
     f20:	88 f0       	brcs	.+34     	; 0xf44 <__fixunssfsi+0x26>
     f22:	9f 57       	subi	r25, 0x7F	; 127
     f24:	90 f0       	brcs	.+36     	; 0xf4a <__fixunssfsi+0x2c>
     f26:	b9 2f       	mov	r27, r25
     f28:	99 27       	eor	r25, r25
     f2a:	b7 51       	subi	r27, 0x17	; 23
     f2c:	a0 f0       	brcs	.+40     	; 0xf56 <__fixunssfsi+0x38>
     f2e:	d1 f0       	breq	.+52     	; 0xf64 <__fixunssfsi+0x46>
     f30:	66 0f       	add	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	88 1f       	adc	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	1a f0       	brmi	.+6      	; 0xf40 <__fixunssfsi+0x22>
     f3a:	ba 95       	dec	r27
     f3c:	c9 f7       	brne	.-14     	; 0xf30 <__fixunssfsi+0x12>
     f3e:	12 c0       	rjmp	.+36     	; 0xf64 <__fixunssfsi+0x46>
     f40:	b1 30       	cpi	r27, 0x01	; 1
     f42:	81 f0       	breq	.+32     	; 0xf64 <__fixunssfsi+0x46>
     f44:	86 d0       	rcall	.+268    	; 0x1052 <__fp_zero>
     f46:	b1 e0       	ldi	r27, 0x01	; 1
     f48:	08 95       	ret
     f4a:	83 c0       	rjmp	.+262    	; 0x1052 <__fp_zero>
     f4c:	67 2f       	mov	r22, r23
     f4e:	78 2f       	mov	r23, r24
     f50:	88 27       	eor	r24, r24
     f52:	b8 5f       	subi	r27, 0xF8	; 248
     f54:	39 f0       	breq	.+14     	; 0xf64 <__fixunssfsi+0x46>
     f56:	b9 3f       	cpi	r27, 0xF9	; 249
     f58:	cc f3       	brlt	.-14     	; 0xf4c <__fixunssfsi+0x2e>
     f5a:	86 95       	lsr	r24
     f5c:	77 95       	ror	r23
     f5e:	67 95       	ror	r22
     f60:	b3 95       	inc	r27
     f62:	d9 f7       	brne	.-10     	; 0xf5a <__fixunssfsi+0x3c>
     f64:	3e f4       	brtc	.+14     	; 0xf74 <__fixunssfsi+0x56>
     f66:	90 95       	com	r25
     f68:	80 95       	com	r24
     f6a:	70 95       	com	r23
     f6c:	61 95       	neg	r22
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	08 95       	ret

00000f76 <__fp_cmp>:
     f76:	99 0f       	add	r25, r25
     f78:	00 08       	sbc	r0, r0
     f7a:	55 0f       	add	r21, r21
     f7c:	aa 0b       	sbc	r26, r26
     f7e:	e0 e8       	ldi	r30, 0x80	; 128
     f80:	fe ef       	ldi	r31, 0xFE	; 254
     f82:	16 16       	cp	r1, r22
     f84:	17 06       	cpc	r1, r23
     f86:	e8 07       	cpc	r30, r24
     f88:	f9 07       	cpc	r31, r25
     f8a:	c0 f0       	brcs	.+48     	; 0xfbc <__fp_cmp+0x46>
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	e4 07       	cpc	r30, r20
     f92:	f5 07       	cpc	r31, r21
     f94:	98 f0       	brcs	.+38     	; 0xfbc <__fp_cmp+0x46>
     f96:	62 1b       	sub	r22, r18
     f98:	73 0b       	sbc	r23, r19
     f9a:	84 0b       	sbc	r24, r20
     f9c:	95 0b       	sbc	r25, r21
     f9e:	39 f4       	brne	.+14     	; 0xfae <__fp_cmp+0x38>
     fa0:	0a 26       	eor	r0, r26
     fa2:	61 f0       	breq	.+24     	; 0xfbc <__fp_cmp+0x46>
     fa4:	23 2b       	or	r18, r19
     fa6:	24 2b       	or	r18, r20
     fa8:	25 2b       	or	r18, r21
     faa:	21 f4       	brne	.+8      	; 0xfb4 <__fp_cmp+0x3e>
     fac:	08 95       	ret
     fae:	0a 26       	eor	r0, r26
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <__fp_cmp+0x3e>
     fb2:	a1 40       	sbci	r26, 0x01	; 1
     fb4:	a6 95       	lsr	r26
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	81 1d       	adc	r24, r1
     fba:	81 1d       	adc	r24, r1
     fbc:	08 95       	ret

00000fbe <__fp_inf>:
     fbe:	97 f9       	bld	r25, 7
     fc0:	9f 67       	ori	r25, 0x7F	; 127
     fc2:	80 e8       	ldi	r24, 0x80	; 128
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	08 95       	ret

00000fca <__fp_nan>:
     fca:	9f ef       	ldi	r25, 0xFF	; 255
     fcc:	80 ec       	ldi	r24, 0xC0	; 192
     fce:	08 95       	ret

00000fd0 <__fp_pscA>:
     fd0:	00 24       	eor	r0, r0
     fd2:	0a 94       	dec	r0
     fd4:	16 16       	cp	r1, r22
     fd6:	17 06       	cpc	r1, r23
     fd8:	18 06       	cpc	r1, r24
     fda:	09 06       	cpc	r0, r25
     fdc:	08 95       	ret

00000fde <__fp_pscB>:
     fde:	00 24       	eor	r0, r0
     fe0:	0a 94       	dec	r0
     fe2:	12 16       	cp	r1, r18
     fe4:	13 06       	cpc	r1, r19
     fe6:	14 06       	cpc	r1, r20
     fe8:	05 06       	cpc	r0, r21
     fea:	08 95       	ret

00000fec <__fp_round>:
     fec:	09 2e       	mov	r0, r25
     fee:	03 94       	inc	r0
     ff0:	00 0c       	add	r0, r0
     ff2:	11 f4       	brne	.+4      	; 0xff8 <__fp_round+0xc>
     ff4:	88 23       	and	r24, r24
     ff6:	52 f0       	brmi	.+20     	; 0x100c <__fp_round+0x20>
     ff8:	bb 0f       	add	r27, r27
     ffa:	40 f4       	brcc	.+16     	; 0x100c <__fp_round+0x20>
     ffc:	bf 2b       	or	r27, r31
     ffe:	11 f4       	brne	.+4      	; 0x1004 <__fp_round+0x18>
    1000:	60 ff       	sbrs	r22, 0
    1002:	04 c0       	rjmp	.+8      	; 0x100c <__fp_round+0x20>
    1004:	6f 5f       	subi	r22, 0xFF	; 255
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	08 95       	ret

0000100e <__fp_split3>:
    100e:	57 fd       	sbrc	r21, 7
    1010:	90 58       	subi	r25, 0x80	; 128
    1012:	44 0f       	add	r20, r20
    1014:	55 1f       	adc	r21, r21
    1016:	59 f0       	breq	.+22     	; 0x102e <__fp_splitA+0x10>
    1018:	5f 3f       	cpi	r21, 0xFF	; 255
    101a:	71 f0       	breq	.+28     	; 0x1038 <__fp_splitA+0x1a>
    101c:	47 95       	ror	r20

0000101e <__fp_splitA>:
    101e:	88 0f       	add	r24, r24
    1020:	97 fb       	bst	r25, 7
    1022:	99 1f       	adc	r25, r25
    1024:	61 f0       	breq	.+24     	; 0x103e <__fp_splitA+0x20>
    1026:	9f 3f       	cpi	r25, 0xFF	; 255
    1028:	79 f0       	breq	.+30     	; 0x1048 <__fp_splitA+0x2a>
    102a:	87 95       	ror	r24
    102c:	08 95       	ret
    102e:	12 16       	cp	r1, r18
    1030:	13 06       	cpc	r1, r19
    1032:	14 06       	cpc	r1, r20
    1034:	55 1f       	adc	r21, r21
    1036:	f2 cf       	rjmp	.-28     	; 0x101c <__fp_split3+0xe>
    1038:	46 95       	lsr	r20
    103a:	f1 df       	rcall	.-30     	; 0x101e <__fp_splitA>
    103c:	08 c0       	rjmp	.+16     	; 0x104e <__fp_splitA+0x30>
    103e:	16 16       	cp	r1, r22
    1040:	17 06       	cpc	r1, r23
    1042:	18 06       	cpc	r1, r24
    1044:	99 1f       	adc	r25, r25
    1046:	f1 cf       	rjmp	.-30     	; 0x102a <__fp_splitA+0xc>
    1048:	86 95       	lsr	r24
    104a:	71 05       	cpc	r23, r1
    104c:	61 05       	cpc	r22, r1
    104e:	08 94       	sec
    1050:	08 95       	ret

00001052 <__fp_zero>:
    1052:	e8 94       	clt

00001054 <__fp_szero>:
    1054:	bb 27       	eor	r27, r27
    1056:	66 27       	eor	r22, r22
    1058:	77 27       	eor	r23, r23
    105a:	cb 01       	movw	r24, r22
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <__gesf2>:
    1060:	8a df       	rcall	.-236    	; 0xf76 <__fp_cmp>
    1062:	08 f4       	brcc	.+2      	; 0x1066 <__gesf2+0x6>
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	08 95       	ret

00001068 <__mulsf3>:
    1068:	0b d0       	rcall	.+22     	; 0x1080 <__mulsf3x>
    106a:	c0 cf       	rjmp	.-128    	; 0xfec <__fp_round>
    106c:	b1 df       	rcall	.-158    	; 0xfd0 <__fp_pscA>
    106e:	28 f0       	brcs	.+10     	; 0x107a <__mulsf3+0x12>
    1070:	b6 df       	rcall	.-148    	; 0xfde <__fp_pscB>
    1072:	18 f0       	brcs	.+6      	; 0x107a <__mulsf3+0x12>
    1074:	95 23       	and	r25, r21
    1076:	09 f0       	breq	.+2      	; 0x107a <__mulsf3+0x12>
    1078:	a2 cf       	rjmp	.-188    	; 0xfbe <__fp_inf>
    107a:	a7 cf       	rjmp	.-178    	; 0xfca <__fp_nan>
    107c:	11 24       	eor	r1, r1
    107e:	ea cf       	rjmp	.-44     	; 0x1054 <__fp_szero>

00001080 <__mulsf3x>:
    1080:	c6 df       	rcall	.-116    	; 0x100e <__fp_split3>
    1082:	a0 f3       	brcs	.-24     	; 0x106c <__mulsf3+0x4>

00001084 <__mulsf3_pse>:
    1084:	95 9f       	mul	r25, r21
    1086:	d1 f3       	breq	.-12     	; 0x107c <__mulsf3+0x14>
    1088:	95 0f       	add	r25, r21
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	55 1f       	adc	r21, r21
    108e:	62 9f       	mul	r22, r18
    1090:	f0 01       	movw	r30, r0
    1092:	72 9f       	mul	r23, r18
    1094:	bb 27       	eor	r27, r27
    1096:	f0 0d       	add	r31, r0
    1098:	b1 1d       	adc	r27, r1
    109a:	63 9f       	mul	r22, r19
    109c:	aa 27       	eor	r26, r26
    109e:	f0 0d       	add	r31, r0
    10a0:	b1 1d       	adc	r27, r1
    10a2:	aa 1f       	adc	r26, r26
    10a4:	64 9f       	mul	r22, r20
    10a6:	66 27       	eor	r22, r22
    10a8:	b0 0d       	add	r27, r0
    10aa:	a1 1d       	adc	r26, r1
    10ac:	66 1f       	adc	r22, r22
    10ae:	82 9f       	mul	r24, r18
    10b0:	22 27       	eor	r18, r18
    10b2:	b0 0d       	add	r27, r0
    10b4:	a1 1d       	adc	r26, r1
    10b6:	62 1f       	adc	r22, r18
    10b8:	73 9f       	mul	r23, r19
    10ba:	b0 0d       	add	r27, r0
    10bc:	a1 1d       	adc	r26, r1
    10be:	62 1f       	adc	r22, r18
    10c0:	83 9f       	mul	r24, r19
    10c2:	a0 0d       	add	r26, r0
    10c4:	61 1d       	adc	r22, r1
    10c6:	22 1f       	adc	r18, r18
    10c8:	74 9f       	mul	r23, r20
    10ca:	33 27       	eor	r19, r19
    10cc:	a0 0d       	add	r26, r0
    10ce:	61 1d       	adc	r22, r1
    10d0:	23 1f       	adc	r18, r19
    10d2:	84 9f       	mul	r24, r20
    10d4:	60 0d       	add	r22, r0
    10d6:	21 1d       	adc	r18, r1
    10d8:	82 2f       	mov	r24, r18
    10da:	76 2f       	mov	r23, r22
    10dc:	6a 2f       	mov	r22, r26
    10de:	11 24       	eor	r1, r1
    10e0:	9f 57       	subi	r25, 0x7F	; 127
    10e2:	50 40       	sbci	r21, 0x00	; 0
    10e4:	8a f0       	brmi	.+34     	; 0x1108 <__mulsf3_pse+0x84>
    10e6:	e1 f0       	breq	.+56     	; 0x1120 <__mulsf3_pse+0x9c>
    10e8:	88 23       	and	r24, r24
    10ea:	4a f0       	brmi	.+18     	; 0x10fe <__mulsf3_pse+0x7a>
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	bb 1f       	adc	r27, r27
    10f2:	66 1f       	adc	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	91 50       	subi	r25, 0x01	; 1
    10fa:	50 40       	sbci	r21, 0x00	; 0
    10fc:	a9 f7       	brne	.-22     	; 0x10e8 <__mulsf3_pse+0x64>
    10fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1100:	51 05       	cpc	r21, r1
    1102:	70 f0       	brcs	.+28     	; 0x1120 <__mulsf3_pse+0x9c>
    1104:	5c cf       	rjmp	.-328    	; 0xfbe <__fp_inf>
    1106:	a6 cf       	rjmp	.-180    	; 0x1054 <__fp_szero>
    1108:	5f 3f       	cpi	r21, 0xFF	; 255
    110a:	ec f3       	brlt	.-6      	; 0x1106 <__mulsf3_pse+0x82>
    110c:	98 3e       	cpi	r25, 0xE8	; 232
    110e:	dc f3       	brlt	.-10     	; 0x1106 <__mulsf3_pse+0x82>
    1110:	86 95       	lsr	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	b7 95       	ror	r27
    1118:	f7 95       	ror	r31
    111a:	e7 95       	ror	r30
    111c:	9f 5f       	subi	r25, 0xFF	; 255
    111e:	c1 f7       	brne	.-16     	; 0x1110 <__mulsf3_pse+0x8c>
    1120:	fe 2b       	or	r31, r30
    1122:	88 0f       	add	r24, r24
    1124:	91 1d       	adc	r25, r1
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	97 f9       	bld	r25, 7
    112c:	08 95       	ret

0000112e <__tablejump2__>:
    112e:	ee 0f       	add	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	00 24       	eor	r0, r0
    1134:	00 1c       	adc	r0, r0
    1136:	0b be       	out	0x3b, r0	; 59
    1138:	07 90       	elpm	r0, Z+
    113a:	f6 91       	elpm	r31, Z
    113c:	e0 2d       	mov	r30, r0
    113e:	09 94       	ijmp

00001140 <_exit>:
    1140:	f8 94       	cli

00001142 <__stop_program>:
    1142:	ff cf       	rjmp	.-2      	; 0x1142 <__stop_program>
