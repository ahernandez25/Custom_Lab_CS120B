
Hangman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00000968  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800170  00800170  00000a6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001721  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b55  00000000  00000000  0000232d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d92  00000000  00000000  00002e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00003c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c1  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0c  00000000  00000000  000046b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000050c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>
   2:	00 00       	nop
   4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
   6:	00 00       	nop
   8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
   a:	00 00       	nop
   c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
   e:	00 00       	nop
  10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
  12:	00 00       	nop
  14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
  16:	00 00       	nop
  18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
  1e:	00 00       	nop
  20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
  22:	00 00       	nop
  24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
  26:	00 00       	nop
  28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
  2e:	00 00       	nop
  30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
  32:	00 00       	nop
  34:	10 c1       	rjmp	.+544    	; 0x256 <__vector_13>
  36:	00 00       	nop
  38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
  3e:	00 00       	nop
  40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
  42:	00 00       	nop
  44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
  46:	00 00       	nop
  48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
  4e:	00 00       	nop
  50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
  52:	00 00       	nop
  54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
  56:	00 00       	nop
  58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
  5e:	00 00       	nop
  60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
  62:	00 00       	nop
  64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
  66:	00 00       	nop
  68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
  6e:	00 00       	nop
  70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
  72:	00 00       	nop
  74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
  76:	00 00       	nop
  78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
  7e:	00 00       	nop
  80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
  82:	00 00       	nop
  84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
  86:	00 00       	nop
  88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e5 01       	movw	r28, r10
  8e:	0e 03       	fmul	r16, r22
  90:	0e 03       	fmul	r16, r22
  92:	0e 03       	fmul	r16, r22
  94:	0e 03       	fmul	r16, r22
  96:	0e 03       	fmul	r16, r22
  98:	0e 03       	fmul	r16, r22
  9a:	0e 03       	fmul	r16, r22
  9c:	0e 03       	fmul	r16, r22
  9e:	0e 03       	fmul	r16, r22
  a0:	0e 03       	fmul	r16, r22
  a2:	0e 03       	fmul	r16, r22
  a4:	0e 03       	fmul	r16, r22
  a6:	0e 03       	fmul	r16, r22
  a8:	0e 03       	fmul	r16, r22
  aa:	0e 03       	fmul	r16, r22
  ac:	0e 03       	fmul	r16, r22
  ae:	0e 03       	fmul	r16, r22
  b0:	0e 03       	fmul	r16, r22
  b2:	0e 03       	fmul	r16, r22
  b4:	0e 03       	fmul	r16, r22
  b6:	0e 03       	fmul	r16, r22
  b8:	0e 03       	fmul	r16, r22
  ba:	0e 03       	fmul	r16, r22
  bc:	0e 03       	fmul	r16, r22
  be:	0e 03       	fmul	r16, r22
  c0:	0e 03       	fmul	r16, r22
  c2:	0e 03       	fmul	r16, r22
  c4:	0e 03       	fmul	r16, r22
  c6:	0e 03       	fmul	r16, r22
  c8:	0e 03       	fmul	r16, r22
  ca:	0e 03       	fmul	r16, r22
  cc:	0e 03       	fmul	r16, r22
  ce:	0e 03       	fmul	r16, r22
  d0:	0e 03       	fmul	r16, r22
  d2:	0e 03       	fmul	r16, r22
  d4:	0e 03       	fmul	r16, r22
  d6:	0e 03       	fmul	r16, r22
  d8:	0e 03       	fmul	r16, r22
  da:	0e 03       	fmul	r16, r22
  dc:	0e 03       	fmul	r16, r22
  de:	0e 03       	fmul	r16, r22
  e0:	0e 03       	fmul	r16, r22
  e2:	0e 03       	fmul	r16, r22
  e4:	0e 03       	fmul	r16, r22
  e6:	0e 03       	fmul	r16, r22
  e8:	0e 03       	fmul	r16, r22
  ea:	0e 03       	fmul	r16, r22
  ec:	0e 03       	fmul	r16, r22
  ee:	eb 01       	movw	r28, r22
  f0:	f1 01       	movw	r30, r2
  f2:	14 02       	muls	r17, r20
  f4:	37 02       	muls	r19, r23
  f6:	5a 02       	muls	r21, r26
  f8:	7d 02       	muls	r23, r29
  fa:	a0 02       	muls	r26, r16
  fc:	c3 02       	muls	r28, r19
  fe:	e7 02       	muls	r30, r23

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf ef       	ldi	r28, 0xFF	; 255
 106:	d0 e4       	ldi	r29, 0x40	; 64
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
 10c:	11 e0       	ldi	r17, 0x01	; 1
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	e8 e6       	ldi	r30, 0x68	; 104
 114:	f9 e0       	ldi	r31, 0x09	; 9
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	0b bf       	out	0x3b, r16	; 59
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x14>
 11c:	07 90       	elpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a0 37       	cpi	r26, 0x70	; 112
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x10>

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	a0 e7       	ldi	r26, 0x70	; 112
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	a4 39       	cpi	r26, 0x94	; 148
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	8c d3       	rcall	.+1816   	; 0x850 <main>
 138:	15 c4       	rjmp	.+2090   	; 0x964 <_exit>

0000013a <__bad_interrupt>:
 13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <delay_ms>:
	while(!found && (index < 17)){
		if(wordToGuess[index] == ' '){
			found = 1;
		}
		index++;
		length++;
 13c:	18 16       	cp	r1, r24
 13e:	19 06       	cpc	r1, r25
 140:	5c f0       	brlt	.+22     	; 0x158 <delay_ms+0x1c>
 142:	08 95       	ret
 144:	00 00       	nop
 146:	21 50       	subi	r18, 0x01	; 1
 148:	31 09       	sbc	r19, r1
 14a:	e1 f7       	brne	.-8      	; 0x144 <delay_ms+0x8>
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	84 17       	cp	r24, r20
 152:	95 07       	cpc	r25, r21
 154:	19 f4       	brne	.+6      	; 0x15c <delay_ms+0x20>
 156:	08 95       	ret
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	27 e0       	ldi	r18, 0x07	; 7
 15e:	33 e0       	ldi	r19, 0x03	; 3
 160:	f1 cf       	rjmp	.-30     	; 0x144 <delay_ms+0x8>

00000162 <LCD_WriteCommand>:
 162:	10 98       	cbi	0x02, 0	; 2
 164:	8b b9       	out	0x0b, r24	; 11
 166:	11 9a       	sbi	0x02, 1	; 2
 168:	00 00       	nop
 16a:	11 98       	cbi	0x02, 1	; 2
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	e5 cf       	rjmp	.-54     	; 0x13c <delay_ms>
 172:	08 95       	ret

00000174 <LCD_ClearScreen>:
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	f5 cf       	rjmp	.-22     	; 0x162 <LCD_WriteCommand>
 178:	08 95       	ret

0000017a <LCD_Cursor>:
 17a:	81 31       	cpi	r24, 0x11	; 17
 17c:	18 f4       	brcc	.+6      	; 0x184 <LCD_Cursor+0xa>
 17e:	81 58       	subi	r24, 0x81	; 129
 180:	f0 cf       	rjmp	.-32     	; 0x162 <LCD_WriteCommand>
 182:	08 95       	ret
 184:	81 55       	subi	r24, 0x51	; 81
 186:	ed cf       	rjmp	.-38     	; 0x162 <LCD_WriteCommand>
 188:	08 95       	ret

0000018a <LCD_init>:
 18a:	84 e6       	ldi	r24, 0x64	; 100
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	d6 df       	rcall	.-84     	; 0x13c <delay_ms>
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	e7 df       	rcall	.-50     	; 0x162 <LCD_WriteCommand>
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	e5 df       	rcall	.-54     	; 0x162 <LCD_WriteCommand>
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	e3 df       	rcall	.-58     	; 0x162 <LCD_WriteCommand>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	e1 df       	rcall	.-62     	; 0x162 <LCD_WriteCommand>
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	cb cf       	rjmp	.-106    	; 0x13c <delay_ms>
 1a6:	08 95       	ret

000001a8 <LCD_WriteData>:
 1a8:	10 9a       	sbi	0x02, 0	; 2
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	11 9a       	sbi	0x02, 1	; 2
 1ae:	00 00       	nop
 1b0:	11 98       	cbi	0x02, 1	; 2
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	c2 cf       	rjmp	.-124    	; 0x13c <delay_ms>
 1b8:	08 95       	ret

000001ba <LCD_DisplayString>:
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	18 2f       	mov	r17, r24
 1c4:	eb 01       	movw	r28, r22
 1c6:	d6 df       	rcall	.-84     	; 0x174 <LCD_ClearScreen>
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	51 f0       	breq	.+20     	; 0x1e2 <LCD_DisplayString+0x28>
 1ce:	01 e0       	ldi	r16, 0x01	; 1
 1d0:	01 0f       	add	r16, r17
 1d2:	81 2f       	mov	r24, r17
 1d4:	d2 df       	rcall	.-92     	; 0x17a <LCD_Cursor>
 1d6:	89 91       	ld	r24, Y+
 1d8:	e7 df       	rcall	.-50     	; 0x1a8 <LCD_WriteData>
 1da:	10 2f       	mov	r17, r16
 1dc:	88 81       	ld	r24, Y
 1de:	81 11       	cpse	r24, r1
 1e0:	f6 cf       	rjmp	.-20     	; 0x1ce <LCD_DisplayString+0x14>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <TimerSet>:
 1ec:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <_avr_timer_M>
 1f0:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <_avr_timer_M+0x1>
 1f4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_M+0x2>
 1f8:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_M+0x3>
 1fc:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <_avr_timer_cntcurr>
 200:	70 93 8c 01 	sts	0x018C, r23	; 0x80018c <_avr_timer_cntcurr+0x1>
 204:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_avr_timer_cntcurr+0x2>
 208:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <_avr_timer_cntcurr+0x3>
 20c:	08 95       	ret

0000020e <TimerOn>:
 20e:	8b e0       	ldi	r24, 0x0B	; 11
 210:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 214:	8d e7       	ldi	r24, 0x7D	; 125
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 21c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 226:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 22a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 22e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <_avr_timer_M>
 232:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <_avr_timer_M+0x1>
 236:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <_avr_timer_M+0x2>
 23a:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <_avr_timer_M+0x3>
 23e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <_avr_timer_cntcurr>
 242:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <_avr_timer_cntcurr+0x1>
 246:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <_avr_timer_cntcurr+0x2>
 24a:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <_avr_timer_cntcurr+0x3>
 24e:	8f b7       	in	r24, 0x3f	; 63
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8f bf       	out	0x3f, r24	; 63
 254:	08 95       	ret

00000256 <__vector_13>:
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <_avr_timer_cntcurr>
 26c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <_avr_timer_cntcurr+0x1>
 270:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <_avr_timer_cntcurr+0x2>
 274:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <_avr_timer_cntcurr+0x3>
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	a1 09       	sbc	r26, r1
 27c:	b1 09       	sbc	r27, r1
 27e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <_avr_timer_cntcurr>
 282:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <_avr_timer_cntcurr+0x1>
 286:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <_avr_timer_cntcurr+0x2>
 28a:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <_avr_timer_cntcurr+0x3>
 28e:	89 2b       	or	r24, r25
 290:	8a 2b       	or	r24, r26
 292:	8b 2b       	or	r24, r27
 294:	99 f4       	brne	.+38     	; 0x2bc <__vector_13+0x66>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <TimerFlag>
 29c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <_avr_timer_M>
 2a0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <_avr_timer_M+0x1>
 2a4:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <_avr_timer_M+0x2>
 2a8:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <_avr_timer_M+0x3>
 2ac:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <_avr_timer_cntcurr>
 2b0:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <_avr_timer_cntcurr+0x1>
 2b4:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <_avr_timer_cntcurr+0x2>
 2b8:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <_avr_timer_cntcurr+0x3>
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <GetKeypadKey>:
 2ce:	8f ee       	ldi	r24, 0xEF	; 239
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	00 00       	nop
 2d4:	30 9b       	sbis	0x06, 0	; 6
 2d6:	2e c0       	rjmp	.+92     	; 0x334 <GetKeypadKey+0x66>
 2d8:	31 9b       	sbis	0x06, 1	; 6
 2da:	2e c0       	rjmp	.+92     	; 0x338 <GetKeypadKey+0x6a>
 2dc:	32 9b       	sbis	0x06, 2	; 6
 2de:	2e c0       	rjmp	.+92     	; 0x33c <GetKeypadKey+0x6e>
 2e0:	33 9b       	sbis	0x06, 3	; 6
 2e2:	2e c0       	rjmp	.+92     	; 0x340 <GetKeypadKey+0x72>
 2e4:	8f ed       	ldi	r24, 0xDF	; 223
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	00 00       	nop
 2ea:	30 9b       	sbis	0x06, 0	; 6
 2ec:	2b c0       	rjmp	.+86     	; 0x344 <GetKeypadKey+0x76>
 2ee:	31 9b       	sbis	0x06, 1	; 6
 2f0:	2b c0       	rjmp	.+86     	; 0x348 <GetKeypadKey+0x7a>
 2f2:	32 9b       	sbis	0x06, 2	; 6
 2f4:	2b c0       	rjmp	.+86     	; 0x34c <GetKeypadKey+0x7e>
 2f6:	33 9b       	sbis	0x06, 3	; 6
 2f8:	2b c0       	rjmp	.+86     	; 0x350 <GetKeypadKey+0x82>
 2fa:	8f eb       	ldi	r24, 0xBF	; 191
 2fc:	88 b9       	out	0x08, r24	; 8
 2fe:	00 00       	nop
 300:	30 9b       	sbis	0x06, 0	; 6
 302:	28 c0       	rjmp	.+80     	; 0x354 <GetKeypadKey+0x86>
 304:	31 9b       	sbis	0x06, 1	; 6
 306:	28 c0       	rjmp	.+80     	; 0x358 <GetKeypadKey+0x8a>
 308:	32 9b       	sbis	0x06, 2	; 6
 30a:	28 c0       	rjmp	.+80     	; 0x35c <GetKeypadKey+0x8e>
 30c:	33 9b       	sbis	0x06, 3	; 6
 30e:	28 c0       	rjmp	.+80     	; 0x360 <GetKeypadKey+0x92>
 310:	8f e7       	ldi	r24, 0x7F	; 127
 312:	88 b9       	out	0x08, r24	; 8
 314:	00 00       	nop
 316:	30 9b       	sbis	0x06, 0	; 6
 318:	25 c0       	rjmp	.+74     	; 0x364 <GetKeypadKey+0x96>
 31a:	31 9b       	sbis	0x06, 1	; 6
 31c:	25 c0       	rjmp	.+74     	; 0x368 <GetKeypadKey+0x9a>
 31e:	32 9b       	sbis	0x06, 2	; 6
 320:	25 c0       	rjmp	.+74     	; 0x36c <GetKeypadKey+0x9e>
 322:	33 9b       	sbis	0x06, 3	; 6
 324:	25 c0       	rjmp	.+74     	; 0x370 <GetKeypadKey+0xa2>
 326:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <click>
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <click>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
 334:	81 e3       	ldi	r24, 0x31	; 49
 336:	08 95       	ret
 338:	84 e3       	ldi	r24, 0x34	; 52
 33a:	08 95       	ret
 33c:	87 e3       	ldi	r24, 0x37	; 55
 33e:	08 95       	ret
 340:	8a e2       	ldi	r24, 0x2A	; 42
 342:	08 95       	ret
 344:	82 e3       	ldi	r24, 0x32	; 50
 346:	08 95       	ret
 348:	85 e3       	ldi	r24, 0x35	; 53
 34a:	08 95       	ret
 34c:	88 e3       	ldi	r24, 0x38	; 56
 34e:	08 95       	ret
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	08 95       	ret
 354:	83 e3       	ldi	r24, 0x33	; 51
 356:	08 95       	ret
 358:	86 e3       	ldi	r24, 0x36	; 54
 35a:	08 95       	ret
 35c:	89 e3       	ldi	r24, 0x39	; 57
 35e:	08 95       	ret
 360:	83 e2       	ldi	r24, 0x23	; 35
 362:	08 95       	ret
 364:	81 e4       	ldi	r24, 0x41	; 65
 366:	08 95       	ret
 368:	82 e4       	ldi	r24, 0x42	; 66
 36a:	08 95       	ret
 36c:	83 e4       	ldi	r24, 0x43	; 67
 36e:	08 95       	ret
 370:	84 e4       	ldi	r24, 0x44	; 68
 372:	08 95       	ret

00000374 <KeypadTick>:
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	91 05       	cpc	r25, r1
 37e:	c9 f0       	breq	.+50     	; 0x3b2 <KeypadTick+0x3e>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	91 05       	cpc	r25, r1
 384:	31 f0       	breq	.+12     	; 0x392 <KeypadTick+0x1e>
 386:	89 2b       	or	r24, r25
 388:	21 f0       	breq	.+8      	; 0x392 <KeypadTick+0x1e>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <State>
 390:	02 c0       	rjmp	.+4      	; 0x396 <KeypadTick+0x22>
 392:	c1 e0       	ldi	r28, 0x01	; 1
 394:	d0 e0       	ldi	r29, 0x00	; 0
 396:	c1 30       	cpi	r28, 0x01	; 1
 398:	d1 05       	cpc	r29, r1
 39a:	39 f0       	breq	.+14     	; 0x3aa <KeypadTick+0x36>
 39c:	c2 30       	cpi	r28, 0x02	; 2
 39e:	d1 05       	cpc	r29, r1
 3a0:	41 f0       	breq	.+16     	; 0x3b2 <KeypadTick+0x3e>
 3a2:	20 97       	sbiw	r28, 0x00	; 0
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <KeypadTick+0x34>
 3a6:	54 c1       	rjmp	.+680    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3a8:	35 c1       	rjmp	.+618    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 3aa:	91 df       	rcall	.-222    	; 0x2ce <GetKeypadKey>
 3ac:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <x>
 3b0:	4f c1       	rjmp	.+670    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3b2:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <x>
 3b6:	8e 2f       	mov	r24, r30
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	8a 33       	cpi	r24, 0x3A	; 58
 3bc:	91 05       	cpc	r25, r1
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <KeypadTick+0x4e>
 3c0:	2d c1       	rjmp	.+602    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 3c2:	fc 01       	movw	r30, r24
 3c4:	ea 5b       	subi	r30, 0xBA	; 186
 3c6:	ff 4f       	sbci	r31, 0xFF	; 255
 3c8:	c4 c2       	rjmp	.+1416   	; 0x952 <__tablejump2__>
 3ca:	80 e2       	ldi	r24, 0x20	; 32
 3cc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 3d0:	c2 e0       	ldi	r28, 0x02	; 2
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	3d c1       	rjmp	.+634    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3d6:	80 e2       	ldi	r24, 0x20	; 32
 3d8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 3dc:	c2 e0       	ldi	r28, 0x02	; 2
 3de:	d0 e0       	ldi	r29, 0x00	; 0
 3e0:	37 c1       	rjmp	.+622    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3e2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <click>
 3e6:	8b ea       	ldi	r24, 0xAB	; 171
 3e8:	98 9f       	mul	r25, r24
 3ea:	81 2d       	mov	r24, r1
 3ec:	11 24       	eor	r1, r1
 3ee:	86 95       	lsr	r24
 3f0:	28 2f       	mov	r18, r24
 3f2:	22 0f       	add	r18, r18
 3f4:	82 0f       	add	r24, r18
 3f6:	98 1b       	sub	r25, r24
 3f8:	91 30       	cpi	r25, 0x01	; 1
 3fa:	31 f4       	brne	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	81 e4       	ldi	r24, 0x41	; 65
 3fe:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 402:	c2 e0       	ldi	r28, 0x02	; 2
 404:	d0 e0       	ldi	r29, 0x00	; 0
 406:	24 c1       	rjmp	.+584    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 408:	92 30       	cpi	r25, 0x02	; 2
 40a:	31 f4       	brne	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40c:	82 e4       	ldi	r24, 0x42	; 66
 40e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 412:	c2 e0       	ldi	r28, 0x02	; 2
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	1c c1       	rjmp	.+568    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 418:	91 11       	cpse	r25, r1
 41a:	03 c1       	rjmp	.+518    	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 41c:	83 e4       	ldi	r24, 0x43	; 67
 41e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 422:	c2 e0       	ldi	r28, 0x02	; 2
 424:	d0 e0       	ldi	r29, 0x00	; 0
 426:	14 c1       	rjmp	.+552    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 428:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <click>
 42c:	8b ea       	ldi	r24, 0xAB	; 171
 42e:	98 9f       	mul	r25, r24
 430:	81 2d       	mov	r24, r1
 432:	11 24       	eor	r1, r1
 434:	86 95       	lsr	r24
 436:	28 2f       	mov	r18, r24
 438:	22 0f       	add	r18, r18
 43a:	82 0f       	add	r24, r18
 43c:	98 1b       	sub	r25, r24
 43e:	91 30       	cpi	r25, 0x01	; 1
 440:	31 f4       	brne	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 442:	84 e4       	ldi	r24, 0x44	; 68
 444:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 448:	c2 e0       	ldi	r28, 0x02	; 2
 44a:	d0 e0       	ldi	r29, 0x00	; 0
 44c:	01 c1       	rjmp	.+514    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 44e:	92 30       	cpi	r25, 0x02	; 2
 450:	31 f4       	brne	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 452:	85 e4       	ldi	r24, 0x45	; 69
 454:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 458:	c2 e0       	ldi	r28, 0x02	; 2
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	f9 c0       	rjmp	.+498    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 45e:	91 11       	cpse	r25, r1
 460:	e3 c0       	rjmp	.+454    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 462:	86 e4       	ldi	r24, 0x46	; 70
 464:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 468:	c2 e0       	ldi	r28, 0x02	; 2
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	f1 c0       	rjmp	.+482    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 46e:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <click>
 472:	8b ea       	ldi	r24, 0xAB	; 171
 474:	98 9f       	mul	r25, r24
 476:	81 2d       	mov	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	86 95       	lsr	r24
 47c:	28 2f       	mov	r18, r24
 47e:	22 0f       	add	r18, r18
 480:	82 0f       	add	r24, r18
 482:	98 1b       	sub	r25, r24
 484:	91 30       	cpi	r25, 0x01	; 1
 486:	31 f4       	brne	.+12     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 488:	87 e4       	ldi	r24, 0x47	; 71
 48a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 48e:	c2 e0       	ldi	r28, 0x02	; 2
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	de c0       	rjmp	.+444    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 494:	92 30       	cpi	r25, 0x02	; 2
 496:	31 f4       	brne	.+12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 498:	88 e4       	ldi	r24, 0x48	; 72
 49a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 49e:	c2 e0       	ldi	r28, 0x02	; 2
 4a0:	d0 e0       	ldi	r29, 0x00	; 0
 4a2:	d6 c0       	rjmp	.+428    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4a4:	91 11       	cpse	r25, r1
 4a6:	c3 c0       	rjmp	.+390    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 4a8:	89 e4       	ldi	r24, 0x49	; 73
 4aa:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 4ae:	c2 e0       	ldi	r28, 0x02	; 2
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
 4b2:	ce c0       	rjmp	.+412    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4b4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <click>
 4b8:	8b ea       	ldi	r24, 0xAB	; 171
 4ba:	98 9f       	mul	r25, r24
 4bc:	81 2d       	mov	r24, r1
 4be:	11 24       	eor	r1, r1
 4c0:	86 95       	lsr	r24
 4c2:	28 2f       	mov	r18, r24
 4c4:	22 0f       	add	r18, r18
 4c6:	82 0f       	add	r24, r18
 4c8:	98 1b       	sub	r25, r24
 4ca:	91 30       	cpi	r25, 0x01	; 1
 4cc:	31 f4       	brne	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ce:	8a e4       	ldi	r24, 0x4A	; 74
 4d0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 4d4:	c2 e0       	ldi	r28, 0x02	; 2
 4d6:	d0 e0       	ldi	r29, 0x00	; 0
 4d8:	bb c0       	rjmp	.+374    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4da:	92 30       	cpi	r25, 0x02	; 2
 4dc:	31 f4       	brne	.+12     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4de:	8b e4       	ldi	r24, 0x4B	; 75
 4e0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 4e4:	c2 e0       	ldi	r28, 0x02	; 2
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	b3 c0       	rjmp	.+358    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4ea:	91 11       	cpse	r25, r1
 4ec:	a3 c0       	rjmp	.+326    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 4ee:	8c e4       	ldi	r24, 0x4C	; 76
 4f0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 4f4:	c2 e0       	ldi	r28, 0x02	; 2
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
 4f8:	ab c0       	rjmp	.+342    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4fa:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <click>
 4fe:	8b ea       	ldi	r24, 0xAB	; 171
 500:	98 9f       	mul	r25, r24
 502:	81 2d       	mov	r24, r1
 504:	11 24       	eor	r1, r1
 506:	86 95       	lsr	r24
 508:	28 2f       	mov	r18, r24
 50a:	22 0f       	add	r18, r18
 50c:	82 0f       	add	r24, r18
 50e:	98 1b       	sub	r25, r24
 510:	91 30       	cpi	r25, 0x01	; 1
 512:	31 f4       	brne	.+12     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 514:	8d e4       	ldi	r24, 0x4D	; 77
 516:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 51a:	c2 e0       	ldi	r28, 0x02	; 2
 51c:	d0 e0       	ldi	r29, 0x00	; 0
 51e:	98 c0       	rjmp	.+304    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 520:	92 30       	cpi	r25, 0x02	; 2
 522:	31 f4       	brne	.+12     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 524:	8e e4       	ldi	r24, 0x4E	; 78
 526:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 52a:	c2 e0       	ldi	r28, 0x02	; 2
 52c:	d0 e0       	ldi	r29, 0x00	; 0
 52e:	90 c0       	rjmp	.+288    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 530:	91 11       	cpse	r25, r1
 532:	83 c0       	rjmp	.+262    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 534:	80 e3       	ldi	r24, 0x30	; 48
 536:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 53a:	c2 e0       	ldi	r28, 0x02	; 2
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	88 c0       	rjmp	.+272    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 540:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <click>
 544:	83 70       	andi	r24, 0x03	; 3
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	31 f4       	brne	.+12     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 54a:	80 e5       	ldi	r24, 0x50	; 80
 54c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 550:	c2 e0       	ldi	r28, 0x02	; 2
 552:	d0 e0       	ldi	r29, 0x00	; 0
 554:	7d c0       	rjmp	.+250    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	31 f4       	brne	.+12     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 55a:	81 e5       	ldi	r24, 0x51	; 81
 55c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 560:	c2 e0       	ldi	r28, 0x02	; 2
 562:	d0 e0       	ldi	r29, 0x00	; 0
 564:	75 c0       	rjmp	.+234    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 566:	83 30       	cpi	r24, 0x03	; 3
 568:	31 f4       	brne	.+12     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 56a:	82 e5       	ldi	r24, 0x52	; 82
 56c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 570:	c2 e0       	ldi	r28, 0x02	; 2
 572:	d0 e0       	ldi	r29, 0x00	; 0
 574:	6d c0       	rjmp	.+218    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 576:	81 11       	cpse	r24, r1
 578:	63 c0       	rjmp	.+198    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 57a:	83 e5       	ldi	r24, 0x53	; 83
 57c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 580:	c2 e0       	ldi	r28, 0x02	; 2
 582:	d0 e0       	ldi	r29, 0x00	; 0
 584:	65 c0       	rjmp	.+202    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 586:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <click>
 58a:	8b ea       	ldi	r24, 0xAB	; 171
 58c:	98 9f       	mul	r25, r24
 58e:	81 2d       	mov	r24, r1
 590:	11 24       	eor	r1, r1
 592:	86 95       	lsr	r24
 594:	28 2f       	mov	r18, r24
 596:	22 0f       	add	r18, r18
 598:	82 0f       	add	r24, r18
 59a:	98 1b       	sub	r25, r24
 59c:	91 30       	cpi	r25, 0x01	; 1
 59e:	31 f4       	brne	.+12     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a0:	84 e5       	ldi	r24, 0x54	; 84
 5a2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5a6:	c2 e0       	ldi	r28, 0x02	; 2
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
 5aa:	52 c0       	rjmp	.+164    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5ac:	92 30       	cpi	r25, 0x02	; 2
 5ae:	31 f4       	brne	.+12     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5b0:	85 e5       	ldi	r24, 0x55	; 85
 5b2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5b6:	c2 e0       	ldi	r28, 0x02	; 2
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	4a c0       	rjmp	.+148    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5bc:	93 30       	cpi	r25, 0x03	; 3
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c0:	42 c0       	rjmp	.+132    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 5c2:	86 e5       	ldi	r24, 0x56	; 86
 5c4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5c8:	c2 e0       	ldi	r28, 0x02	; 2
 5ca:	d0 e0       	ldi	r29, 0x00	; 0
 5cc:	41 c0       	rjmp	.+130    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5ce:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <click>
 5d2:	83 70       	andi	r24, 0x03	; 3
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	31 f4       	brne	.+12     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5d8:	87 e5       	ldi	r24, 0x57	; 87
 5da:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5de:	c2 e0       	ldi	r28, 0x02	; 2
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	36 c0       	rjmp	.+108    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5e4:	82 30       	cpi	r24, 0x02	; 2
 5e6:	31 f4       	brne	.+12     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5e8:	88 e5       	ldi	r24, 0x58	; 88
 5ea:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5ee:	c2 e0       	ldi	r28, 0x02	; 2
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
 5f2:	2e c0       	rjmp	.+92     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5f4:	83 30       	cpi	r24, 0x03	; 3
 5f6:	31 f4       	brne	.+12     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5f8:	89 e5       	ldi	r24, 0x59	; 89
 5fa:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 5fe:	c2 e0       	ldi	r28, 0x02	; 2
 600:	d0 e0       	ldi	r29, 0x00	; 0
 602:	26 c0       	rjmp	.+76     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 604:	81 11       	cpse	r24, r1
 606:	22 c0       	rjmp	.+68     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 608:	8a e5       	ldi	r24, 0x5A	; 90
 60a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
 60e:	c2 e0       	ldi	r28, 0x02	; 2
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	1e c0       	rjmp	.+60     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <State>
 61a:	1a c0       	rjmp	.+52     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 61c:	c2 e0       	ldi	r28, 0x02	; 2
 61e:	d0 e0       	ldi	r29, 0x00	; 0
 620:	17 c0       	rjmp	.+46     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 622:	c2 e0       	ldi	r28, 0x02	; 2
 624:	d0 e0       	ldi	r29, 0x00	; 0
 626:	14 c0       	rjmp	.+40     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 628:	c2 e0       	ldi	r28, 0x02	; 2
 62a:	d0 e0       	ldi	r29, 0x00	; 0
 62c:	11 c0       	rjmp	.+34     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 62e:	c2 e0       	ldi	r28, 0x02	; 2
 630:	d0 e0       	ldi	r29, 0x00	; 0
 632:	0e c0       	rjmp	.+28     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 634:	c2 e0       	ldi	r28, 0x02	; 2
 636:	d0 e0       	ldi	r29, 0x00	; 0
 638:	0b c0       	rjmp	.+22     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 63a:	c2 e0       	ldi	r28, 0x02	; 2
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	08 c0       	rjmp	.+16     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 640:	c2 e0       	ldi	r28, 0x02	; 2
 642:	d0 e0       	ldi	r29, 0x00	; 0
 644:	05 c0       	rjmp	.+10     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 646:	c2 e0       	ldi	r28, 0x02	; 2
 648:	d0 e0       	ldi	r29, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64c:	c2 e0       	ldi	r28, 0x02	; 2
 64e:	d0 e0       	ldi	r29, 0x00	; 0
 650:	ce 01       	movw	r24, r28
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <N5110_Cmnd>:
 658:	cf 93       	push	r28
 65a:	c8 2f       	mov	r28, r24
 65c:	29 98       	cbi	0x05, 1	; 5
 65e:	68 d1       	rcall	.+720    	; 0x930 <SPI_SS_Enable>
 660:	8c 2f       	mov	r24, r28
 662:	72 d1       	rcall	.+740    	; 0x948 <SPI_Write>
 664:	29 9a       	sbi	0x05, 1	; 5
 666:	66 d1       	rcall	.+716    	; 0x934 <SPI_SS_Disable>
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <N5110_Reset>:
 66c:	28 98       	cbi	0x05, 0	; 5
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	80 e7       	ldi	r24, 0x70	; 112
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	21 50       	subi	r18, 0x01	; 1
 676:	80 40       	sbci	r24, 0x00	; 0
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	e1 f7       	brne	.-8      	; 0x674 <N5110_Reset+0x8>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <N5110_Reset+0x12>
 67e:	00 00       	nop
 680:	28 9a       	sbi	0x05, 0	; 5
 682:	08 95       	ret

00000684 <N5110_init>:
 684:	f3 df       	rcall	.-26     	; 0x66c <N5110_Reset>
 686:	81 e2       	ldi	r24, 0x21	; 33
 688:	e7 df       	rcall	.-50     	; 0x658 <N5110_Cmnd>
 68a:	80 ec       	ldi	r24, 0xC0	; 192
 68c:	e5 df       	rcall	.-54     	; 0x658 <N5110_Cmnd>
 68e:	87 e0       	ldi	r24, 0x07	; 7
 690:	e3 df       	rcall	.-58     	; 0x658 <N5110_Cmnd>
 692:	83 e1       	ldi	r24, 0x13	; 19
 694:	e1 df       	rcall	.-62     	; 0x658 <N5110_Cmnd>
 696:	80 e2       	ldi	r24, 0x20	; 32
 698:	df df       	rcall	.-66     	; 0x658 <N5110_Cmnd>
 69a:	8c e0       	ldi	r24, 0x0C	; 12
 69c:	dd cf       	rjmp	.-70     	; 0x658 <N5110_Cmnd>
 69e:	08 95       	ret

000006a0 <N5110_clear>:
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	45 d1       	rcall	.+650    	; 0x930 <SPI_SS_Enable>
 6a6:	29 9a       	sbi	0x05, 1	; 5
 6a8:	c8 ef       	ldi	r28, 0xF8	; 248
 6aa:	d1 e0       	ldi	r29, 0x01	; 1
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	4c d1       	rcall	.+664    	; 0x948 <SPI_Write>
 6b0:	21 97       	sbiw	r28, 0x01	; 1
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <N5110_clear+0xc>
 6b4:	29 98       	cbi	0x05, 1	; 5
 6b6:	3e d1       	rcall	.+636    	; 0x934 <SPI_SS_Disable>
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret

000006be <LCDBuildChar>:

unsigned char WTG_Index = 0;
unsigned char lastClicked;

void LCDBuildChar(unsigned char loc, unsigned char *p)
{
 6be:	0f 93       	push	r16
 6c0:	1f 93       	push	r17
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
	unsigned char i;
	if(loc<8) //If valid address
 6c6:	88 30       	cpi	r24, 0x08	; 8
 6c8:	70 f4       	brcc	.+28     	; 0x6e6 <LCDBuildChar+0x28>
 6ca:	8b 01       	movw	r16, r22
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
 6cc:	88 0f       	add	r24, r24
 6ce:	88 0f       	add	r24, r24
 6d0:	88 0f       	add	r24, r24
 6d2:	80 5c       	subi	r24, 0xC0	; 192
 6d4:	46 dd       	rcall	.-1396   	; 0x162 <LCD_WriteCommand>
 6d6:	e8 01       	movw	r28, r16
 6d8:	08 5f       	subi	r16, 0xF8	; 248
 6da:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
 6dc:	89 91       	ld	r24, Y+
 6de:	64 dd       	rcall	.-1336   	; 0x1a8 <LCD_WriteData>
{
	unsigned char i;
	if(loc<8) //If valid address
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		for(i=0;i<8;i++)
 6e0:	c0 17       	cp	r28, r16
 6e2:	d1 07       	cpc	r29, r17
 6e4:	d9 f7       	brne	.-10     	; 0x6dc <LCDBuildChar+0x1e>
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	08 95       	ret

000006f0 <LCD_Tick>:
enum LCD_States{Init, Wait, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
	switch (state)
 6f0:	82 30       	cpi	r24, 0x02	; 2
 6f2:	91 05       	cpc	r25, r1
 6f4:	51 f0       	breq	.+20     	; 0x70a <LCD_Tick+0x1a>
 6f6:	83 30       	cpi	r24, 0x03	; 3
 6f8:	91 05       	cpc	r25, r1
 6fa:	b1 f0       	breq	.+44     	; 0x728 <LCD_Tick+0x38>
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	29 f5       	brne	.+74     	; 0x74a <LCD_Tick+0x5a>
	{
		case Init : state = WelcomeLCD;
					LCD_ClearScreen();
 700:	39 dd       	rcall	.-1422   	; 0x174 <LCD_ClearScreen>
					SPI_Init();
 702:	1a d1       	rcall	.+564    	; 0x938 <SPI_Init>
					N5110_init();
 704:	bf df       	rcall	.-130    	; 0x684 <N5110_init>
 706:	cc df       	rcall	.-104    	; 0x6a0 <N5110_clear>
					N5110_clear();
 708:	28 c0       	rjmp	.+80     	; 0x75a <LCD_Tick+0x6a>
 70a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <count>
					
					
		break;
		case Wait : 
		break;
		case WelcomeLCD : if(count <= 51){ 
 70e:	84 33       	cpi	r24, 0x34	; 52
 710:	20 f1       	brcs	.+72     	; 0x75a <LCD_Tick+0x6a>
 712:	30 dd       	rcall	.-1440   	; 0x174 <LCD_ClearScreen>
							  state = WelcomeLCD;
						  }
						  else if(count > 51){
							  state = P1InputLCD;
							  LCD_ClearScreen();
 714:	61 e6       	ldi	r22, 0x61	; 97
							  LCD_DisplayString(17,"16 Letters MAX");
 716:	71 e0       	ldi	r23, 0x01	; 1
 718:	81 e1       	ldi	r24, 0x11	; 17
 71a:	4f dd       	rcall	.-1378   	; 0x1ba <LCD_DisplayString>
 71c:	81 e0       	ldi	r24, 0x01	; 1
							  LCD_Cursor(1);
 71e:	2d dd       	rcall	.-1446   	; 0x17a <LCD_Cursor>
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <LCDindex>
							  LCDindex = 1;
 726:	63 c0       	rjmp	.+198    	; 0x7ee <LCD_Tick+0xfe>
 728:	80 b1       	in	r24, 0x00	; 0
						 }
		break;
		case P1InputLCD : state = P1InputLCD;
						if(GetBit(~PINA, 6)){
 72a:	80 95       	com	r24
 72c:	86 ff       	sbrs	r24, 6
 72e:	5f c0       	rjmp	.+190    	; 0x7ee <LCD_Tick+0xfe>
 730:	21 dd       	rcall	.-1470   	; 0x174 <LCD_ClearScreen>
							state = P2InputLCD;
							LCD_ClearScreen();
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	22 dd       	rcall	.-1468   	; 0x17a <LCD_Cursor>
							LCD_Cursor(1);
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <LCDindex>
							LCDindex = 1;
 73c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <wordLength>
							
							LCD_WriteData(wordLength + '0');
 740:	80 5d       	subi	r24, 0xD0	; 208
 742:	32 dd       	rcall	.-1436   	; 0x1a8 <LCD_WriteData>
 744:	84 e0       	ldi	r24, 0x04	; 4
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	08 95       	ret
							  LCDindex = 1;
						 }
		break;
		case P1InputLCD : state = P1InputLCD;
						if(GetBit(~PINA, 6)){
							state = P2InputLCD;
 74a:	82 30       	cpi	r24, 0x02	; 2
 74c:	91 05       	cpc	r25, r1
 74e:	29 f0       	breq	.+10     	; 0x75a <LCD_Tick+0x6a>
		break;
		case LoseLCD :
		break;
	}//end Transitions
	
	switch (state)
 750:	83 30       	cpi	r24, 0x03	; 3
 752:	91 05       	cpc	r25, r1
 754:	09 f0       	breq	.+2      	; 0x758 <LCD_Tick+0x68>
 756:	7b c0       	rjmp	.+246    	; 0x84e <LCD_Tick+0x15e>
 758:	4a c0       	rjmp	.+148    	; 0x7ee <LCD_Tick+0xfe>
 75a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <LCDindex>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
			for(LCDindex = 0; LCDindex < 16; LCDindex++){
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	8f 5f       	subi	r24, 0xFF	; 255
				LCD_Cursor(LCDindex + 1);
 762:	0b dd       	rcall	.-1514   	; 0x17a <LCD_Cursor>
 764:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <LCDindex>
				LCD_WriteData(welcomeMessage[LCDindex]);
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	e8 5f       	subi	r30, 0xF8	; 248
 76c:	fe 4f       	sbci	r31, 0xFE	; 254
 76e:	80 81       	ld	r24, Z
 770:	1b dd       	rcall	.-1482   	; 0x1a8 <LCD_WriteData>
 772:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <LCDindex>
 776:	8f 5f       	subi	r24, 0xFF	; 255
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
			for(LCDindex = 0; LCDindex < 16; LCDindex++){
 778:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <LCDindex>
 77c:	80 31       	cpi	r24, 0x10	; 16
 77e:	80 f3       	brcs	.-32     	; 0x760 <LCD_Tick+0x70>
 780:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <welcomeMessage>
 784:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <front>
				LCD_WriteData(welcomeMessage[LCDindex]);
			}
		
		
		
		front = welcomeMessage[0];
 788:	e8 e0       	ldi	r30, 0x08	; 8
 78a:	f1 e0       	ldi	r31, 0x01	; 1
 78c:	2b e4       	ldi	r18, 0x4B	; 75
 78e:	31 e0       	ldi	r19, 0x01	; 1
 790:	81 81       	ldd	r24, Z+1	; 0x01
 792:	81 93       	st	Z+, r24
		
		for (unsigned char j = 0; j < 67; j++) {
			welcomeMessage[j] = welcomeMessage[j + 1];
 794:	2e 17       	cp	r18, r30
		
		
		
		front = welcomeMessage[0];
		
		for (unsigned char j = 0; j < 67; j++) {
 796:	3f 07       	cpc	r19, r31
 798:	d9 f7       	brne	.-10     	; 0x790 <LCD_Tick+0xa0>
			welcomeMessage[j] = welcomeMessage[j + 1];
		}
		// put the saved character on the end
		welcomeMessage[67] = front;
 79a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <wordToGuess>
		
		LCDBuildChar(0, customChar);
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	71 e0       	ldi	r23, 0x01	; 1
			LCD_Cursor(17);
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	8c df       	rcall	.-232    	; 0x6be <LCDBuildChar>
			LCD_WriteData(0x00);
 7a6:	81 e1       	ldi	r24, 0x11	; 17
 7a8:	e8 dc       	rcall	.-1584   	; 0x17a <LCD_Cursor>
			LCD_Cursor(20);
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	fd dc       	rcall	.-1542   	; 0x1a8 <LCD_WriteData>
			LCD_WriteData(0x00);
 7ae:	84 e1       	ldi	r24, 0x14	; 20
 7b0:	e4 dc       	rcall	.-1592   	; 0x17a <LCD_Cursor>
			LCD_Cursor(23);
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	f9 dc       	rcall	.-1550   	; 0x1a8 <LCD_WriteData>
			LCD_WriteData(0x00);
 7b6:	87 e1       	ldi	r24, 0x17	; 23
 7b8:	e0 dc       	rcall	.-1600   	; 0x17a <LCD_Cursor>
 7ba:	80 e0       	ldi	r24, 0x00	; 0
			LCD_Cursor(26);
 7bc:	f5 dc       	rcall	.-1558   	; 0x1a8 <LCD_WriteData>
 7be:	8a e1       	ldi	r24, 0x1A	; 26
 7c0:	dc dc       	rcall	.-1608   	; 0x17a <LCD_Cursor>
			LCD_WriteData(0x00);
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	f1 dc       	rcall	.-1566   	; 0x1a8 <LCD_WriteData>
 7c6:	8d e1       	ldi	r24, 0x1D	; 29
			LCD_Cursor(29);
 7c8:	d8 dc       	rcall	.-1616   	; 0x17a <LCD_Cursor>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	ed dc       	rcall	.-1574   	; 0x1a8 <LCD_WriteData>
			LCD_WriteData(0x00);
 7ce:	80 e2       	ldi	r24, 0x20	; 32
 7d0:	d4 dc       	rcall	.-1624   	; 0x17a <LCD_Cursor>
 7d2:	80 e0       	ldi	r24, 0x00	; 0
			LCD_Cursor(32);
 7d4:	e9 dc       	rcall	.-1582   	; 0x1a8 <LCD_WriteData>
 7d6:	83 e2       	ldi	r24, 0x23	; 35
 7d8:	d0 dc       	rcall	.-1632   	; 0x17a <LCD_Cursor>
			LCD_WriteData(0x00);
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	e5 dc       	rcall	.-1590   	; 0x1a8 <LCD_WriteData>
 7de:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <count>
			LCD_Cursor(35);
 7e2:	8f 5f       	subi	r24, 0xFF	; 255
 7e4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <count>
			LCD_WriteData(0x00);
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	90 e0       	ldi	r25, 0x00	; 0
		
		count++;
 7ec:	08 95       	ret
 7ee:	80 b1       	in	r24, 0x00	; 0
 7f0:	80 95       	com	r24
 7f2:	85 ff       	sbrs	r24, 5
 7f4:	1d c0       	rjmp	.+58     	; 0x830 <LCD_Tick+0x140>
		
			
		break;
 7f6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <WTG_Index>
 7fa:	80 31       	cpi	r24, 0x10	; 16
		case P1InputLCD :
			
			if(GetBit(~PINA,5)){
 7fc:	c8 f4       	brcc	.+50     	; 0x830 <LCD_Tick+0x140>
 7fe:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <LCDindex>
 802:	9f 5f       	subi	r25, 0xFF	; 255
				if(WTG_Index < 16){
 804:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <LCDindex>
 808:	e8 2f       	mov	r30, r24
 80a:	f0 e0       	ldi	r31, 0x00	; 0
					LCDindex++;
 80c:	e5 5b       	subi	r30, 0xB5	; 181
 80e:	fe 4f       	sbci	r31, 0xFE	; 254
 810:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <lastClicked>
					wordToGuess[WTG_Index] = lastClicked;
 814:	90 83       	st	Z, r25
 816:	8f 5f       	subi	r24, 0xFF	; 255
 818:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <WTG_Index>
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <character>
					WTG_Index++;
 822:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <click>
					character = ' ';
 826:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <wordLength>
 82a:	8f 5f       	subi	r24, 0xFF	; 255
					click = 0;
 82c:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <wordLength>
					wordLength++;
 830:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <LCDindex>
 834:	a2 dc       	rcall	.-1724   	; 0x17a <LCD_Cursor>
 836:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <character>
				}
				
			}
			LCD_Cursor(LCDindex);
 83a:	80 32       	cpi	r24, 0x20	; 32
 83c:	31 f0       	breq	.+12     	; 0x84a <LCD_Tick+0x15a>
 83e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <lastClicked>
			if(character != ' '){
 842:	b2 dc       	rcall	.-1692   	; 0x1a8 <LCD_WriteData>
 844:	83 e0       	ldi	r24, 0x03	; 3
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	08 95       	ret
				lastClicked = character;
 84a:	83 e0       	ldi	r24, 0x03	; 3
 84c:	90 e0       	ldi	r25, 0x00	; 0
				LCD_WriteData(character);
 84e:	08 95       	ret

00000850 <main>:
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	8a b9       	out	0x0a, r24	; 10
 854:	1b b8       	out	0x0b, r1	; 11
 856:	81 b9       	out	0x01, r24	; 1
 858:	82 b9       	out	0x02, r24	; 2
 85a:	84 b9       	out	0x04, r24	; 4
		break;
	}//end Initializations
	
	
	return state;
}
 85c:	15 b8       	out	0x05, r1	; 5
int main(void)
{
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
	DDRA = 0xFF; PORTA = 0xFF; // LCD control lines
		DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
		DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 85e:	80 ef       	ldi	r24, 0xF0	; 240
 860:	87 b9       	out	0x07, r24	; 7
 862:	8f e0       	ldi	r24, 0x0F	; 15
 864:	88 b9       	out	0x08, r24	; 8
	unsigned long LCDPeriod = 500;
	unsigned long KPPeriod = 300;
	unsigned long period = 100;
	unsigned char i = 0;
	
	Tasks[i].state = Init;
 866:	e0 e7       	ldi	r30, 0x70	; 112
 868:	f1 e0       	ldi	r31, 0x01	; 1
 86a:	10 82       	st	Z, r1
	Tasks[i].period = LCDPeriod;
 86c:	84 ef       	ldi	r24, 0xF4	; 244
 86e:	91 e0       	ldi	r25, 0x01	; 1
 870:	a0 e0       	ldi	r26, 0x00	; 0
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	81 83       	std	Z+1, r24	; 0x01
 876:	92 83       	std	Z+2, r25	; 0x02
 878:	a3 83       	std	Z+3, r26	; 0x03
 87a:	b4 83       	std	Z+4, r27	; 0x04
	Tasks[i].elapsedTime = LCDPeriod;
 87c:	85 83       	std	Z+5, r24	; 0x05
 87e:	96 83       	std	Z+6, r25	; 0x06
 880:	a7 83       	std	Z+7, r26	; 0x07
 882:	b0 87       	std	Z+8, r27	; 0x08
	Tasks[i].TickFct = &LCD_Tick;
 884:	88 e7       	ldi	r24, 0x78	; 120
 886:	93 e0       	ldi	r25, 0x03	; 3
 888:	92 87       	std	Z+10, r25	; 0x0a
 88a:	81 87       	std	Z+9, r24	; 0x09
	i++;
	Tasks[i].state = Wait_KP;
 88c:	13 86       	std	Z+11, r1	; 0x0b
	Tasks[i].period = KPPeriod;
 88e:	8c e2       	ldi	r24, 0x2C	; 44
 890:	91 e0       	ldi	r25, 0x01	; 1
 892:	a0 e0       	ldi	r26, 0x00	; 0
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	84 87       	std	Z+12, r24	; 0x0c
 898:	95 87       	std	Z+13, r25	; 0x0d
 89a:	a6 87       	std	Z+14, r26	; 0x0e
 89c:	b7 87       	std	Z+15, r27	; 0x0f
	Tasks[i].elapsedTime = KPPeriod;
 89e:	80 8b       	std	Z+16, r24	; 0x10
 8a0:	91 8b       	std	Z+17, r25	; 0x11
 8a2:	a2 8b       	std	Z+18, r26	; 0x12
 8a4:	b3 8b       	std	Z+19, r27	; 0x13
	Tasks[i].TickFct = &KeypadTick;
 8a6:	8a eb       	ldi	r24, 0xBA	; 186
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	95 8b       	std	Z+21, r25	; 0x15
 8ac:	84 8b       	std	Z+20, r24	; 0x14
	
	//LCDBuildChar(0, customChar);
	TimerSet(period);
 8ae:	64 e6       	ldi	r22, 0x64	; 100
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	9a dc       	rcall	.-1740   	; 0x1ec <TimerSet>
	TimerOn();
 8b8:	aa dc       	rcall	.-1708   	; 0x20e <TimerOn>
	LCD_init();
 8ba:	67 dc       	rcall	.-1842   	; 0x18a <LCD_init>
 8bc:	0f 2e       	mov	r0, r31
 8be:	f6 e8       	ldi	r31, 0x86	; 134
 8c0:	ef 2e       	mov	r14, r31
 8c2:	f1 e0       	ldi	r31, 0x01	; 1
 8c4:	ff 2e       	mov	r15, r31
 8c6:	f0 2d       	mov	r31, r0
 8c8:	c0 e7       	ldi	r28, 0x70	; 112
 8ca:	d1 e0       	ldi	r29, 0x01	; 1
 8cc:	8e 01       	movw	r16, r28
 8ce:	4d 81       	ldd	r20, Y+5	; 0x05
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 2; i++ ) {
			// Task is ready to tick
			if ( Tasks[i].elapsedTime == Tasks[i].period ) {
 8d0:	5e 81       	ldd	r21, Y+6	; 0x06
 8d2:	6f 81       	ldd	r22, Y+7	; 0x07
 8d4:	78 85       	ldd	r23, Y+8	; 0x08
 8d6:	89 81       	ldd	r24, Y+1	; 0x01
 8d8:	9a 81       	ldd	r25, Y+2	; 0x02
 8da:	ab 81       	ldd	r26, Y+3	; 0x03
 8dc:	bc 81       	ldd	r27, Y+4	; 0x04
 8de:	48 17       	cp	r20, r24
 8e0:	59 07       	cpc	r21, r25
 8e2:	6a 07       	cpc	r22, r26
 8e4:	7b 07       	cpc	r23, r27
 8e6:	61 f4       	brne	.+24     	; 0x900 <main+0xb0>
 8e8:	88 81       	ld	r24, Y
				// Setting next state for task
				Tasks[i].state = Tasks[i].TickFct(Tasks[i].state);
 8ea:	e9 85       	ldd	r30, Y+9	; 0x09
 8ec:	fa 85       	ldd	r31, Y+10	; 0x0a
 8ee:	08 2e       	mov	r0, r24
 8f0:	00 0c       	add	r0, r0
 8f2:	99 0b       	sbc	r25, r25
 8f4:	09 95       	icall
 8f6:	88 83       	st	Y, r24
 8f8:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				Tasks[i].elapsedTime = 0;
 8fa:	1e 82       	std	Y+6, r1	; 0x06
 8fc:	1f 82       	std	Y+7, r1	; 0x07
 8fe:	18 86       	std	Y+8, r1	; 0x08
 900:	f8 01       	movw	r30, r16
			}
			Tasks[i].elapsedTime += period;
 902:	85 81       	ldd	r24, Z+5	; 0x05
 904:	96 81       	ldd	r25, Z+6	; 0x06
 906:	a7 81       	ldd	r26, Z+7	; 0x07
 908:	b0 85       	ldd	r27, Z+8	; 0x08
 90a:	8c 59       	subi	r24, 0x9C	; 156
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	af 4f       	sbci	r26, 0xFF	; 255
 910:	bf 4f       	sbci	r27, 0xFF	; 255
 912:	85 83       	std	Z+5, r24	; 0x05
 914:	96 83       	std	Z+6, r25	; 0x06
 916:	a7 83       	std	Z+7, r26	; 0x07
 918:	b0 87       	std	Z+8, r27	; 0x08
 91a:	2b 96       	adiw	r28, 0x0b	; 11
 91c:	ce 15       	cp	r28, r14
	
	
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 2; i++ ) {
 91e:	df 05       	cpc	r29, r15
 920:	a9 f6       	brne	.-86     	; 0x8cc <main+0x7c>
 922:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <TimerFlag>
				Tasks[i].elapsedTime = 0;
			}
			Tasks[i].elapsedTime += period;
		}
		
		while (!TimerFlag){}
 926:	88 23       	and	r24, r24
 928:	e1 f3       	breq	.-8      	; 0x922 <main+0xd2>
 92a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <TimerFlag>
		TimerFlag = 0;
 92e:	cc cf       	rjmp	.-104    	; 0x8c8 <main+0x78>

00000930 <SPI_SS_Enable>:
		
	}
 930:	2c 98       	cbi	0x05, 4	; 5
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
 932:	08 95       	ret

00000934 <SPI_SS_Disable>:
 934:	2c 9a       	sbi	0x05, 4	; 5
 936:	08 95       	ret

00000938 <SPI_Init>:
 938:	83 eb       	ldi	r24, 0xB3	; 179
 93a:	84 b9       	out	0x04, r24	; 4
 93c:	28 9a       	sbi	0x05, 0	; 5
 93e:	26 98       	cbi	0x04, 6	; 4
 940:	2c 9a       	sbi	0x05, 4	; 5
 942:	81 e5       	ldi	r24, 0x51	; 81
 944:	8c bd       	out	0x2c, r24	; 44
 946:	08 95       	ret

00000948 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
 948:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
 94a:	0d b4       	in	r0, 0x2d	; 45
 94c:	07 fe       	sbrs	r0, 7
 94e:	fd cf       	rjmp	.-6      	; 0x94a <SPI_Write+0x2>
}
 950:	08 95       	ret

00000952 <__tablejump2__>:
 952:	ee 0f       	add	r30, r30
 954:	ff 1f       	adc	r31, r31
 956:	00 24       	eor	r0, r0
 958:	00 1c       	adc	r0, r0
 95a:	0b be       	out	0x3b, r0	; 59
 95c:	07 90       	elpm	r0, Z+
 95e:	f6 91       	elpm	r31, Z
 960:	e0 2d       	mov	r30, r0
 962:	09 94       	ijmp

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>
