
Hangman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000eba  00800100  000014b8  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800fba  00800fba  00002406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002003  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b55  00000000  00000000  00004603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001517  00000000  00000000  00005158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00006670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b8  00000000  00000000  00006a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001118  00000000  00000000  000073f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000850c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
       2:	00 00       	nop
       4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
       6:	00 00       	nop
       8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
       a:	00 00       	nop
       c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
       e:	00 00       	nop
      10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
      12:	00 00       	nop
      14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
      16:	00 00       	nop
      18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
      22:	00 00       	nop
      24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
      26:	00 00       	nop
      28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
      2e:	00 00       	nop
      30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__vector_13>
      36:	00 00       	nop
      38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
      3e:	00 00       	nop
      40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
      42:	00 00       	nop
      44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
      4e:	00 00       	nop
      50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
      52:	00 00       	nop
      54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
      56:	00 00       	nop
      58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
      5e:	00 00       	nop
      60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
      62:	00 00       	nop
      64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
      66:	00 00       	nop
      68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
      6e:	00 00       	nop
      70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
      72:	00 00       	nop
      74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
      76:	00 00       	nop
      78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
      7e:	00 00       	nop
      80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
      82:	00 00       	nop
      84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
      86:	00 00       	nop
      88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa 01       	movw	r30, r20
      8e:	23 03       	mulsu	r18, r19
      90:	23 03       	mulsu	r18, r19
      92:	23 03       	mulsu	r18, r19
      94:	23 03       	mulsu	r18, r19
      96:	23 03       	mulsu	r18, r19
      98:	23 03       	mulsu	r18, r19
      9a:	23 03       	mulsu	r18, r19
      9c:	23 03       	mulsu	r18, r19
      9e:	23 03       	mulsu	r18, r19
      a0:	23 03       	mulsu	r18, r19
      a2:	23 03       	mulsu	r18, r19
      a4:	23 03       	mulsu	r18, r19
      a6:	23 03       	mulsu	r18, r19
      a8:	23 03       	mulsu	r18, r19
      aa:	23 03       	mulsu	r18, r19
      ac:	23 03       	mulsu	r18, r19
      ae:	23 03       	mulsu	r18, r19
      b0:	23 03       	mulsu	r18, r19
      b2:	23 03       	mulsu	r18, r19
      b4:	23 03       	mulsu	r18, r19
      b6:	23 03       	mulsu	r18, r19
      b8:	23 03       	mulsu	r18, r19
      ba:	23 03       	mulsu	r18, r19
      bc:	23 03       	mulsu	r18, r19
      be:	23 03       	mulsu	r18, r19
      c0:	23 03       	mulsu	r18, r19
      c2:	23 03       	mulsu	r18, r19
      c4:	23 03       	mulsu	r18, r19
      c6:	23 03       	mulsu	r18, r19
      c8:	23 03       	mulsu	r18, r19
      ca:	23 03       	mulsu	r18, r19
      cc:	23 03       	mulsu	r18, r19
      ce:	23 03       	mulsu	r18, r19
      d0:	23 03       	mulsu	r18, r19
      d2:	23 03       	mulsu	r18, r19
      d4:	23 03       	mulsu	r18, r19
      d6:	23 03       	mulsu	r18, r19
      d8:	23 03       	mulsu	r18, r19
      da:	23 03       	mulsu	r18, r19
      dc:	23 03       	mulsu	r18, r19
      de:	23 03       	mulsu	r18, r19
      e0:	23 03       	mulsu	r18, r19
      e2:	23 03       	mulsu	r18, r19
      e4:	23 03       	mulsu	r18, r19
      e6:	23 03       	mulsu	r18, r19
      e8:	23 03       	mulsu	r18, r19
      ea:	23 03       	mulsu	r18, r19
      ec:	23 03       	mulsu	r18, r19
      ee:	00 02       	muls	r16, r16
      f0:	06 02       	muls	r16, r22
      f2:	29 02       	muls	r18, r25
      f4:	4c 02       	muls	r20, r28
      f6:	6f 02       	muls	r22, r31
      f8:	92 02       	muls	r25, r18
      fa:	b5 02       	muls	r27, r21
      fc:	d8 02       	muls	r29, r24
      fe:	fc 02       	muls	r31, r28
     100:	99 03       	fmulsu	r17, r17
     102:	a5 03       	fmuls	r18, r21
     104:	c1 03       	fmuls	r20, r17
     106:	dd 03       	fmulsu	r21, r21
     108:	f9 03       	fmulsu	r23, r17
     10a:	15 04       	cpc	r1, r5
     10c:	31 04       	cpc	r3, r1
     10e:	4b 04       	cpc	r4, r11
     110:	5e 04       	cpc	r5, r14
     112:	89 04       	cpc	r8, r9
     114:	17 06       	cpc	r1, r23
     116:	48 06       	cpc	r4, r24
     118:	54 06       	cpc	r5, r20
     11a:	5a 06       	cpc	r5, r26
     11c:	75 06       	cpc	r7, r21
     11e:	a3 06       	cpc	r10, r19
     120:	bd 06       	cpc	r11, r29
     122:	d5 06       	cpc	r13, r21
     124:	05 07       	cpc	r16, r21

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d0 e4       	ldi	r29, 0x40	; 64
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	1f e0       	ldi	r17, 0x0F	; 15
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	e8 eb       	ldi	r30, 0xB8	; 184
     13a:	f4 e1       	ldi	r31, 0x14	; 20
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0b bf       	out	0x3b, r16	; 59
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x14>
     142:	07 90       	elpm	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	aa 3b       	cpi	r26, 0xBA	; 186
     148:	b1 07       	cpc	r27, r17
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0x10>

0000014c <__do_clear_bss>:
     14c:	20 e1       	ldi	r18, 0x10	; 16
     14e:	aa eb       	ldi	r26, 0xBA	; 186
     150:	bf e0       	ldi	r27, 0x0F	; 15
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
     156:	a5 30       	cpi	r26, 0x05	; 5
     158:	b2 07       	cpc	r27, r18
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
     15c:	62 d7       	rcall	.+3780   	; 0x1022 <main>
     15e:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <_exit>

00000162 <__bad_interrupt>:
     162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <delay_ms>:
	set_PWM(0);
}

void PWM_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
     164:	18 16       	cp	r1, r24
     166:	19 06       	cpc	r1, r25
     168:	5c f0       	brlt	.+22     	; 0x180 <delay_ms+0x1c>
     16a:	08 95       	ret
     16c:	00 00       	nop
     16e:	21 50       	subi	r18, 0x01	; 1
     170:	31 09       	sbc	r19, r1
     172:	e1 f7       	brne	.-8      	; 0x16c <delay_ms+0x8>
     174:	4f 5f       	subi	r20, 0xFF	; 255
     176:	5f 4f       	sbci	r21, 0xFF	; 255
     178:	84 17       	cp	r24, r20
     17a:	95 07       	cpc	r25, r21
     17c:	19 f4       	brne	.+6      	; 0x184 <delay_ms+0x20>
     17e:	08 95       	ret
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	27 e0       	ldi	r18, 0x07	; 7
     186:	33 e0       	ldi	r19, 0x03	; 3
     188:	f1 cf       	rjmp	.-30     	; 0x16c <delay_ms+0x8>

0000018a <LCD_WriteCommand>:
     18a:	10 98       	cbi	0x02, 0	; 2
     18c:	8b b9       	out	0x0b, r24	; 11
     18e:	11 9a       	sbi	0x02, 1	; 2
     190:	00 00       	nop
     192:	11 98       	cbi	0x02, 1	; 2
     194:	82 e0       	ldi	r24, 0x02	; 2
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	e5 cf       	rjmp	.-54     	; 0x164 <delay_ms>
     19a:	08 95       	ret

0000019c <LCD_ClearScreen>:
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	f5 cf       	rjmp	.-22     	; 0x18a <LCD_WriteCommand>
     1a0:	08 95       	ret

000001a2 <LCD_Cursor>:
     1a2:	81 31       	cpi	r24, 0x11	; 17
     1a4:	18 f4       	brcc	.+6      	; 0x1ac <LCD_Cursor+0xa>
     1a6:	81 58       	subi	r24, 0x81	; 129
     1a8:	f0 cf       	rjmp	.-32     	; 0x18a <LCD_WriteCommand>
     1aa:	08 95       	ret
     1ac:	81 55       	subi	r24, 0x51	; 81
     1ae:	ed cf       	rjmp	.-38     	; 0x18a <LCD_WriteCommand>
     1b0:	08 95       	ret

000001b2 <LCD_init>:
     1b2:	84 e6       	ldi	r24, 0x64	; 100
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	d6 df       	rcall	.-84     	; 0x164 <delay_ms>
     1b8:	88 e3       	ldi	r24, 0x38	; 56
     1ba:	e7 df       	rcall	.-50     	; 0x18a <LCD_WriteCommand>
     1bc:	86 e0       	ldi	r24, 0x06	; 6
     1be:	e5 df       	rcall	.-54     	; 0x18a <LCD_WriteCommand>
     1c0:	8f e0       	ldi	r24, 0x0F	; 15
     1c2:	e3 df       	rcall	.-58     	; 0x18a <LCD_WriteCommand>
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	e1 df       	rcall	.-62     	; 0x18a <LCD_WriteCommand>
     1c8:	8a e0       	ldi	r24, 0x0A	; 10
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	cb cf       	rjmp	.-106    	; 0x164 <delay_ms>
     1ce:	08 95       	ret

000001d0 <LCD_WriteData>:
     1d0:	10 9a       	sbi	0x02, 0	; 2
     1d2:	8b b9       	out	0x0b, r24	; 11
     1d4:	11 9a       	sbi	0x02, 1	; 2
     1d6:	00 00       	nop
     1d8:	11 98       	cbi	0x02, 1	; 2
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	c2 cf       	rjmp	.-124    	; 0x164 <delay_ms>
     1e0:	08 95       	ret

000001e2 <LCD_DisplayString>:
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	18 2f       	mov	r17, r24
     1ec:	eb 01       	movw	r28, r22
     1ee:	d6 df       	rcall	.-84     	; 0x19c <LCD_ClearScreen>
     1f0:	88 81       	ld	r24, Y
     1f2:	88 23       	and	r24, r24
     1f4:	51 f0       	breq	.+20     	; 0x20a <LCD_DisplayString+0x28>
     1f6:	01 e0       	ldi	r16, 0x01	; 1
     1f8:	01 0f       	add	r16, r17
     1fa:	81 2f       	mov	r24, r17
     1fc:	d2 df       	rcall	.-92     	; 0x1a2 <LCD_Cursor>
     1fe:	89 91       	ld	r24, Y+
     200:	e7 df       	rcall	.-50     	; 0x1d0 <LCD_WriteData>
     202:	10 2f       	mov	r17, r16
     204:	88 81       	ld	r24, Y
     206:	81 11       	cpse	r24, r1
     208:	f6 cf       	rjmp	.-20     	; 0x1f6 <LCD_DisplayString+0x14>
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	08 95       	ret

00000214 <TimerSet>:
     214:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <_avr_timer_M>
     218:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <_avr_timer_M+0x1>
     21c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <_avr_timer_M+0x2>
     220:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <_avr_timer_M+0x3>
     224:	60 93 f6 0f 	sts	0x0FF6, r22	; 0x800ff6 <_avr_timer_cntcurr>
     228:	70 93 f7 0f 	sts	0x0FF7, r23	; 0x800ff7 <_avr_timer_cntcurr+0x1>
     22c:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <_avr_timer_cntcurr+0x2>
     230:	90 93 f9 0f 	sts	0x0FF9, r25	; 0x800ff9 <_avr_timer_cntcurr+0x3>
     234:	08 95       	ret

00000236 <TimerOn>:
     236:	8b e0       	ldi	r24, 0x0B	; 11
     238:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     23c:	8d e7       	ldi	r24, 0x7D	; 125
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     24e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     252:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     256:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_avr_timer_M>
     25a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_avr_timer_M+0x1>
     25e:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <_avr_timer_M+0x2>
     262:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <_avr_timer_M+0x3>
     266:	80 93 f6 0f 	sts	0x0FF6, r24	; 0x800ff6 <_avr_timer_cntcurr>
     26a:	90 93 f7 0f 	sts	0x0FF7, r25	; 0x800ff7 <_avr_timer_cntcurr+0x1>
     26e:	a0 93 f8 0f 	sts	0x0FF8, r26	; 0x800ff8 <_avr_timer_cntcurr+0x2>
     272:	b0 93 f9 0f 	sts	0x0FF9, r27	; 0x800ff9 <_avr_timer_cntcurr+0x3>
     276:	8f b7       	in	r24, 0x3f	; 63
     278:	80 68       	ori	r24, 0x80	; 128
     27a:	8f bf       	out	0x3f, r24	; 63
     27c:	08 95       	ret

0000027e <__vector_13>:
     27e:	1f 92       	push	r1
     280:	0f 92       	push	r0
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	0f 92       	push	r0
     286:	11 24       	eor	r1, r1
     288:	8f 93       	push	r24
     28a:	9f 93       	push	r25
     28c:	af 93       	push	r26
     28e:	bf 93       	push	r27
     290:	80 91 f6 0f 	lds	r24, 0x0FF6	; 0x800ff6 <_avr_timer_cntcurr>
     294:	90 91 f7 0f 	lds	r25, 0x0FF7	; 0x800ff7 <_avr_timer_cntcurr+0x1>
     298:	a0 91 f8 0f 	lds	r26, 0x0FF8	; 0x800ff8 <_avr_timer_cntcurr+0x2>
     29c:	b0 91 f9 0f 	lds	r27, 0x0FF9	; 0x800ff9 <_avr_timer_cntcurr+0x3>
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	a1 09       	sbc	r26, r1
     2a4:	b1 09       	sbc	r27, r1
     2a6:	80 93 f6 0f 	sts	0x0FF6, r24	; 0x800ff6 <_avr_timer_cntcurr>
     2aa:	90 93 f7 0f 	sts	0x0FF7, r25	; 0x800ff7 <_avr_timer_cntcurr+0x1>
     2ae:	a0 93 f8 0f 	sts	0x0FF8, r26	; 0x800ff8 <_avr_timer_cntcurr+0x2>
     2b2:	b0 93 f9 0f 	sts	0x0FF9, r27	; 0x800ff9 <_avr_timer_cntcurr+0x3>
     2b6:	89 2b       	or	r24, r25
     2b8:	8a 2b       	or	r24, r26
     2ba:	8b 2b       	or	r24, r27
     2bc:	99 f4       	brne	.+38     	; 0x2e4 <__vector_13+0x66>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 fa 0f 	sts	0x0FFA, r24	; 0x800ffa <TimerFlag>
     2c4:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_avr_timer_M>
     2c8:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_avr_timer_M+0x1>
     2cc:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <_avr_timer_M+0x2>
     2d0:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <_avr_timer_M+0x3>
     2d4:	80 93 f6 0f 	sts	0x0FF6, r24	; 0x800ff6 <_avr_timer_cntcurr>
     2d8:	90 93 f7 0f 	sts	0x0FF7, r25	; 0x800ff7 <_avr_timer_cntcurr+0x1>
     2dc:	a0 93 f8 0f 	sts	0x0FF8, r26	; 0x800ff8 <_avr_timer_cntcurr+0x2>
     2e0:	b0 93 f9 0f 	sts	0x0FF9, r27	; 0x800ff9 <_avr_timer_cntcurr+0x3>
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <GetKeypadKey>:
     2f6:	8f ee       	ldi	r24, 0xEF	; 239
     2f8:	88 b9       	out	0x08, r24	; 8
     2fa:	00 00       	nop
     2fc:	30 9b       	sbis	0x06, 0	; 6
     2fe:	2e c0       	rjmp	.+92     	; 0x35c <GetKeypadKey+0x66>
     300:	31 9b       	sbis	0x06, 1	; 6
     302:	2e c0       	rjmp	.+92     	; 0x360 <GetKeypadKey+0x6a>
     304:	32 9b       	sbis	0x06, 2	; 6
     306:	2e c0       	rjmp	.+92     	; 0x364 <GetKeypadKey+0x6e>
     308:	33 9b       	sbis	0x06, 3	; 6
     30a:	2e c0       	rjmp	.+92     	; 0x368 <GetKeypadKey+0x72>
     30c:	8f ed       	ldi	r24, 0xDF	; 223
     30e:	88 b9       	out	0x08, r24	; 8
     310:	00 00       	nop
     312:	30 9b       	sbis	0x06, 0	; 6
     314:	2b c0       	rjmp	.+86     	; 0x36c <GetKeypadKey+0x76>
     316:	31 9b       	sbis	0x06, 1	; 6
     318:	2b c0       	rjmp	.+86     	; 0x370 <GetKeypadKey+0x7a>
     31a:	32 9b       	sbis	0x06, 2	; 6
     31c:	2b c0       	rjmp	.+86     	; 0x374 <GetKeypadKey+0x7e>
     31e:	33 9b       	sbis	0x06, 3	; 6
     320:	2b c0       	rjmp	.+86     	; 0x378 <GetKeypadKey+0x82>
     322:	8f eb       	ldi	r24, 0xBF	; 191
     324:	88 b9       	out	0x08, r24	; 8
     326:	00 00       	nop
     328:	30 9b       	sbis	0x06, 0	; 6
     32a:	28 c0       	rjmp	.+80     	; 0x37c <GetKeypadKey+0x86>
     32c:	31 9b       	sbis	0x06, 1	; 6
     32e:	28 c0       	rjmp	.+80     	; 0x380 <GetKeypadKey+0x8a>
     330:	32 9b       	sbis	0x06, 2	; 6
     332:	28 c0       	rjmp	.+80     	; 0x384 <GetKeypadKey+0x8e>
     334:	33 9b       	sbis	0x06, 3	; 6
     336:	28 c0       	rjmp	.+80     	; 0x388 <GetKeypadKey+0x92>
     338:	8f e7       	ldi	r24, 0x7F	; 127
     33a:	88 b9       	out	0x08, r24	; 8
     33c:	00 00       	nop
     33e:	30 9b       	sbis	0x06, 0	; 6
     340:	25 c0       	rjmp	.+74     	; 0x38c <GetKeypadKey+0x96>
     342:	31 9b       	sbis	0x06, 1	; 6
     344:	25 c0       	rjmp	.+74     	; 0x390 <GetKeypadKey+0x9a>
     346:	32 9b       	sbis	0x06, 2	; 6
     348:	25 c0       	rjmp	.+74     	; 0x394 <GetKeypadKey+0x9e>
     34a:	33 9b       	sbis	0x06, 3	; 6
     34c:	25 c0       	rjmp	.+74     	; 0x398 <GetKeypadKey+0xa2>
     34e:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <click>
     352:	8f 5f       	subi	r24, 0xFF	; 255
     354:	80 93 f5 0f 	sts	0x0FF5, r24	; 0x800ff5 <click>
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	08 95       	ret
     35c:	81 e3       	ldi	r24, 0x31	; 49
     35e:	08 95       	ret
     360:	84 e3       	ldi	r24, 0x34	; 52
     362:	08 95       	ret
     364:	87 e3       	ldi	r24, 0x37	; 55
     366:	08 95       	ret
     368:	8a e2       	ldi	r24, 0x2A	; 42
     36a:	08 95       	ret
     36c:	82 e3       	ldi	r24, 0x32	; 50
     36e:	08 95       	ret
     370:	85 e3       	ldi	r24, 0x35	; 53
     372:	08 95       	ret
     374:	88 e3       	ldi	r24, 0x38	; 56
     376:	08 95       	ret
     378:	80 e3       	ldi	r24, 0x30	; 48
     37a:	08 95       	ret
     37c:	83 e3       	ldi	r24, 0x33	; 51
     37e:	08 95       	ret
     380:	86 e3       	ldi	r24, 0x36	; 54
     382:	08 95       	ret
     384:	89 e3       	ldi	r24, 0x39	; 57
     386:	08 95       	ret
     388:	83 e2       	ldi	r24, 0x23	; 35
     38a:	08 95       	ret
     38c:	81 e4       	ldi	r24, 0x41	; 65
     38e:	08 95       	ret
     390:	82 e4       	ldi	r24, 0x42	; 66
     392:	08 95       	ret
     394:	83 e4       	ldi	r24, 0x43	; 67
     396:	08 95       	ret
     398:	84 e4       	ldi	r24, 0x44	; 68
     39a:	08 95       	ret

0000039c <KeypadTick>:
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	ec 01       	movw	r28, r24
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	91 05       	cpc	r25, r1
     3a6:	c9 f0       	breq	.+50     	; 0x3da <KeypadTick+0x3e>
     3a8:	82 30       	cpi	r24, 0x02	; 2
     3aa:	91 05       	cpc	r25, r1
     3ac:	31 f0       	breq	.+12     	; 0x3ba <KeypadTick+0x1e>
     3ae:	89 2b       	or	r24, r25
     3b0:	21 f0       	breq	.+8      	; 0x3ba <KeypadTick+0x1e>
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	80 93 ff 0f 	sts	0x0FFF, r24	; 0x800fff <State>
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <KeypadTick+0x22>
     3ba:	c1 e0       	ldi	r28, 0x01	; 1
     3bc:	d0 e0       	ldi	r29, 0x00	; 0
     3be:	c1 30       	cpi	r28, 0x01	; 1
     3c0:	d1 05       	cpc	r29, r1
     3c2:	39 f0       	breq	.+14     	; 0x3d2 <KeypadTick+0x36>
     3c4:	c2 30       	cpi	r28, 0x02	; 2
     3c6:	d1 05       	cpc	r29, r1
     3c8:	41 f0       	breq	.+16     	; 0x3da <KeypadTick+0x3e>
     3ca:	20 97       	sbiw	r28, 0x00	; 0
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <KeypadTick+0x34>
     3ce:	55 c1       	rjmp	.+682    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     3d0:	36 c1       	rjmp	.+620    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     3d2:	91 df       	rcall	.-222    	; 0x2f6 <GetKeypadKey>
     3d4:	80 93 fb 0f 	sts	0x0FFB, r24	; 0x800ffb <x>
     3d8:	50 c1       	rjmp	.+672    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     3da:	e0 91 fb 0f 	lds	r30, 0x0FFB	; 0x800ffb <x>
     3de:	8e 2f       	mov	r24, r30
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	8a 33       	cpi	r24, 0x3A	; 58
     3e4:	91 05       	cpc	r25, r1
     3e6:	08 f0       	brcs	.+2      	; 0x3ea <KeypadTick+0x4e>
     3e8:	2e c1       	rjmp	.+604    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     3ea:	fc 01       	movw	r30, r24
     3ec:	ea 5b       	subi	r30, 0xBA	; 186
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__tablejump2__>
     3f4:	80 e2       	ldi	r24, 0x20	; 32
     3f6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     3fa:	c2 e0       	ldi	r28, 0x02	; 2
     3fc:	d0 e0       	ldi	r29, 0x00	; 0
     3fe:	3d c1       	rjmp	.+634    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     400:	80 e2       	ldi	r24, 0x20	; 32
     402:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     406:	c2 e0       	ldi	r28, 0x02	; 2
     408:	d0 e0       	ldi	r29, 0x00	; 0
     40a:	37 c1       	rjmp	.+622    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     40c:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <click>
     410:	8b ea       	ldi	r24, 0xAB	; 171
     412:	98 9f       	mul	r25, r24
     414:	81 2d       	mov	r24, r1
     416:	11 24       	eor	r1, r1
     418:	86 95       	lsr	r24
     41a:	28 2f       	mov	r18, r24
     41c:	22 0f       	add	r18, r18
     41e:	82 0f       	add	r24, r18
     420:	98 1b       	sub	r25, r24
     422:	91 30       	cpi	r25, 0x01	; 1
     424:	31 f4       	brne	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     426:	81 e4       	ldi	r24, 0x41	; 65
     428:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     42c:	c2 e0       	ldi	r28, 0x02	; 2
     42e:	d0 e0       	ldi	r29, 0x00	; 0
     430:	24 c1       	rjmp	.+584    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     432:	92 30       	cpi	r25, 0x02	; 2
     434:	31 f4       	brne	.+12     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     436:	82 e4       	ldi	r24, 0x42	; 66
     438:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     43c:	c2 e0       	ldi	r28, 0x02	; 2
     43e:	d0 e0       	ldi	r29, 0x00	; 0
     440:	1c c1       	rjmp	.+568    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     442:	91 11       	cpse	r25, r1
     444:	03 c1       	rjmp	.+518    	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
     446:	83 e4       	ldi	r24, 0x43	; 67
     448:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     44c:	c2 e0       	ldi	r28, 0x02	; 2
     44e:	d0 e0       	ldi	r29, 0x00	; 0
     450:	14 c1       	rjmp	.+552    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     452:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <click>
     456:	8b ea       	ldi	r24, 0xAB	; 171
     458:	98 9f       	mul	r25, r24
     45a:	81 2d       	mov	r24, r1
     45c:	11 24       	eor	r1, r1
     45e:	86 95       	lsr	r24
     460:	28 2f       	mov	r18, r24
     462:	22 0f       	add	r18, r18
     464:	82 0f       	add	r24, r18
     466:	98 1b       	sub	r25, r24
     468:	91 30       	cpi	r25, 0x01	; 1
     46a:	31 f4       	brne	.+12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     46c:	84 e4       	ldi	r24, 0x44	; 68
     46e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     472:	c2 e0       	ldi	r28, 0x02	; 2
     474:	d0 e0       	ldi	r29, 0x00	; 0
     476:	01 c1       	rjmp	.+514    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	31 f4       	brne	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47c:	85 e4       	ldi	r24, 0x45	; 69
     47e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     482:	c2 e0       	ldi	r28, 0x02	; 2
     484:	d0 e0       	ldi	r29, 0x00	; 0
     486:	f9 c0       	rjmp	.+498    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     488:	91 11       	cpse	r25, r1
     48a:	e3 c0       	rjmp	.+454    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     48c:	86 e4       	ldi	r24, 0x46	; 70
     48e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     492:	c2 e0       	ldi	r28, 0x02	; 2
     494:	d0 e0       	ldi	r29, 0x00	; 0
     496:	f1 c0       	rjmp	.+482    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     498:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <click>
     49c:	8b ea       	ldi	r24, 0xAB	; 171
     49e:	98 9f       	mul	r25, r24
     4a0:	81 2d       	mov	r24, r1
     4a2:	11 24       	eor	r1, r1
     4a4:	86 95       	lsr	r24
     4a6:	28 2f       	mov	r18, r24
     4a8:	22 0f       	add	r18, r18
     4aa:	82 0f       	add	r24, r18
     4ac:	98 1b       	sub	r25, r24
     4ae:	91 30       	cpi	r25, 0x01	; 1
     4b0:	31 f4       	brne	.+12     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4b2:	87 e4       	ldi	r24, 0x47	; 71
     4b4:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     4b8:	c2 e0       	ldi	r28, 0x02	; 2
     4ba:	d0 e0       	ldi	r29, 0x00	; 0
     4bc:	de c0       	rjmp	.+444    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     4be:	92 30       	cpi	r25, 0x02	; 2
     4c0:	31 f4       	brne	.+12     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4c2:	88 e4       	ldi	r24, 0x48	; 72
     4c4:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     4c8:	c2 e0       	ldi	r28, 0x02	; 2
     4ca:	d0 e0       	ldi	r29, 0x00	; 0
     4cc:	d6 c0       	rjmp	.+428    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     4ce:	91 11       	cpse	r25, r1
     4d0:	c3 c0       	rjmp	.+390    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     4d2:	89 e4       	ldi	r24, 0x49	; 73
     4d4:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     4d8:	c2 e0       	ldi	r28, 0x02	; 2
     4da:	d0 e0       	ldi	r29, 0x00	; 0
     4dc:	ce c0       	rjmp	.+412    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     4de:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <click>
     4e2:	8b ea       	ldi	r24, 0xAB	; 171
     4e4:	98 9f       	mul	r25, r24
     4e6:	81 2d       	mov	r24, r1
     4e8:	11 24       	eor	r1, r1
     4ea:	86 95       	lsr	r24
     4ec:	28 2f       	mov	r18, r24
     4ee:	22 0f       	add	r18, r18
     4f0:	82 0f       	add	r24, r18
     4f2:	98 1b       	sub	r25, r24
     4f4:	91 30       	cpi	r25, 0x01	; 1
     4f6:	31 f4       	brne	.+12     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4f8:	8a e4       	ldi	r24, 0x4A	; 74
     4fa:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     4fe:	c2 e0       	ldi	r28, 0x02	; 2
     500:	d0 e0       	ldi	r29, 0x00	; 0
     502:	bb c0       	rjmp	.+374    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     504:	92 30       	cpi	r25, 0x02	; 2
     506:	31 f4       	brne	.+12     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     508:	8b e4       	ldi	r24, 0x4B	; 75
     50a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     50e:	c2 e0       	ldi	r28, 0x02	; 2
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	b3 c0       	rjmp	.+358    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     514:	91 11       	cpse	r25, r1
     516:	a3 c0       	rjmp	.+326    	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
     518:	8c e4       	ldi	r24, 0x4C	; 76
     51a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     51e:	c2 e0       	ldi	r28, 0x02	; 2
     520:	d0 e0       	ldi	r29, 0x00	; 0
     522:	ab c0       	rjmp	.+342    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     524:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <click>
     528:	8b ea       	ldi	r24, 0xAB	; 171
     52a:	98 9f       	mul	r25, r24
     52c:	81 2d       	mov	r24, r1
     52e:	11 24       	eor	r1, r1
     530:	86 95       	lsr	r24
     532:	28 2f       	mov	r18, r24
     534:	22 0f       	add	r18, r18
     536:	82 0f       	add	r24, r18
     538:	98 1b       	sub	r25, r24
     53a:	91 30       	cpi	r25, 0x01	; 1
     53c:	31 f4       	brne	.+12     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     53e:	8d e4       	ldi	r24, 0x4D	; 77
     540:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     544:	c2 e0       	ldi	r28, 0x02	; 2
     546:	d0 e0       	ldi	r29, 0x00	; 0
     548:	98 c0       	rjmp	.+304    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     54a:	92 30       	cpi	r25, 0x02	; 2
     54c:	31 f4       	brne	.+12     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     54e:	8e e4       	ldi	r24, 0x4E	; 78
     550:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     554:	c2 e0       	ldi	r28, 0x02	; 2
     556:	d0 e0       	ldi	r29, 0x00	; 0
     558:	90 c0       	rjmp	.+288    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     55a:	91 11       	cpse	r25, r1
     55c:	83 c0       	rjmp	.+262    	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     55e:	8f e4       	ldi	r24, 0x4F	; 79
     560:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     564:	c2 e0       	ldi	r28, 0x02	; 2
     566:	d0 e0       	ldi	r29, 0x00	; 0
     568:	88 c0       	rjmp	.+272    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     56a:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <click>
     56e:	83 70       	andi	r24, 0x03	; 3
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	31 f4       	brne	.+12     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     574:	80 e5       	ldi	r24, 0x50	; 80
     576:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     57a:	c2 e0       	ldi	r28, 0x02	; 2
     57c:	d0 e0       	ldi	r29, 0x00	; 0
     57e:	7d c0       	rjmp	.+250    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	31 f4       	brne	.+12     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     584:	81 e5       	ldi	r24, 0x51	; 81
     586:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     58a:	c2 e0       	ldi	r28, 0x02	; 2
     58c:	d0 e0       	ldi	r29, 0x00	; 0
     58e:	75 c0       	rjmp	.+234    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     590:	83 30       	cpi	r24, 0x03	; 3
     592:	31 f4       	brne	.+12     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     594:	82 e5       	ldi	r24, 0x52	; 82
     596:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     59a:	c2 e0       	ldi	r28, 0x02	; 2
     59c:	d0 e0       	ldi	r29, 0x00	; 0
     59e:	6d c0       	rjmp	.+218    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     5a0:	81 11       	cpse	r24, r1
     5a2:	63 c0       	rjmp	.+198    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     5a4:	83 e5       	ldi	r24, 0x53	; 83
     5a6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5aa:	c2 e0       	ldi	r28, 0x02	; 2
     5ac:	d0 e0       	ldi	r29, 0x00	; 0
     5ae:	65 c0       	rjmp	.+202    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     5b0:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <click>
     5b4:	8b ea       	ldi	r24, 0xAB	; 171
     5b6:	98 9f       	mul	r25, r24
     5b8:	81 2d       	mov	r24, r1
     5ba:	11 24       	eor	r1, r1
     5bc:	86 95       	lsr	r24
     5be:	28 2f       	mov	r18, r24
     5c0:	22 0f       	add	r18, r18
     5c2:	82 0f       	add	r24, r18
     5c4:	98 1b       	sub	r25, r24
     5c6:	91 30       	cpi	r25, 0x01	; 1
     5c8:	31 f4       	brne	.+12     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5ca:	84 e5       	ldi	r24, 0x54	; 84
     5cc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5d0:	c2 e0       	ldi	r28, 0x02	; 2
     5d2:	d0 e0       	ldi	r29, 0x00	; 0
     5d4:	52 c0       	rjmp	.+164    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     5d6:	92 30       	cpi	r25, 0x02	; 2
     5d8:	31 f4       	brne	.+12     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     5da:	85 e5       	ldi	r24, 0x55	; 85
     5dc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5e0:	c2 e0       	ldi	r28, 0x02	; 2
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
     5e4:	4a c0       	rjmp	.+148    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     5e6:	93 30       	cpi	r25, 0x03	; 3
     5e8:	09 f0       	breq	.+2      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5ea:	42 c0       	rjmp	.+132    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     5ec:	86 e5       	ldi	r24, 0x56	; 86
     5ee:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5f2:	c2 e0       	ldi	r28, 0x02	; 2
     5f4:	d0 e0       	ldi	r29, 0x00	; 0
     5f6:	41 c0       	rjmp	.+130    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     5f8:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <click>
     5fc:	83 70       	andi	r24, 0x03	; 3
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	31 f4       	brne	.+12     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     602:	87 e5       	ldi	r24, 0x57	; 87
     604:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     608:	c2 e0       	ldi	r28, 0x02	; 2
     60a:	d0 e0       	ldi	r29, 0x00	; 0
     60c:	36 c0       	rjmp	.+108    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	31 f4       	brne	.+12     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     612:	88 e5       	ldi	r24, 0x58	; 88
     614:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     618:	c2 e0       	ldi	r28, 0x02	; 2
     61a:	d0 e0       	ldi	r29, 0x00	; 0
     61c:	2e c0       	rjmp	.+92     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     61e:	83 30       	cpi	r24, 0x03	; 3
     620:	31 f4       	brne	.+12     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     622:	89 e5       	ldi	r24, 0x59	; 89
     624:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     628:	c2 e0       	ldi	r28, 0x02	; 2
     62a:	d0 e0       	ldi	r29, 0x00	; 0
     62c:	26 c0       	rjmp	.+76     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     62e:	81 11       	cpse	r24, r1
     630:	22 c0       	rjmp	.+68     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     632:	8a e5       	ldi	r24, 0x5A	; 90
     634:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     638:	c2 e0       	ldi	r28, 0x02	; 2
     63a:	d0 e0       	ldi	r29, 0x00	; 0
     63c:	1e c0       	rjmp	.+60     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 ff 0f 	sts	0x0FFF, r24	; 0x800fff <State>
     644:	1a c0       	rjmp	.+52     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     646:	c2 e0       	ldi	r28, 0x02	; 2
     648:	d0 e0       	ldi	r29, 0x00	; 0
     64a:	17 c0       	rjmp	.+46     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     64c:	c2 e0       	ldi	r28, 0x02	; 2
     64e:	d0 e0       	ldi	r29, 0x00	; 0
     650:	14 c0       	rjmp	.+40     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     652:	c2 e0       	ldi	r28, 0x02	; 2
     654:	d0 e0       	ldi	r29, 0x00	; 0
     656:	11 c0       	rjmp	.+34     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     658:	c2 e0       	ldi	r28, 0x02	; 2
     65a:	d0 e0       	ldi	r29, 0x00	; 0
     65c:	0e c0       	rjmp	.+28     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     65e:	c2 e0       	ldi	r28, 0x02	; 2
     660:	d0 e0       	ldi	r29, 0x00	; 0
     662:	0b c0       	rjmp	.+22     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     664:	c2 e0       	ldi	r28, 0x02	; 2
     666:	d0 e0       	ldi	r29, 0x00	; 0
     668:	08 c0       	rjmp	.+16     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     66a:	c2 e0       	ldi	r28, 0x02	; 2
     66c:	d0 e0       	ldi	r29, 0x00	; 0
     66e:	05 c0       	rjmp	.+10     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     670:	c2 e0       	ldi	r28, 0x02	; 2
     672:	d0 e0       	ldi	r29, 0x00	; 0
     674:	02 c0       	rjmp	.+4      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     676:	c2 e0       	ldi	r28, 0x02	; 2
     678:	d0 e0       	ldi	r29, 0x00	; 0
     67a:	ce 01       	movw	r24, r28
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <N5110_Cmnd>:
     682:	cf 93       	push	r28
     684:	c8 2f       	mov	r28, r24
     686:	29 98       	cbi	0x05, 1	; 5
     688:	5b d5       	rcall	.+2742   	; 0x1140 <SPI_SS_Enable>
     68a:	8c 2f       	mov	r24, r28
     68c:	65 d5       	rcall	.+2762   	; 0x1158 <SPI_Write>
     68e:	29 9a       	sbi	0x05, 1	; 5
     690:	59 d5       	rcall	.+2738   	; 0x1144 <SPI_SS_Disable>
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <N5110_Reset>:
     696:	28 98       	cbi	0x05, 0	; 5
     698:	2f ef       	ldi	r18, 0xFF	; 255
     69a:	80 e7       	ldi	r24, 0x70	; 112
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	21 50       	subi	r18, 0x01	; 1
     6a0:	80 40       	sbci	r24, 0x00	; 0
     6a2:	90 40       	sbci	r25, 0x00	; 0
     6a4:	e1 f7       	brne	.-8      	; 0x69e <N5110_Reset+0x8>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <N5110_Reset+0x12>
     6a8:	00 00       	nop
     6aa:	28 9a       	sbi	0x05, 0	; 5
     6ac:	08 95       	ret

000006ae <N5110_init>:
     6ae:	f3 df       	rcall	.-26     	; 0x696 <N5110_Reset>
     6b0:	81 e2       	ldi	r24, 0x21	; 33
     6b2:	e7 df       	rcall	.-50     	; 0x682 <N5110_Cmnd>
     6b4:	80 ec       	ldi	r24, 0xC0	; 192
     6b6:	e5 df       	rcall	.-54     	; 0x682 <N5110_Cmnd>
     6b8:	87 e0       	ldi	r24, 0x07	; 7
     6ba:	e3 df       	rcall	.-58     	; 0x682 <N5110_Cmnd>
     6bc:	83 e1       	ldi	r24, 0x13	; 19
     6be:	e1 df       	rcall	.-62     	; 0x682 <N5110_Cmnd>
     6c0:	80 e2       	ldi	r24, 0x20	; 32
     6c2:	df df       	rcall	.-66     	; 0x682 <N5110_Cmnd>
     6c4:	8c e0       	ldi	r24, 0x0C	; 12
     6c6:	dd cf       	rjmp	.-70     	; 0x682 <N5110_Cmnd>
     6c8:	08 95       	ret

000006ca <lcd_setXY>:
     6ca:	cf 93       	push	r28
     6cc:	c6 2f       	mov	r28, r22
     6ce:	d9 df       	rcall	.-78     	; 0x682 <N5110_Cmnd>
     6d0:	8c 2f       	mov	r24, r28
     6d2:	d7 df       	rcall	.-82     	; 0x682 <N5110_Cmnd>
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <N5110_clear>:
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	31 d5       	rcall	.+2658   	; 0x1140 <SPI_SS_Enable>
     6de:	29 9a       	sbi	0x05, 1	; 5
     6e0:	c8 ef       	ldi	r28, 0xF8	; 248
     6e2:	d1 e0       	ldi	r29, 0x01	; 1
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	38 d5       	rcall	.+2672   	; 0x1158 <SPI_Write>
     6e8:	21 97       	sbiw	r28, 0x01	; 1
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <N5110_clear+0xc>
     6ec:	29 98       	cbi	0x05, 1	; 5
     6ee:	2a d5       	rcall	.+2644   	; 0x1144 <SPI_SS_Disable>
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <N5110_image>:
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	8c 01       	movw	r16, r24
     700:	1f d5       	rcall	.+2622   	; 0x1140 <SPI_SS_Enable>
     702:	29 9a       	sbi	0x05, 1	; 5
     704:	e8 01       	movw	r28, r16
     706:	08 50       	subi	r16, 0x08	; 8
     708:	1e 4f       	sbci	r17, 0xFE	; 254
     70a:	89 91       	ld	r24, Y+
     70c:	25 d5       	rcall	.+2634   	; 0x1158 <SPI_Write>
     70e:	c0 17       	cp	r28, r16
     710:	d1 07       	cpc	r29, r17
     712:	d9 f7       	brne	.-10     	; 0x70a <N5110_image+0x14>
     714:	29 98       	cbi	0x05, 1	; 5
     716:	16 d5       	rcall	.+2604   	; 0x1144 <SPI_SS_Disable>
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	08 95       	ret

00000722 <Nokia_Tick>:
     722:	8a 30       	cpi	r24, 0x0A	; 10
     724:	91 05       	cpc	r25, r1
     726:	08 f0       	brcs	.+2      	; 0x72a <Nokia_Tick+0x8>
     728:	dd c0       	rjmp	.+442    	; 0x8e4 <Nokia_Tick+0x1c2>
     72a:	fc 01       	movw	r30, r24
     72c:	e0 58       	subi	r30, 0x80	; 128
     72e:	ff 4f       	sbci	r31, 0xFF	; 255
     730:	a4 c6       	rjmp	.+3400   	; 0x147a <__tablejump2__>
     732:	0a d5       	rcall	.+2580   	; 0x1148 <SPI_Init>
     734:	bc df       	rcall	.-136    	; 0x6ae <N5110_init>
     736:	d0 df       	rcall	.-96     	; 0x6d8 <N5110_clear>
     738:	60 e8       	ldi	r22, 0x80	; 128
     73a:	80 e4       	ldi	r24, 0x40	; 64
     73c:	c6 df       	rcall	.-116    	; 0x6ca <lcd_setXY>
     73e:	82 ef       	ldi	r24, 0xF2	; 242
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	d9 df       	rcall	.-78     	; 0x6f6 <N5110_image>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	08 95       	ret
     74a:	20 91 f2 0f 	lds	r18, 0x0FF2	; 0x800ff2 <NOKIAReset>
     74e:	22 23       	and	r18, r18
     750:	49 f0       	breq	.+18     	; 0x764 <Nokia_Tick+0x42>
     752:	82 2f       	mov	r24, r18
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     75a:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
     75e:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <NOKIAReset>
     762:	da c0       	rjmp	.+436    	; 0x918 <Nokia_Tick+0x1f6>
     764:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <strike>
     768:	21 30       	cpi	r18, 0x01	; 1
     76a:	09 f0       	breq	.+2      	; 0x76e <Nokia_Tick+0x4c>
     76c:	d8 c0       	rjmp	.+432    	; 0x91e <Nokia_Tick+0x1fc>
     76e:	b4 df       	rcall	.-152    	; 0x6d8 <N5110_clear>
     770:	60 e8       	ldi	r22, 0x80	; 128
     772:	80 e4       	ldi	r24, 0x40	; 64
     774:	aa df       	rcall	.-172    	; 0x6ca <lcd_setXY>
     776:	82 ec       	ldi	r24, 0xC2	; 194
     778:	9d e0       	ldi	r25, 0x0D	; 13
     77a:	bd df       	rcall	.-134    	; 0x6f6 <N5110_image>
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	08 95       	ret
     782:	20 91 f2 0f 	lds	r18, 0x0FF2	; 0x800ff2 <NOKIAReset>
     786:	22 23       	and	r18, r18
     788:	49 f0       	breq	.+18     	; 0x79c <Nokia_Tick+0x7a>
     78a:	82 2f       	mov	r24, r18
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     792:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
     796:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <NOKIAReset>
     79a:	be c0       	rjmp	.+380    	; 0x918 <Nokia_Tick+0x1f6>
     79c:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <strike>
     7a0:	22 30       	cpi	r18, 0x02	; 2
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <Nokia_Tick+0x84>
     7a4:	bc c0       	rjmp	.+376    	; 0x91e <Nokia_Tick+0x1fc>
     7a6:	98 df       	rcall	.-208    	; 0x6d8 <N5110_clear>
     7a8:	60 e8       	ldi	r22, 0x80	; 128
     7aa:	80 e4       	ldi	r24, 0x40	; 64
     7ac:	8e df       	rcall	.-228    	; 0x6ca <lcd_setXY>
     7ae:	8a ec       	ldi	r24, 0xCA	; 202
     7b0:	9b e0       	ldi	r25, 0x0B	; 11
     7b2:	a1 df       	rcall	.-190    	; 0x6f6 <N5110_image>
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	08 95       	ret
     7ba:	20 91 f2 0f 	lds	r18, 0x0FF2	; 0x800ff2 <NOKIAReset>
     7be:	22 23       	and	r18, r18
     7c0:	49 f0       	breq	.+18     	; 0x7d4 <Nokia_Tick+0xb2>
     7c2:	82 2f       	mov	r24, r18
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     7ca:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
     7ce:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <NOKIAReset>
     7d2:	a2 c0       	rjmp	.+324    	; 0x918 <Nokia_Tick+0x1f6>
     7d4:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <strike>
     7d8:	23 30       	cpi	r18, 0x03	; 3
     7da:	09 f0       	breq	.+2      	; 0x7de <Nokia_Tick+0xbc>
     7dc:	a0 c0       	rjmp	.+320    	; 0x91e <Nokia_Tick+0x1fc>
     7de:	7c df       	rcall	.-264    	; 0x6d8 <N5110_clear>
     7e0:	60 e8       	ldi	r22, 0x80	; 128
     7e2:	80 e4       	ldi	r24, 0x40	; 64
     7e4:	72 df       	rcall	.-284    	; 0x6ca <lcd_setXY>
     7e6:	82 ed       	ldi	r24, 0xD2	; 210
     7e8:	99 e0       	ldi	r25, 0x09	; 9
     7ea:	85 df       	rcall	.-246    	; 0x6f6 <N5110_image>
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	08 95       	ret
     7f2:	20 91 f2 0f 	lds	r18, 0x0FF2	; 0x800ff2 <NOKIAReset>
     7f6:	22 23       	and	r18, r18
     7f8:	49 f0       	breq	.+18     	; 0x80c <Nokia_Tick+0xea>
     7fa:	82 2f       	mov	r24, r18
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     802:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
     806:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <NOKIAReset>
     80a:	86 c0       	rjmp	.+268    	; 0x918 <Nokia_Tick+0x1f6>
     80c:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <strike>
     810:	24 30       	cpi	r18, 0x04	; 4
     812:	09 f0       	breq	.+2      	; 0x816 <Nokia_Tick+0xf4>
     814:	84 c0       	rjmp	.+264    	; 0x91e <Nokia_Tick+0x1fc>
     816:	60 df       	rcall	.-320    	; 0x6d8 <N5110_clear>
     818:	60 e8       	ldi	r22, 0x80	; 128
     81a:	80 e4       	ldi	r24, 0x40	; 64
     81c:	56 df       	rcall	.-340    	; 0x6ca <lcd_setXY>
     81e:	8a ed       	ldi	r24, 0xDA	; 218
     820:	97 e0       	ldi	r25, 0x07	; 7
     822:	69 df       	rcall	.-302    	; 0x6f6 <N5110_image>
     824:	85 e0       	ldi	r24, 0x05	; 5
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	08 95       	ret
     82a:	20 91 f2 0f 	lds	r18, 0x0FF2	; 0x800ff2 <NOKIAReset>
     82e:	22 23       	and	r18, r18
     830:	49 f0       	breq	.+18     	; 0x844 <Nokia_Tick+0x122>
     832:	82 2f       	mov	r24, r18
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     83a:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
     83e:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <NOKIAReset>
     842:	6a c0       	rjmp	.+212    	; 0x918 <Nokia_Tick+0x1f6>
     844:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <strike>
     848:	25 30       	cpi	r18, 0x05	; 5
     84a:	09 f0       	breq	.+2      	; 0x84e <Nokia_Tick+0x12c>
     84c:	68 c0       	rjmp	.+208    	; 0x91e <Nokia_Tick+0x1fc>
     84e:	44 df       	rcall	.-376    	; 0x6d8 <N5110_clear>
     850:	60 e8       	ldi	r22, 0x80	; 128
     852:	80 e4       	ldi	r24, 0x40	; 64
     854:	3a df       	rcall	.-396    	; 0x6ca <lcd_setXY>
     856:	82 ee       	ldi	r24, 0xE2	; 226
     858:	95 e0       	ldi	r25, 0x05	; 5
     85a:	4d df       	rcall	.-358    	; 0x6f6 <N5110_image>
     85c:	86 e0       	ldi	r24, 0x06	; 6
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	08 95       	ret
     862:	20 91 f2 0f 	lds	r18, 0x0FF2	; 0x800ff2 <NOKIAReset>
     866:	22 23       	and	r18, r18
     868:	49 f0       	breq	.+18     	; 0x87c <Nokia_Tick+0x15a>
     86a:	82 2f       	mov	r24, r18
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     872:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
     876:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <NOKIAReset>
     87a:	4e c0       	rjmp	.+156    	; 0x918 <Nokia_Tick+0x1f6>
     87c:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <strike>
     880:	26 30       	cpi	r18, 0x06	; 6
     882:	09 f0       	breq	.+2      	; 0x886 <Nokia_Tick+0x164>
     884:	4c c0       	rjmp	.+152    	; 0x91e <Nokia_Tick+0x1fc>
     886:	28 df       	rcall	.-432    	; 0x6d8 <N5110_clear>
     888:	60 e8       	ldi	r22, 0x80	; 128
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	1e df       	rcall	.-452    	; 0x6ca <lcd_setXY>
     88e:	8a ee       	ldi	r24, 0xEA	; 234
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	31 df       	rcall	.-414    	; 0x6f6 <N5110_image>
     894:	2a c0       	rjmp	.+84     	; 0x8ea <Nokia_Tick+0x1c8>
     896:	80 91 f2 0f 	lds	r24, 0x0FF2	; 0x800ff2 <NOKIAReset>
     89a:	88 23       	and	r24, r24
     89c:	41 f0       	breq	.+16     	; 0x8ae <Nokia_Tick+0x18c>
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     8a4:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
     8a8:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <NOKIAReset>
     8ac:	35 c0       	rjmp	.+106    	; 0x918 <Nokia_Tick+0x1f6>
     8ae:	80 91 f3 0f 	lds	r24, 0x0FF3	; 0x800ff3 <counter>
     8b2:	85 31       	cpi	r24, 0x15	; 21
     8b4:	d0 f0       	brcs	.+52     	; 0x8ea <Nokia_Tick+0x1c8>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	08 95       	ret
     8bc:	20 91 f2 0f 	lds	r18, 0x0FF2	; 0x800ff2 <NOKIAReset>
     8c0:	22 23       	and	r18, r18
     8c2:	49 f0       	breq	.+18     	; 0x8d6 <Nokia_Tick+0x1b4>
     8c4:	82 2f       	mov	r24, r18
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     8cc:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
     8d0:	10 92 f2 0f 	sts	0x0FF2, r1	; 0x800ff2 <NOKIAReset>
     8d4:	21 c0       	rjmp	.+66     	; 0x918 <Nokia_Tick+0x1f6>
     8d6:	20 91 f3 0f 	lds	r18, 0x0FF3	; 0x800ff3 <counter>
     8da:	25 31       	cpi	r18, 0x15	; 21
     8dc:	00 f1       	brcs	.+64     	; 0x91e <Nokia_Tick+0x1fc>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	08 95       	ret
     8e4:	87 30       	cpi	r24, 0x07	; 7
     8e6:	91 05       	cpc	r25, r1
     8e8:	d1 f4       	brne	.+52     	; 0x91e <Nokia_Tick+0x1fc>
     8ea:	80 91 f3 0f 	lds	r24, 0x0FF3	; 0x800ff3 <counter>
     8ee:	80 fd       	sbrc	r24, 0
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <Nokia_Tick+0x1d4>
     8f2:	f2 de       	rcall	.-540    	; 0x6d8 <N5110_clear>
     8f4:	06 c0       	rjmp	.+12     	; 0x902 <Nokia_Tick+0x1e0>
     8f6:	60 e8       	ldi	r22, 0x80	; 128
     8f8:	80 e4       	ldi	r24, 0x40	; 64
     8fa:	e7 de       	rcall	.-562    	; 0x6ca <lcd_setXY>
     8fc:	8a ee       	ldi	r24, 0xEA	; 234
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	fa de       	rcall	.-524    	; 0x6f6 <N5110_image>
     902:	80 91 f3 0f 	lds	r24, 0x0FF3	; 0x800ff3 <counter>
     906:	8f 5f       	subi	r24, 0xFF	; 255
     908:	80 93 f3 0f 	sts	0x0FF3, r24	; 0x800ff3 <counter>
     90c:	87 e0       	ldi	r24, 0x07	; 7
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	08 95       	ret
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	08 95       	ret
     918:	87 30       	cpi	r24, 0x07	; 7
     91a:	91 05       	cpc	r25, r1
     91c:	51 f3       	breq	.-44     	; 0x8f2 <Nokia_Tick+0x1d0>
     91e:	08 95       	ret

00000920 <ResetWelcomeMessage>:
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
     926:	dc 01       	movw	r26, r24
     928:	ad 5b       	subi	r26, 0xBD	; 189
     92a:	bf 4f       	sbci	r27, 0xFF	; 255
     92c:	06 c0       	rjmp	.+12     	; 0x93a <ResetWelcomeMessage+0x1a>
     92e:	91 81       	ldd	r25, Z+1	; 0x01
     930:	91 93       	st	Z+, r25
     932:	ae 17       	cp	r26, r30
     934:	bf 07       	cpc	r27, r31
     936:	d9 f7       	brne	.-10     	; 0x92e <ResetWelcomeMessage+0xe>
     938:	2c 93       	st	X, r18
     93a:	28 81       	ld	r18, Y
     93c:	2c 34       	cpi	r18, 0x4C	; 76
     93e:	11 f0       	breq	.+4      	; 0x944 <ResetWelcomeMessage+0x24>
     940:	fe 01       	movw	r30, r28
     942:	f5 cf       	rjmp	.-22     	; 0x92e <ResetWelcomeMessage+0xe>
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <ReturnHighScore>:
     94a:	28 2f       	mov	r18, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	68 ee       	ldi	r22, 0xE8	; 232
     950:	73 e0       	ldi	r23, 0x03	; 3
     952:	80 d5       	rcall	.+2816   	; 0x1454 <__divmodhi4>
     954:	60 93 04 10 	sts	0x1004, r22	; 0x801004 <thousands>
     958:	64 e6       	ldi	r22, 0x64	; 100
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	7b d5       	rcall	.+2806   	; 0x1454 <__divmodhi4>
     95e:	60 93 fc 0f 	sts	0x0FFC, r22	; 0x800ffc <hundreds>
     962:	89 e2       	ldi	r24, 0x29	; 41
     964:	28 9f       	mul	r18, r24
     966:	81 2d       	mov	r24, r1
     968:	11 24       	eor	r1, r1
     96a:	82 95       	swap	r24
     96c:	8f 70       	andi	r24, 0x0F	; 15
     96e:	92 2f       	mov	r25, r18
     970:	34 e6       	ldi	r19, 0x64	; 100
     972:	83 9f       	mul	r24, r19
     974:	90 19       	sub	r25, r0
     976:	11 24       	eor	r1, r1
     978:	8d ec       	ldi	r24, 0xCD	; 205
     97a:	98 9f       	mul	r25, r24
     97c:	91 2d       	mov	r25, r1
     97e:	11 24       	eor	r1, r1
     980:	96 95       	lsr	r25
     982:	96 95       	lsr	r25
     984:	96 95       	lsr	r25
     986:	90 93 01 10 	sts	0x1001, r25	; 0x801001 <tens>
     98a:	28 9f       	mul	r18, r24
     98c:	81 2d       	mov	r24, r1
     98e:	11 24       	eor	r1, r1
     990:	86 95       	lsr	r24
     992:	86 95       	lsr	r24
     994:	86 95       	lsr	r24
     996:	88 0f       	add	r24, r24
     998:	98 2f       	mov	r25, r24
     99a:	99 0f       	add	r25, r25
     99c:	99 0f       	add	r25, r25
     99e:	89 0f       	add	r24, r25
     9a0:	28 1b       	sub	r18, r24
     9a2:	20 93 fd 0f 	sts	0x0FFD, r18	; 0x800ffd <ones>
     9a6:	08 95       	ret

000009a8 <set_PWM>:
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	6b 01       	movw	r12, r22
     9b2:	7c 01       	movw	r14, r24
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	60 91 ba 0f 	lds	r22, 0x0FBA	; 0x800fba <__data_end>
     9bc:	70 91 bb 0f 	lds	r23, 0x0FBB	; 0x800fbb <__data_end+0x1>
     9c0:	80 91 bc 0f 	lds	r24, 0x0FBC	; 0x800fbc <__data_end+0x2>
     9c4:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <__data_end+0x3>
     9c8:	cc d3       	rcall	.+1944   	; 0x1162 <__cmpsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <set_PWM+0x28>
     9ce:	40 c0       	rjmp	.+128    	; 0xa50 <set_PWM+0xa8>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	a9 01       	movw	r20, r18
     9d6:	c7 01       	movw	r24, r14
     9d8:	b6 01       	movw	r22, r12
     9da:	c3 d3       	rcall	.+1926   	; 0x1162 <__cmpsf2>
     9dc:	81 11       	cpse	r24, r1
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <set_PWM+0x40>
     9e0:	85 b5       	in	r24, 0x25	; 37
     9e2:	88 70       	andi	r24, 0x08	; 8
     9e4:	85 bd       	out	0x25, r24	; 37
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <set_PWM+0x46>
     9e8:	85 b5       	in	r24, 0x25	; 37
     9ea:	83 60       	ori	r24, 0x03	; 3
     9ec:	85 bd       	out	0x25, r24	; 37
     9ee:	28 e5       	ldi	r18, 0x58	; 88
     9f0:	39 e3       	ldi	r19, 0x39	; 57
     9f2:	44 e7       	ldi	r20, 0x74	; 116
     9f4:	5f e3       	ldi	r21, 0x3F	; 63
     9f6:	c7 01       	movw	r24, r14
     9f8:	b6 01       	movw	r22, r12
     9fa:	b3 d3       	rcall	.+1894   	; 0x1162 <__cmpsf2>
     9fc:	88 23       	and	r24, r24
     9fe:	1c f4       	brge	.+6      	; 0xa06 <set_PWM+0x5e>
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	87 bd       	out	0x27, r24	; 39
     a04:	1c c0       	rjmp	.+56     	; 0xa3e <set_PWM+0x96>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	34 e2       	ldi	r19, 0x24	; 36
     a0a:	44 ef       	ldi	r20, 0xF4	; 244
     a0c:	56 e4       	ldi	r21, 0x46	; 70
     a0e:	c7 01       	movw	r24, r14
     a10:	b6 01       	movw	r22, r12
     a12:	b9 d4       	rcall	.+2418   	; 0x1386 <__gesf2>
     a14:	18 16       	cp	r1, r24
     a16:	14 f4       	brge	.+4      	; 0xa1c <set_PWM+0x74>
     a18:	17 bc       	out	0x27, r1	; 39
     a1a:	11 c0       	rjmp	.+34     	; 0xa3e <set_PWM+0x96>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	53 e4       	ldi	r21, 0x43	; 67
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	b2 d4       	rcall	.+2404   	; 0x138e <__mulsf3>
     a2a:	9b 01       	movw	r18, r22
     a2c:	ac 01       	movw	r20, r24
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	74 e2       	ldi	r23, 0x24	; 36
     a32:	84 ef       	ldi	r24, 0xF4	; 244
     a34:	9a e4       	ldi	r25, 0x4A	; 74
     a36:	99 d3       	rcall	.+1842   	; 0x116a <__divsf3>
     a38:	00 d4       	rcall	.+2048   	; 0x123a <__fixsfsi>
     a3a:	61 50       	subi	r22, 0x01	; 1
     a3c:	67 bd       	out	0x27, r22	; 39
     a3e:	16 bc       	out	0x26, r1	; 38
     a40:	c0 92 ba 0f 	sts	0x0FBA, r12	; 0x800fba <__data_end>
     a44:	d0 92 bb 0f 	sts	0x0FBB, r13	; 0x800fbb <__data_end+0x1>
     a48:	e0 92 bc 0f 	sts	0x0FBC, r14	; 0x800fbc <__data_end+0x2>
     a4c:	f0 92 bd 0f 	sts	0x0FBD, r15	; 0x800fbd <__data_end+0x3>
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <WA_Tick>:
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	91 05       	cpc	r25, r1
     a5e:	a9 f0       	breq	.+42     	; 0xa8a <WA_Tick+0x30>
     a60:	1c f4       	brge	.+6      	; 0xa68 <WA_Tick+0xe>
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	41 f0       	breq	.+16     	; 0xa76 <WA_Tick+0x1c>
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <WA_Tick+0x5c>
     a68:	82 30       	cpi	r24, 0x02	; 2
     a6a:	91 05       	cpc	r25, r1
     a6c:	d9 f0       	breq	.+54     	; 0xaa4 <WA_Tick+0x4a>
     a6e:	83 30       	cpi	r24, 0x03	; 3
     a70:	91 05       	cpc	r25, r1
     a72:	79 f1       	breq	.+94     	; 0xad2 <WA_Tick+0x78>
     a74:	20 c0       	rjmp	.+64     	; 0xab6 <WA_Tick+0x5c>
     a76:	80 91 ef 0f 	lds	r24, 0x0FEF	; 0x800fef <WAReset>
     a7a:	81 11       	cpse	r24, r1
     a7c:	49 c0       	rjmp	.+146    	; 0xb10 <WA_Tick+0xb6>
     a7e:	80 91 ee 0f 	lds	r24, 0x0FEE	; 0x800fee <wrong>
     a82:	88 23       	and	r24, r24
     a84:	31 f1       	breq	.+76     	; 0xad2 <WA_Tick+0x78>
     a86:	12 9a       	sbi	0x02, 2	; 2
     a88:	2d c0       	rjmp	.+90     	; 0xae4 <WA_Tick+0x8a>
     a8a:	80 91 ef 0f 	lds	r24, 0x0FEF	; 0x800fef <WAReset>
     a8e:	81 11       	cpse	r24, r1
     a90:	3f c0       	rjmp	.+126    	; 0xb10 <WA_Tick+0xb6>
     a92:	80 91 f0 0f 	lds	r24, 0x0FF0	; 0x800ff0 <WA_Count>
     a96:	8f 31       	cpi	r24, 0x1F	; 31
     a98:	28 f1       	brcs	.+74     	; 0xae4 <WA_Tick+0x8a>
     a9a:	10 92 f0 0f 	sts	0x0FF0, r1	; 0x800ff0 <WA_Count>
     a9e:	10 92 ee 0f 	sts	0x0FEE, r1	; 0x800fee <wrong>
     aa2:	2e c0       	rjmp	.+92     	; 0xb00 <WA_Tick+0xa6>
     aa4:	80 91 ef 0f 	lds	r24, 0x0FEF	; 0x800fef <WAReset>
     aa8:	81 11       	cpse	r24, r1
     aaa:	32 c0       	rjmp	.+100    	; 0xb10 <WA_Tick+0xb6>
     aac:	80 91 f1 0f 	lds	r24, 0x0FF1	; 0x800ff1 <letterFound>
     ab0:	81 11       	cpse	r24, r1
     ab2:	26 c0       	rjmp	.+76     	; 0xb00 <WA_Tick+0xa6>
     ab4:	0e c0       	rjmp	.+28     	; 0xad2 <WA_Tick+0x78>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 f0       	breq	.+40     	; 0xae4 <WA_Tick+0x8a>
     abc:	1c f4       	brge	.+6      	; 0xac4 <WA_Tick+0x6a>
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	89 f5       	brne	.+98     	; 0xb24 <WA_Tick+0xca>
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <WA_Tick+0x78>
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	91 05       	cpc	r25, r1
     ac8:	d9 f0       	breq	.+54     	; 0xb00 <WA_Tick+0xa6>
     aca:	83 30       	cpi	r24, 0x03	; 3
     acc:	91 05       	cpc	r25, r1
     ace:	51 f5       	brne	.+84     	; 0xb24 <WA_Tick+0xca>
     ad0:	1f c0       	rjmp	.+62     	; 0xb10 <WA_Tick+0xb6>
     ad2:	10 92 f0 0f 	sts	0x0FF0, r1	; 0x800ff0 <WA_Count>
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	cb 01       	movw	r24, r22
     adc:	65 df       	rcall	.-310    	; 0x9a8 <set_PWM>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	08 95       	ret
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 ed       	ldi	r23, 0xD0	; 208
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	94 e4       	ldi	r25, 0x44	; 68
     aec:	5d df       	rcall	.-326    	; 0x9a8 <set_PWM>
     aee:	80 91 f0 0f 	lds	r24, 0x0FF0	; 0x800ff0 <WA_Count>
     af2:	8f 5f       	subi	r24, 0xFF	; 255
     af4:	80 93 f0 0f 	sts	0x0FF0, r24	; 0x800ff0 <WA_Count>
     af8:	12 9a       	sbi	0x02, 2	; 2
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	08 95       	ret
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	cb 01       	movw	r24, r22
     b06:	50 df       	rcall	.-352    	; 0x9a8 <set_PWM>
     b08:	12 98       	cbi	0x02, 2	; 2
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	08 95       	ret
     b10:	10 92 f1 0f 	sts	0x0FF1, r1	; 0x800ff1 <letterFound>
     b14:	10 92 f0 0f 	sts	0x0FF0, r1	; 0x800ff0 <WA_Count>
     b18:	10 92 ef 0f 	sts	0x0FEF, r1	; 0x800fef <WAReset>
     b1c:	10 92 ee 0f 	sts	0x0FEE, r1	; 0x800fee <wrong>
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	08 95       	ret

00000b26 <PWM_on>:
     b26:	81 e4       	ldi	r24, 0x41	; 65
     b28:	84 bd       	out	0x24, r24	; 36
     b2a:	8b e0       	ldi	r24, 0x0B	; 11
     b2c:	85 bd       	out	0x25, r24	; 37
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	cb 01       	movw	r24, r22
     b34:	39 cf       	rjmp	.-398    	; 0x9a8 <set_PWM>
     b36:	08 95       	ret

00000b38 <LCDBuildChar>:
unsigned char win = 0;
unsigned char LCDReset = 0;


void LCDBuildChar(unsigned char loc, unsigned char *p)
{
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
	unsigned char i;
	if(loc<8) //If valid address
     b40:	88 30       	cpi	r24, 0x08	; 8
     b42:	70 f4       	brcc	.+28     	; 0xb60 <LCDBuildChar+0x28>
     b44:	8b 01       	movw	r16, r22
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
     b46:	88 0f       	add	r24, r24
     b48:	88 0f       	add	r24, r24
     b4a:	88 0f       	add	r24, r24
     b4c:	80 5c       	subi	r24, 0xC0	; 192
     b4e:	1d db       	rcall	.-2502   	; 0x18a <LCD_WriteCommand>
     b50:	e8 01       	movw	r28, r16
     b52:	08 5f       	subi	r16, 0xF8	; 248
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
     b56:	89 91       	ld	r24, Y+
     b58:	3b db       	rcall	.-2442   	; 0x1d0 <LCD_WriteData>
{
	unsigned char i;
	if(loc<8) //If valid address
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		for(i=0;i<8;i++)
     b5a:	c0 17       	cp	r28, r16
     b5c:	d1 07       	cpc	r29, r17
     b5e:	d9 f7       	brne	.-10     	; 0xb56 <LCDBuildChar+0x1e>
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <CheckGuessed>:

void CheckGuessed(){

	letterFound = 0; //letter exists in word
     b6a:	10 92 f1 0f 	sts	0x0FF1, r1	; 0x800ff1 <letterFound>
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     b6e:	20 91 ec 0f 	lds	r18, 0x0FEC	; 0x800fec <WTG_Index>
     b72:	22 23       	and	r18, r18
     b74:	e9 f0       	breq	.+58     	; 0xbb0 <CheckGuessed+0x46>
		if(wordToGuess[b] == P2Guess){
     b76:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <P2Guess>
     b7a:	e7 e6       	ldi	r30, 0x67	; 103
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b1 e0       	ldi	r27, 0x01	; 1
     b82:	21 50       	subi	r18, 0x01	; 1
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	28 59       	subi	r18, 0x98	; 152
     b88:	3e 4f       	sbci	r19, 0xFE	; 254
     b8a:	81 91       	ld	r24, Z+
     b8c:	89 13       	cpse	r24, r25
     b8e:	06 c0       	rjmp	.+12     	; 0xb9c <CheckGuessed+0x32>
			displayGuess[b] = wordToGuess[b];
     b90:	9c 93       	st	X, r25

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     b92:	e2 17       	cp	r30, r18
     b94:	f3 07       	cpc	r31, r19
     b96:	a9 f4       	brne	.+42     	; 0xbc2 <CheckGuessed+0x58>
		if(wordToGuess[b] == P2Guess){
			displayGuess[b] = wordToGuess[b];
			letterFound = 1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <CheckGuessed+0x3e>

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     b9c:	e2 17       	cp	r30, r18
     b9e:	f3 07       	cpc	r31, r19
     ba0:	11 f0       	breq	.+4      	; 0xba6 <CheckGuessed+0x3c>
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	f2 cf       	rjmp	.-28     	; 0xb8a <CheckGuessed+0x20>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	80 93 f1 0f 	sts	0x0FF1, r24	; 0x800ff1 <letterFound>
			letterFound = 1;
		}
		b++;
	}//end while
	
	if(letterFound == 0){
     bac:	81 11       	cpse	r24, r1
     bae:	0c c0       	rjmp	.+24     	; 0xbc8 <CheckGuessed+0x5e>
		strike++;
     bb0:	80 91 f4 0f 	lds	r24, 0x0FF4	; 0x800ff4 <strike>
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 f4 0f 	sts	0x0FF4, r24	; 0x800ff4 <strike>
		wrong = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 ee 0f 	sts	0x0FEE, r24	; 0x800fee <wrong>
	}
}
     bc0:	08 95       	ret
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 f1 0f 	sts	0x0FF1, r24	; 0x800ff1 <letterFound>
     bc8:	08 95       	ret

00000bca <CheckCorrect>:

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
     bca:	10 92 eb 0f 	sts	0x0FEB, r1	; 0x800feb <win>
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     bce:	20 91 ec 0f 	lds	r18, 0x0FEC	; 0x800fec <WTG_Index>
     bd2:	22 23       	and	r18, r18
     bd4:	a9 f0       	breq	.+42     	; 0xc00 <CheckCorrect+0x36>
     bd6:	e0 e0       	ldi	r30, 0x00	; 0
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	2f 5f       	subi	r18, 0xFF	; 255
     be0:	3e 4f       	sbci	r19, 0xFE	; 254
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <CheckCorrect+0x1e>
     be6:	89 2f       	mov	r24, r25
		if(displayGuess[b] == '_'){
     be8:	91 91       	ld	r25, Z+
     bea:	9f 35       	cpi	r25, 0x5F	; 95
     bec:	69 f0       	breq	.+26     	; 0xc08 <CheckCorrect+0x3e>
     bee:	98 2f       	mov	r25, r24

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     bf0:	e2 17       	cp	r30, r18
     bf2:	f3 07       	cpc	r31, r19
     bf4:	19 f0       	breq	.+6      	; 0xbfc <CheckCorrect+0x32>
     bf6:	81 11       	cpse	r24, r1
     bf8:	f6 cf       	rjmp	.-20     	; 0xbe6 <CheckCorrect+0x1c>
     bfa:	08 95       	ret
			checkWin = 0;
		}
		b++;
	}//end while
	
	if(checkWin){
     bfc:	88 23       	and	r24, r24
     bfe:	49 f0       	breq	.+18     	; 0xc12 <CheckCorrect+0x48>
		win = 1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 eb 0f 	sts	0x0FEB, r24	; 0x800feb <win>
	}
}
     c06:	08 95       	ret

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     c08:	e2 17       	cp	r30, r18
     c0a:	f3 07       	cpc	r31, r19
     c0c:	11 f4       	brne	.+4      	; 0xc12 <CheckCorrect+0x48>
		if(displayGuess[b] == '_'){
			checkWin = 0;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	f5 cf       	rjmp	.-22     	; 0xbfc <CheckCorrect+0x32>
     c12:	08 95       	ret

00000c14 <LCD_Tick>:
enum LCD_States{Init, Wait, MenuLCD, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD, 
	ResetLCD};
unsigned char count = 0; //counts how long display message is being displayed
unsigned char highScore;

int LCD_Tick(int state){
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
	switch (state)
     c1e:	89 30       	cpi	r24, 0x09	; 9
     c20:	91 05       	cpc	r25, r1
     c22:	08 f0       	brcs	.+2      	; 0xc26 <LCD_Tick+0x12>
     c24:	da c0       	rjmp	.+436    	; 0xdda <LCD_Tick+0x1c6>
     c26:	fc 01       	movw	r30, r24
     c28:	e6 57       	subi	r30, 0x76	; 118
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	26 c4       	rjmp	.+2124   	; 0x147a <__tablejump2__>
	{
		case Init : state = MenuLCD;
					LCD_ClearScreen();
     c2e:	b6 da       	rcall	.-2708   	; 0x19c <LCD_ClearScreen>
     c30:	12 98       	cbi	0x02, 2	; 2
					PORTA = SetBit(PORTA,2,0);
     c32:	13 98       	cbi	0x02, 3	; 2
					PORTA = SetBit(PORTA,3,0);
     c34:	6e e7       	ldi	r22, 0x7E	; 126
					LCD_DisplayString(1, "High Score ");
     c36:	71 e0       	ldi	r23, 0x01	; 1
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	d3 da       	rcall	.-2650   	; 0x1e2 <LCD_DisplayString>
					LCD_Cursor(12);
     c3c:	8c e0       	ldi	r24, 0x0C	; 12
     c3e:	b1 da       	rcall	.-2718   	; 0x1a2 <LCD_Cursor>
// 					}else {
// 						LCD_WriteData(0 + '0');
// 						LCD_WriteData('s');					
// 					}

					ReturnHighScore(0xfa);
     c40:	8a ef       	ldi	r24, 0xFA	; 250
     c42:	83 de       	rcall	.-762    	; 0x94a <ReturnHighScore>
					LCD_WriteData((thousands) + '0');
     c44:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <thousands>
     c48:	80 5d       	subi	r24, 0xD0	; 208
     c4a:	c2 da       	rcall	.-2684   	; 0x1d0 <LCD_WriteData>
					LCD_WriteData(hundreds + '0');
     c4c:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <hundreds>
     c50:	80 5d       	subi	r24, 0xD0	; 208
     c52:	be da       	rcall	.-2692   	; 0x1d0 <LCD_WriteData>
					LCD_WriteData(tens + '0');
     c54:	80 91 01 10 	lds	r24, 0x1001	; 0x801001 <tens>
     c58:	80 5d       	subi	r24, 0xD0	; 208
     c5a:	ba da       	rcall	.-2700   	; 0x1d0 <LCD_WriteData>
					LCD_WriteData(ones + '0');
     c5c:	80 91 fd 0f 	lds	r24, 0x0FFD	; 0x800ffd <ones>
     c60:	80 5d       	subi	r24, 0xD0	; 208
     c62:	b6 da       	rcall	.-2708   	; 0x1d0 <LCD_WriteData>
     c64:	01 e1       	ldi	r16, 0x11	; 17
     c66:	11 e0       	ldi	r17, 0x01	; 1
     c68:	0f 2e       	mov	r0, r31
     c6a:	fc e1       	ldi	r31, 0x1C	; 28
     c6c:	ef 2e       	mov	r14, r31
     c6e:	f1 e0       	ldi	r31, 0x01	; 1
     c70:	ff 2e       	mov	r15, r31
     c72:	f0 2d       	mov	r31, r0

					for(unsigned char a = 0; a < 11; a++){
						LCD_Cursor(a + 17);
     c74:	c1 e1       	ldi	r28, 0x11	; 17
     c76:	8c 2f       	mov	r24, r28
     c78:	94 da       	rcall	.-2776   	; 0x1a2 <LCD_Cursor>
						LCD_WriteData(pressEnter[a]);
     c7a:	f8 01       	movw	r30, r16
     c7c:	81 91       	ld	r24, Z+
     c7e:	8f 01       	movw	r16, r30
     c80:	a7 da       	rcall	.-2738   	; 0x1d0 <LCD_WriteData>
     c82:	cf 5f       	subi	r28, 0xFF	; 255
     c84:	0e 15       	cp	r16, r14
					LCD_WriteData((thousands) + '0');
					LCD_WriteData(hundreds + '0');
					LCD_WriteData(tens + '0');
					LCD_WriteData(ones + '0');

					for(unsigned char a = 0; a < 11; a++){
     c86:	1f 05       	cpc	r17, r15
     c88:	b1 f7       	brne	.-20     	; 0xc76 <LCD_Tick+0x62>
     c8a:	82 e0       	ldi	r24, 0x02	; 2
unsigned char highScore;

int LCD_Tick(int state){
	switch (state)
	{
		case Init : state = MenuLCD;
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	c3 c1       	rjmp	.+902    	; 0x1016 <LCD_Tick+0x402>
     c90:	20 b1       	in	r18, 0x00	; 0
						LCD_WriteData(pressEnter[a]);
					}
					
					
		break;
		case Wait : if(GetBit(~PINA,7)){
     c92:	20 95       	com	r18
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	22 0f       	add	r18, r18
     c98:	23 2f       	mov	r18, r19
     c9a:	22 1f       	adc	r18, r18
     c9c:	33 0b       	sbc	r19, r19
     c9e:	31 95       	neg	r19
     ca0:	23 2b       	or	r18, r19
     ca2:	09 f0       	breq	.+2      	; 0xca6 <LCD_Tick+0x92>
     ca4:	7f c1       	rjmp	.+766    	; 0xfa4 <LCD_Tick+0x390>
     ca6:	b7 c1       	rjmp	.+878    	; 0x1016 <LCD_Tick+0x402>
						state = ResetLCD;	
					}else{
						state = Wait;
					}
		break;
		case MenuLCD : if(GetBit(~PINA,6)){
     ca8:	20 b1       	in	r18, 0x00	; 0
     caa:	20 95       	com	r18
     cac:	26 ff       	sbrs	r18, 6
     cae:	b3 c1       	rjmp	.+870    	; 0x1016 <LCD_Tick+0x402>
							state = WelcomeLCD;
							LCD_ClearScreen();
     cb0:	75 da       	rcall	.-2838   	; 0x19c <LCD_ClearScreen>
     cb2:	ab c0       	rjmp	.+342    	; 0xe0a <LCD_Tick+0x1f6>
     cb4:	80 b1       	in	r24, 0x00	; 0
						}else {
							state = MenuLCD;
						}
		break;
		case WelcomeLCD :	if(GetBit(~PINA,7)){
     cb6:	80 95       	com	r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	88 0f       	add	r24, r24
     cbc:	89 2f       	mov	r24, r25
     cbe:	88 1f       	adc	r24, r24
     cc0:	99 0b       	sbc	r25, r25
     cc2:	91 95       	neg	r25
     cc4:	89 2b       	or	r24, r25
     cc6:	09 f0       	breq	.+2      	; 0xcca <LCD_Tick+0xb6>
								state = ResetLCD;
							}else if(count <= 51){ 
     cc8:	6d c1       	rjmp	.+730    	; 0xfa4 <LCD_Tick+0x390>
     cca:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <count>
     cce:	84 33       	cpi	r24, 0x34	; 52
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <LCD_Tick+0xc0>
							  state = WelcomeLCD;
						  }
						  else if(count > 51){
							  state = P1InputLCD;
							  LCD_ClearScreen();
     cd2:	9b c0       	rjmp	.+310    	; 0xe0a <LCD_Tick+0x1f6>
     cd4:	63 da       	rcall	.-2874   	; 0x19c <LCD_ClearScreen>
							  LCD_DisplayString(17,"16 Letters MAX");
     cd6:	6a e8       	ldi	r22, 0x8A	; 138
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	81 e1       	ldi	r24, 0x11	; 17
     cdc:	82 da       	rcall	.-2812   	; 0x1e2 <LCD_DisplayString>
     cde:	81 e0       	ldi	r24, 0x01	; 1
							  LCD_Cursor(1);
     ce0:	60 da       	rcall	.-2880   	; 0x1a2 <LCD_Cursor>
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <LCDindex>
							  LCDindex = 1;
     ce8:	da c0       	rjmp	.+436    	; 0xe9e <LCD_Tick+0x28a>
     cea:	80 b1       	in	r24, 0x00	; 0
     cec:	80 95       	com	r24
						 }
		break;
		case P1InputLCD :	if(GetBit(~PINA,7)){
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	88 0f       	add	r24, r24
     cf2:	89 2f       	mov	r24, r25
     cf4:	88 1f       	adc	r24, r24
     cf6:	99 0b       	sbc	r25, r25
     cf8:	91 95       	neg	r25
     cfa:	89 2b       	or	r24, r25
     cfc:	09 f0       	breq	.+2      	; 0xd00 <LCD_Tick+0xec>
     cfe:	52 c1       	rjmp	.+676    	; 0xfa4 <LCD_Tick+0x390>
								state = ResetLCD;
							}else if(GetBit(~PINA, 6)){
     d00:	80 b1       	in	r24, 0x00	; 0
     d02:	80 95       	com	r24
     d04:	86 ff       	sbrs	r24, 6
     d06:	cb c0       	rjmp	.+406    	; 0xe9e <LCD_Tick+0x28a>
								LCD_ClearScreen();
     d08:	49 da       	rcall	.-2926   	; 0x19c <LCD_ClearScreen>
     d0a:	82 e0       	ldi	r24, 0x02	; 2
								state = P2InputLCD;
								delay_ms(2);
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	2a da       	rcall	.-2988   	; 0x164 <delay_ms>
							
								for(unsigned char a = 0; a < WTG_Index; a++){
     d10:	80 91 ec 0f 	lds	r24, 0x0FEC	; 0x800fec <WTG_Index>
     d14:	88 23       	and	r24, r24
     d16:	89 f0       	breq	.+34     	; 0xd3a <LCD_Tick+0x126>
     d18:	c0 e0       	ldi	r28, 0x00	; 0
									displayGuess[a] = '_';
     d1a:	1f e5       	ldi	r17, 0x5F	; 95
     d1c:	ec 2f       	mov	r30, r28
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	e0 50       	subi	r30, 0x00	; 0
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
									LCD_Cursor(a + 17);
     d24:	10 83       	st	Z, r17
     d26:	81 e1       	ldi	r24, 0x11	; 17
     d28:	8c 0f       	add	r24, r28
     d2a:	3b da       	rcall	.-2954   	; 0x1a2 <LCD_Cursor>
									LCD_WriteData('_');
     d2c:	81 2f       	mov	r24, r17
     d2e:	50 da       	rcall	.-2912   	; 0x1d0 <LCD_WriteData>
     d30:	cf 5f       	subi	r28, 0xFF	; 255
							}else if(GetBit(~PINA, 6)){
								LCD_ClearScreen();
								state = P2InputLCD;
								delay_ms(2);
							
								for(unsigned char a = 0; a < WTG_Index; a++){
     d32:	80 91 ec 0f 	lds	r24, 0x0FEC	; 0x800fec <WTG_Index>
     d36:	c8 17       	cp	r28, r24
     d38:	88 f3       	brcs	.-30     	; 0xd1c <LCD_Tick+0x108>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
									displayGuess[a] = '_';
									LCD_Cursor(a + 17);
									LCD_WriteData('_');
								}
								
								LCD_Cursor(1);
     d3c:	32 da       	rcall	.-2972   	; 0x1a2 <LCD_Cursor>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <LCDindex>
								LCDindex = 1;					
     d44:	d6 c0       	rjmp	.+428    	; 0xef2 <LCD_Tick+0x2de>
     d46:	80 b1       	in	r24, 0x00	; 0
     d48:	80 95       	com	r24
						}else{						
							state = P1InputLCD;
						}
		break;
		case P2InputLCD :	if(GetBit(~PINA,7)){
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	88 0f       	add	r24, r24
     d4e:	89 2f       	mov	r24, r25
     d50:	88 1f       	adc	r24, r24
     d52:	99 0b       	sbc	r25, r25
     d54:	91 95       	neg	r25
     d56:	89 2b       	or	r24, r25
     d58:	09 f0       	breq	.+2      	; 0xd5c <LCD_Tick+0x148>
     d5a:	24 c1       	rjmp	.+584    	; 0xfa4 <LCD_Tick+0x390>
     d5c:	80 91 f4 0f 	lds	r24, 0x0FF4	; 0x800ff4 <strike>
								state = ResetLCD;
								
							}else if(strike == 6){
     d60:	86 30       	cpi	r24, 0x06	; 6
     d62:	19 f4       	brne	.+6      	; 0xd6a <LCD_Tick+0x156>
     d64:	10 92 ea 0f 	sts	0x0FEA, r1	; 0x800fea <count>
								state = LoseLCD;
								count = 0;
     d68:	0f c1       	rjmp	.+542    	; 0xf88 <LCD_Tick+0x374>
     d6a:	80 91 eb 0f 	lds	r24, 0x0FEB	; 0x800feb <win>
							} else if(win){
     d6e:	88 23       	and	r24, r24
     d70:	09 f4       	brne	.+2      	; 0xd74 <LCD_Tick+0x160>
     d72:	bf c0       	rjmp	.+382    	; 0xef2 <LCD_Tick+0x2de>
     d74:	10 92 ea 0f 	sts	0x0FEA, r1	; 0x800fea <count>
								state = WinLCD;
								count = 0;
     d78:	f5 c0       	rjmp	.+490    	; 0xf64 <LCD_Tick+0x350>
     d7a:	80 b1       	in	r24, 0x00	; 0
							else
							{
								state = P2InputLCD;
							}
		break;
		case WinLCD:	if(GetBit(~PINA,7)){
     d7c:	80 95       	com	r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	88 0f       	add	r24, r24
     d82:	89 2f       	mov	r24, r25
     d84:	88 1f       	adc	r24, r24
     d86:	99 0b       	sbc	r25, r25
     d88:	91 95       	neg	r25
     d8a:	89 2b       	or	r24, r25
     d8c:	09 f0       	breq	.+2      	; 0xd90 <LCD_Tick+0x17c>
     d8e:	0a c1       	rjmp	.+532    	; 0xfa4 <LCD_Tick+0x390>
							state = ResetLCD;
						}else if(count <= 20){
     d90:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <count>
     d94:	85 31       	cpi	r24, 0x15	; 21
     d96:	08 f4       	brcc	.+2      	; 0xd9a <LCD_Tick+0x186>
     d98:	e1 c0       	rjmp	.+450    	; 0xf5c <LCD_Tick+0x348>
							state = WinLCD;
						}else if(count > 20){
							state = Wait;
							LCD_ClearScreen();
     d9a:	00 da       	rcall	.-3072   	; 0x19c <LCD_ClearScreen>
     d9c:	69 e9       	ldi	r22, 0x99	; 153
							LCD_DisplayString(1, "Press RESET to start a new game");
     d9e:	71 e0       	ldi	r23, 0x01	; 1
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	1f da       	rcall	.-3010   	; 0x1e2 <LCD_DisplayString>
     da4:	81 e0       	ldi	r24, 0x01	; 1
		case WinLCD:	if(GetBit(~PINA,7)){
							state = ResetLCD;
						}else if(count <= 20){
							state = WinLCD;
						}else if(count > 20){
							state = Wait;
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	36 c1       	rjmp	.+620    	; 0x1016 <LCD_Tick+0x402>
							LCD_ClearScreen();
							LCD_DisplayString(1, "Press RESET to start a new game");
						}
						
		break;
		case LoseLCD :	if(GetBit(~PINA,7)){
     daa:	80 b1       	in	r24, 0x00	; 0
     dac:	80 95       	com	r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	88 0f       	add	r24, r24
     db2:	89 2f       	mov	r24, r25
     db4:	88 1f       	adc	r24, r24
     db6:	99 0b       	sbc	r25, r25
     db8:	91 95       	neg	r25
     dba:	89 2b       	or	r24, r25
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <LCD_Tick+0x1ac>
     dbe:	f2 c0       	rjmp	.+484    	; 0xfa4 <LCD_Tick+0x390>
							state = ResetLCD;
						}else if(count <= 20){
     dc0:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <count>
     dc4:	85 31       	cpi	r24, 0x15	; 21
     dc6:	08 f4       	brcc	.+2      	; 0xdca <LCD_Tick+0x1b6>
     dc8:	db c0       	rjmp	.+438    	; 0xf80 <LCD_Tick+0x36c>
							state = LoseLCD;
						}else if(count > 20)
						{
							state = Wait;
							LCD_ClearScreen();
     dca:	e8 d9       	rcall	.-3120   	; 0x19c <LCD_ClearScreen>
     dcc:	69 e9       	ldi	r22, 0x99	; 153
							LCD_DisplayString(1, "Press RESET to start a new game");
     dce:	71 e0       	ldi	r23, 0x01	; 1
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	07 da       	rcall	.-3058   	; 0x1e2 <LCD_DisplayString>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
							state = ResetLCD;
						}else if(count <= 20){
							state = LoseLCD;
						}else if(count > 20)
						{
							state = Wait;
     dd8:	1e c1       	rjmp	.+572    	; 0x1016 <LCD_Tick+0x402>
     dda:	85 30       	cpi	r24, 0x05	; 5
     ddc:	91 05       	cpc	r25, r1
		break;
		case ResetLCD : state = WelcomeLCD;
		break;
	}//end Transitions
	
	switch (state)
     dde:	09 f4       	brne	.+2      	; 0xde2 <LCD_Tick+0x1ce>
     de0:	88 c0       	rjmp	.+272    	; 0xef2 <LCD_Tick+0x2de>
     de2:	44 f4       	brge	.+16     	; 0xdf4 <LCD_Tick+0x1e0>
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	81 f0       	breq	.+32     	; 0xe0a <LCD_Tick+0x1f6>
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	91 05       	cpc	r25, r1
     dee:	09 f4       	brne	.+2      	; 0xdf2 <LCD_Tick+0x1de>
     df0:	56 c0       	rjmp	.+172    	; 0xe9e <LCD_Tick+0x28a>
     df2:	11 c1       	rjmp	.+546    	; 0x1016 <LCD_Tick+0x402>
     df4:	87 30       	cpi	r24, 0x07	; 7
     df6:	91 05       	cpc	r25, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <LCD_Tick+0x1e8>
     dfa:	c2 c0       	rjmp	.+388    	; 0xf80 <LCD_Tick+0x36c>
     dfc:	0c f4       	brge	.+2      	; 0xe00 <LCD_Tick+0x1ec>
     dfe:	ae c0       	rjmp	.+348    	; 0xf5c <LCD_Tick+0x348>
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	91 05       	cpc	r25, r1
     e04:	09 f0       	breq	.+2      	; 0xe08 <LCD_Tick+0x1f4>
     e06:	07 c1       	rjmp	.+526    	; 0x1016 <LCD_Tick+0x402>
     e08:	cd c0       	rjmp	.+410    	; 0xfa4 <LCD_Tick+0x390>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
							for(LCDindex = 0; LCDindex < 16; LCDindex++){
     e0a:	10 92 ed 0f 	sts	0x0FED, r1	; 0x800fed <LCDindex>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
								LCD_Cursor(LCDindex + 1);
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	c7 d9       	rcall	.-3186   	; 0x1a2 <LCD_Cursor>
     e14:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <LCDindex>
								LCD_WriteData(welcomeMessage[LCDindex]);
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	e4 5e       	subi	r30, 0xE4	; 228
     e1c:	fe 4f       	sbci	r31, 0xFE	; 254
     e1e:	80 81       	ld	r24, Z
     e20:	d7 d9       	rcall	.-3154   	; 0x1d0 <LCD_WriteData>
     e22:	80 91 ed 0f 	lds	r24, 0x0FED	; 0x800fed <LCDindex>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
							for(LCDindex = 0; LCDindex < 16; LCDindex++){
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <LCDindex>
     e2c:	80 31       	cpi	r24, 0x10	; 16
								LCD_Cursor(LCDindex + 1);
								LCD_WriteData(welcomeMessage[LCDindex]);
							}
				
							front = welcomeMessage[0];
     e2e:	80 f3       	brcs	.-32     	; 0xe10 <LCD_Tick+0x1fc>
     e30:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <welcomeMessage>
     e34:	90 93 fe 0f 	sts	0x0FFE, r25	; 0x800ffe <front>
		
							for (unsigned char j = 0; j < 67; j++) {
								welcomeMessage[j] = welcomeMessage[j + 1];
     e38:	ec e1       	ldi	r30, 0x1C	; 28
								LCD_WriteData(welcomeMessage[LCDindex]);
							}
				
							front = welcomeMessage[0];
		
							for (unsigned char j = 0; j < 67; j++) {
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
     e3c:	2f e5       	ldi	r18, 0x5F	; 95
								welcomeMessage[j] = welcomeMessage[j + 1];
							}
							// put the saved character on the end
							welcomeMessage[67] = front;
     e3e:	31 e0       	ldi	r19, 0x01	; 1
		
							LCDBuildChar(0, customChar);
     e40:	81 81       	ldd	r24, Z+1	; 0x01
     e42:	81 93       	st	Z+, r24
     e44:	e2 17       	cp	r30, r18
								LCD_Cursor(17);
     e46:	f3 07       	cpc	r31, r19
     e48:	d9 f7       	brne	.-10     	; 0xe40 <LCD_Tick+0x22c>
								LCD_WriteData(0x00);
     e4a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <customChar>
     e4e:	6f e5       	ldi	r22, 0x5F	; 95
								LCD_Cursor(20);
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	71 de       	rcall	.-798    	; 0xb38 <LCDBuildChar>
								LCD_WriteData(0x00);
     e56:	81 e1       	ldi	r24, 0x11	; 17
     e58:	a4 d9       	rcall	.-3256   	; 0x1a2 <LCD_Cursor>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
								LCD_Cursor(23);
     e5c:	b9 d9       	rcall	.-3214   	; 0x1d0 <LCD_WriteData>
     e5e:	84 e1       	ldi	r24, 0x14	; 20
     e60:	a0 d9       	rcall	.-3264   	; 0x1a2 <LCD_Cursor>
								LCD_WriteData(0x00);
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	b5 d9       	rcall	.-3222   	; 0x1d0 <LCD_WriteData>
     e66:	87 e1       	ldi	r24, 0x17	; 23
								LCD_Cursor(26);
     e68:	9c d9       	rcall	.-3272   	; 0x1a2 <LCD_Cursor>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	b1 d9       	rcall	.-3230   	; 0x1d0 <LCD_WriteData>
								LCD_WriteData(0x00);
     e6e:	8a e1       	ldi	r24, 0x1A	; 26
     e70:	98 d9       	rcall	.-3280   	; 0x1a2 <LCD_Cursor>
     e72:	80 e0       	ldi	r24, 0x00	; 0
								LCD_Cursor(29);
     e74:	ad d9       	rcall	.-3238   	; 0x1d0 <LCD_WriteData>
     e76:	8d e1       	ldi	r24, 0x1D	; 29
     e78:	94 d9       	rcall	.-3288   	; 0x1a2 <LCD_Cursor>
								LCD_WriteData(0x00);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	a9 d9       	rcall	.-3246   	; 0x1d0 <LCD_WriteData>
     e7e:	80 e2       	ldi	r24, 0x20	; 32
								LCD_Cursor(32);
     e80:	90 d9       	rcall	.-3296   	; 0x1a2 <LCD_Cursor>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	a5 d9       	rcall	.-3254   	; 0x1d0 <LCD_WriteData>
								LCD_WriteData(0x00);
     e86:	83 e2       	ldi	r24, 0x23	; 35
     e88:	8c d9       	rcall	.-3304   	; 0x1a2 <LCD_Cursor>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
								LCD_Cursor(35);
     e8c:	a1 d9       	rcall	.-3262   	; 0x1d0 <LCD_WriteData>
     e8e:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <count>
								LCD_WriteData(0x00);
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <count>
		
							count++;
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	bc c0       	rjmp	.+376    	; 0x1016 <LCD_Tick+0x402>
     e9e:	80 b1       	in	r24, 0x00	; 0
		
			
		break;
     ea0:	80 95       	com	r24
     ea2:	85 ff       	sbrs	r24, 5
		case P1InputLCD :	if(GetBit(~PINA,5)){
     ea4:	18 c0       	rjmp	.+48     	; 0xed6 <LCD_Tick+0x2c2>
     ea6:	80 91 ec 0f 	lds	r24, 0x0FEC	; 0x800fec <WTG_Index>
     eaa:	80 31       	cpi	r24, 0x10	; 16
								if(WTG_Index < 16){
     eac:	a0 f4       	brcc	.+40     	; 0xed6 <LCD_Tick+0x2c2>
     eae:	90 91 ed 0f 	lds	r25, 0x0FED	; 0x800fed <LCDindex>
     eb2:	9f 5f       	subi	r25, 0xFF	; 255
									LCDindex++;
     eb4:	90 93 ed 0f 	sts	0x0FED, r25	; 0x800fed <LCDindex>
     eb8:	e8 2f       	mov	r30, r24
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	e9 59       	subi	r30, 0x99	; 153
									wordToGuess[WTG_Index] = lastClicked;
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	90 91 03 10 	lds	r25, 0x1003	; 0x801003 <lastClicked>
     ec4:	90 83       	st	Z, r25
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
									WTG_Index++;
     ec8:	80 93 ec 0f 	sts	0x0FEC, r24	; 0x800fec <WTG_Index>
									character = ' ';
     ecc:	80 e2       	ldi	r24, 0x20	; 32
     ece:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
									click = 0;
     ed2:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <click>
					
								}
							}
							LCD_Cursor(LCDindex);
     ed6:	80 91 ed 0f 	lds	r24, 0x0FED	; 0x800fed <LCDindex>
							if(character != ' '){
     eda:	63 d9       	rcall	.-3386   	; 0x1a2 <LCD_Cursor>
     edc:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <character>
     ee0:	80 32       	cpi	r24, 0x20	; 32
								lastClicked = character;
     ee2:	09 f4       	brne	.+2      	; 0xee6 <LCD_Tick+0x2d2>
     ee4:	93 c0       	rjmp	.+294    	; 0x100c <LCD_Tick+0x3f8>
								LCD_WriteData(character);
     ee6:	80 93 03 10 	sts	0x1003, r24	; 0x801003 <lastClicked>
     eea:	72 d9       	rcall	.-3356   	; 0x1d0 <LCD_WriteData>
     eec:	84 e0       	ldi	r24, 0x04	; 4
							}
			
		break;
 		case P2InputLCD :	if(GetBit(~PINA,5)){
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	92 c0       	rjmp	.+292    	; 0x1016 <LCD_Tick+0x402>
     ef2:	80 b1       	in	r24, 0x00	; 0
     ef4:	80 95       	com	r24
									P2Guess = lastClicked;
     ef6:	85 ff       	sbrs	r24, 5
     ef8:	24 c0       	rjmp	.+72     	; 0xf42 <LCD_Tick+0x32e>
     efa:	80 91 03 10 	lds	r24, 0x1003	; 0x801003 <lastClicked>
									character = ' ';
     efe:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <P2Guess>
									click = 0;
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
									LCD_Cursor(1);
     f08:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <click>
									LCD_WriteData(' ');
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	49 d9       	rcall	.-3438   	; 0x1a2 <LCD_Cursor>
									LCD_Cursor(1);
     f10:	80 e2       	ldi	r24, 0x20	; 32
     f12:	5e d9       	rcall	.-3396   	; 0x1d0 <LCD_WriteData>
						
									CheckGuessed();
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	45 d9       	rcall	.-3446   	; 0x1a2 <LCD_Cursor>
									CheckCorrect();
     f18:	28 de       	rcall	.-944    	; 0xb6a <CheckGuessed>
     f1a:	57 de       	rcall	.-850    	; 0xbca <CheckCorrect>
									for(unsigned char a = 0; a < WTG_Index; a++){
     f1c:	80 91 ec 0f 	lds	r24, 0x0FEC	; 0x800fec <WTG_Index>
     f20:	88 23       	and	r24, r24
     f22:	79 f0       	breq	.+30     	; 0xf42 <LCD_Tick+0x32e>
     f24:	c0 e0       	ldi	r28, 0x00	; 0
										LCD_Cursor(a + 17);
     f26:	81 e1       	ldi	r24, 0x11	; 17
     f28:	8c 0f       	add	r24, r28
     f2a:	3b d9       	rcall	.-3466   	; 0x1a2 <LCD_Cursor>
										LCD_WriteData(displayGuess[a]);
     f2c:	ec 2f       	mov	r30, r28
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	e0 50       	subi	r30, 0x00	; 0
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	4c d9       	rcall	.-3432   	; 0x1d0 <LCD_WriteData>
									LCD_WriteData(' ');
									LCD_Cursor(1);
						
									CheckGuessed();
									CheckCorrect();
									for(unsigned char a = 0; a < WTG_Index; a++){
     f38:	cf 5f       	subi	r28, 0xFF	; 255
     f3a:	80 91 ec 0f 	lds	r24, 0x0FEC	; 0x800fec <WTG_Index>
     f3e:	c8 17       	cp	r28, r24
     f40:	90 f3       	brcs	.-28     	; 0xf26 <LCD_Tick+0x312>
										LCD_Cursor(a + 17);
										LCD_WriteData(displayGuess[a]);
									}
					
							}
							LCD_Cursor(1);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	2e d9       	rcall	.-3492   	; 0x1a2 <LCD_Cursor>
							if(character != ' '){
     f46:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <character>
     f4a:	80 32       	cpi	r24, 0x20	; 32
     f4c:	09 f4       	brne	.+2      	; 0xf50 <LCD_Tick+0x33c>
     f4e:	61 c0       	rjmp	.+194    	; 0x1012 <LCD_Tick+0x3fe>
								lastClicked = character;
     f50:	80 93 03 10 	sts	0x1003, r24	; 0x801003 <lastClicked>
								LCD_WriteData(character);
     f54:	3d d9       	rcall	.-3462   	; 0x1d0 <LCD_WriteData>
     f56:	85 e0       	ldi	r24, 0x05	; 5
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	5d c0       	rjmp	.+186    	; 0x1016 <LCD_Tick+0x402>
     f5c:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <count>
							}
				
							
		break;
		case WinLCD:	if(count % 2 == 0){
     f60:	80 fd       	sbrc	r24, 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <LCD_Tick+0x354>
     f64:	1b d9       	rcall	.-3530   	; 0x19c <LCD_ClearScreen>
							LCD_ClearScreen();
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <LCD_Tick+0x35c>
     f68:	69 eb       	ldi	r22, 0xB9	; 185
     f6a:	71 e0       	ldi	r23, 0x01	; 1
						}else {
							LCD_DisplayString(1, "YOU WIN! YOU WIN! YOU WIN!");
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	39 d9       	rcall	.-3470   	; 0x1e2 <LCD_DisplayString>
     f70:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <count>
     f74:	8f 5f       	subi	r24, 0xFF	; 255
						}
						count++;
     f76:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <count>
     f7a:	86 e0       	ldi	r24, 0x06	; 6
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	4b c0       	rjmp	.+150    	; 0x1016 <LCD_Tick+0x402>
		break;
     f80:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <count>
     f84:	80 fd       	sbrc	r24, 0
		case LoseLCD :	if(count % 2 == 0){
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <LCD_Tick+0x378>
     f88:	09 d9       	rcall	.-3566   	; 0x19c <LCD_ClearScreen>
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <LCD_Tick+0x380>
     f8c:	64 ed       	ldi	r22, 0xD4	; 212
							LCD_ClearScreen();
     f8e:	71 e0       	ldi	r23, 0x01	; 1
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	27 d9       	rcall	.-3506   	; 0x1e2 <LCD_DisplayString>
						}else {
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
     f94:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <count>
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <count>
						}
						count++;
     f9e:	87 e0       	ldi	r24, 0x07	; 7
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	39 c0       	rjmp	.+114    	; 0x1016 <LCD_Tick+0x402>
     fa4:	10 92 ea 0f 	sts	0x0FEA, r1	; 0x800fea <count>
						
		break;
     fa8:	f9 d8       	rcall	.-3598   	; 0x19c <LCD_ClearScreen>
     faa:	81 e0       	ldi	r24, 0x01	; 1
		case ResetLCD :	state = WelcomeLCD;
						count = 0;
     fac:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <LCDindex>
						LCD_ClearScreen();
     fb0:	10 92 ec 0f 	sts	0x0FEC, r1	; 0x800fec <WTG_Index>
						LCDindex = 1;
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	80 93 03 10 	sts	0x1003, r24	; 0x801003 <lastClicked>
						WTG_Index = 0; //world to guess index
     fba:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <P2Guess>
						lastClicked = ' ';  //last letter user clicked
     fbe:	e0 e0       	ldi	r30, 0x00	; 0
     fc0:	f1 e0       	ldi	r31, 0x01	; 1
     fc2:	a7 e6       	ldi	r26, 0x67	; 103
						P2Guess = ' ';
     fc4:	b1 e0       	ldi	r27, 0x01	; 1
     fc6:	21 e1       	ldi	r18, 0x11	; 17
     fc8:	31 e0       	ldi	r19, 0x01	; 1
     fca:	9f e5       	ldi	r25, 0x5F	; 95
     fcc:	91 93       	st	Z+, r25
     fce:	8d 93       	st	X+, r24
     fd0:	e2 17       	cp	r30, r18
     fd2:	f3 07       	cpc	r31, r19
						for(unsigned char k = 0; k < 17; k++){
							displayGuess[k] = '_';
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <LCD_Tick+0x3b8>
     fd6:	10 92 f1 0f 	sts	0x0FF1, r1	; 0x800ff1 <letterFound>
						LCD_ClearScreen();
						LCDindex = 1;
						WTG_Index = 0; //world to guess index
						lastClicked = ' ';  //last letter user clicked
						P2Guess = ' ';
						for(unsigned char k = 0; k < 17; k++){
     fda:	10 92 f0 0f 	sts	0x0FF0, r1	; 0x800ff0 <WA_Count>
     fde:	81 e0       	ldi	r24, 0x01	; 1
							displayGuess[k] = '_';
							wordToGuess[k] = ' ';
						}
						letterFound = 0; //checks is the letter P2 guess was in P1s word
     fe0:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <index>
						WA_Count = 0;
     fe4:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <click>
						index = 1;
     fe8:	10 92 f4 0f 	sts	0x0FF4, r1	; 0x800ff4 <strike>
     fec:	10 92 f3 0f 	sts	0x0FF3, r1	; 0x800ff3 <counter>
						click = 0;
     ff0:	10 92 eb 0f 	sts	0x0FEB, r1	; 0x800feb <win>
						strike = 0;
     ff4:	80 93 f2 0f 	sts	0x0FF2, r24	; 0x800ff2 <NOKIAReset>
						counter = 0;
     ff8:	80 93 ef 0f 	sts	0x0FEF, r24	; 0x800fef <WAReset>
						win = 0; 
     ffc:	12 98       	cbi	0x02, 2	; 2
						NOKIAReset = 1;
     ffe:	13 98       	cbi	0x02, 3	; 2
    1000:	8c e1       	ldi	r24, 0x1C	; 28
						WAReset = 1;
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	8d dc       	rcall	.-1766   	; 0x920 <ResetWelcomeMessage>
						PORTA = SetBit(PORTA,2,0);
    1006:	83 e0       	ldi	r24, 0x03	; 3
						PORTA = SetBit(PORTA,3,0);
    1008:	90 e0       	ldi	r25, 0x00	; 0
						ResetWelcomeMessage(&welcomeMessage);
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <LCD_Tick+0x402>
    100c:	84 e0       	ldi	r24, 0x04	; 4
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <LCD_Tick+0x402>
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
						}
						count++;
						
		break;
		case ResetLCD :	state = WelcomeLCD;
    1012:	85 e0       	ldi	r24, 0x05	; 5
    1014:	90 e0       	ldi	r25, 0x00	; 0
						NOKIAReset = 1;
						WAReset = 1;
						PORTA = SetBit(PORTA,2,0);
						PORTA = SetBit(PORTA,3,0);
						ResetWelcomeMessage(&welcomeMessage);
		break;
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	08 95       	ret

00001022 <main>:
	}//end Initializations
	
	
	return state;
}
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	8a b9       	out	0x0a, r24	; 10
    1026:	1b b8       	out	0x0b, r1	; 11
    1028:	81 b9       	out	0x01, r24	; 1
    102a:	82 b9       	out	0x02, r24	; 2
    102c:	84 b9       	out	0x04, r24	; 4

int main(void)
{
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
	DDRA = 0xFF; PORTA = 0xFF; // LCD control lines
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
    102e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
    1030:	80 ef       	ldi	r24, 0xF0	; 240
    1032:	87 b9       	out	0x07, r24	; 7
    1034:	8f e0       	ldi	r24, 0x0F	; 15
    1036:	88 b9       	out	0x08, r24	; 8
	unsigned long NokiaPeriod = 500;
	
	unsigned long period = 100;
	unsigned char i = 0;
	
	Tasks[i].state = Init;
    1038:	ee eb       	ldi	r30, 0xBE	; 190
    103a:	ff e0       	ldi	r31, 0x0F	; 15
    103c:	10 82       	st	Z, r1
	Tasks[i].period = LCDPeriod;
    103e:	84 ef       	ldi	r24, 0xF4	; 244
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	81 83       	std	Z+1, r24	; 0x01
    1048:	92 83       	std	Z+2, r25	; 0x02
    104a:	a3 83       	std	Z+3, r26	; 0x03
    104c:	b4 83       	std	Z+4, r27	; 0x04
	Tasks[i].elapsedTime = LCDPeriod;
    104e:	85 83       	std	Z+5, r24	; 0x05
    1050:	96 83       	std	Z+6, r25	; 0x06
    1052:	a7 83       	std	Z+7, r26	; 0x07
    1054:	b0 87       	std	Z+8, r27	; 0x08
	Tasks[i].TickFct = &LCD_Tick;
    1056:	2a e0       	ldi	r18, 0x0A	; 10
    1058:	36 e0       	ldi	r19, 0x06	; 6
    105a:	32 87       	std	Z+10, r19	; 0x0a
    105c:	21 87       	std	Z+9, r18	; 0x09
	i++;
	Tasks[i].state = Wait_KP;
    105e:	13 86       	std	Z+11, r1	; 0x0b
	Tasks[i].period = KPPeriod;
    1060:	4c e2       	ldi	r20, 0x2C	; 44
    1062:	51 e0       	ldi	r21, 0x01	; 1
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	44 87       	std	Z+12, r20	; 0x0c
    106a:	55 87       	std	Z+13, r21	; 0x0d
    106c:	66 87       	std	Z+14, r22	; 0x0e
    106e:	77 87       	std	Z+15, r23	; 0x0f
	Tasks[i].elapsedTime = KPPeriod;
    1070:	40 8b       	std	Z+16, r20	; 0x10
    1072:	51 8b       	std	Z+17, r21	; 0x11
    1074:	62 8b       	std	Z+18, r22	; 0x12
    1076:	73 8b       	std	Z+19, r23	; 0x13
	Tasks[i].TickFct = &KeypadTick;
    1078:	2e ec       	ldi	r18, 0xCE	; 206
    107a:	31 e0       	ldi	r19, 0x01	; 1
    107c:	35 8b       	std	Z+21, r19	; 0x15
    107e:	24 8b       	std	Z+20, r18	; 0x14
	i++;
	Tasks[i].state = WA_Wait;
    1080:	16 8a       	std	Z+22, r1	; 0x16
	Tasks[i].period = WAPeriod;
    1082:	44 e6       	ldi	r20, 0x64	; 100
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	47 8b       	std	Z+23, r20	; 0x17
    108c:	50 8f       	std	Z+24, r21	; 0x18
    108e:	61 8f       	std	Z+25, r22	; 0x19
    1090:	72 8f       	std	Z+26, r23	; 0x1a
	Tasks[i].elapsedTime = WAPeriod;
    1092:	43 8f       	std	Z+27, r20	; 0x1b
    1094:	54 8f       	std	Z+28, r21	; 0x1c
    1096:	65 8f       	std	Z+29, r22	; 0x1d
    1098:	76 8f       	std	Z+30, r23	; 0x1e
	Tasks[i].TickFct = &WA_Tick;
    109a:	2d e2       	ldi	r18, 0x2D	; 45
    109c:	35 e0       	ldi	r19, 0x05	; 5
    109e:	30 a3       	std	Z+32, r19	; 0x20
    10a0:	27 8f       	std	Z+31, r18	; 0x1f
	i++;
	Tasks[i].state = Nokia_Init;
    10a2:	11 a2       	std	Z+33, r1	; 0x21
	Tasks[i].period = NokiaPeriod;
    10a4:	82 a3       	std	Z+34, r24	; 0x22
    10a6:	93 a3       	std	Z+35, r25	; 0x23
    10a8:	a4 a3       	std	Z+36, r26	; 0x24
    10aa:	b5 a3       	std	Z+37, r27	; 0x25
	Tasks[i].elapsedTime = NokiaPeriod;
    10ac:	86 a3       	std	Z+38, r24	; 0x26
    10ae:	97 a3       	std	Z+39, r25	; 0x27
    10b0:	a0 a7       	std	Z+40, r26	; 0x28
    10b2:	b1 a7       	std	Z+41, r27	; 0x29
	Tasks[i].TickFct = &Nokia_Tick;
    10b4:	81 e9       	ldi	r24, 0x91	; 145
    10b6:	93 e0       	ldi	r25, 0x03	; 3
    10b8:	93 a7       	std	Z+43, r25	; 0x2b
    10ba:	82 a7       	std	Z+42, r24	; 0x2a
	
	//LCDBuildChar(0, customChar);
	TimerSet(period);
    10bc:	64 e6       	ldi	r22, 0x64	; 100
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a7 d8       	rcall	.-3762   	; 0x214 <TimerSet>
	TimerOn();
    10c6:	b7 d8       	rcall	.-3730   	; 0x236 <TimerOn>
	LCD_init();
    10c8:	74 d8       	rcall	.-3864   	; 0x1b2 <LCD_init>
	PWM_on();
    10ca:	2d dd       	rcall	.-1446   	; 0xb26 <PWM_on>
    10cc:	0f 2e       	mov	r0, r31
    10ce:	fa ee       	ldi	r31, 0xEA	; 234
    10d0:	ef 2e       	mov	r14, r31
    10d2:	ff e0       	ldi	r31, 0x0F	; 15
    10d4:	ff 2e       	mov	r15, r31
    10d6:	f0 2d       	mov	r31, r0
    10d8:	ce eb       	ldi	r28, 0xBE	; 190
    10da:	df e0       	ldi	r29, 0x0F	; 15
    10dc:	8e 01       	movw	r16, r28
    10de:	4d 81       	ldd	r20, Y+5	; 0x05
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 4; i++ ) {
			// Task is ready to tick
			if ( Tasks[i].elapsedTime == Tasks[i].period ) {
    10e0:	5e 81       	ldd	r21, Y+6	; 0x06
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	ab 81       	ldd	r26, Y+3	; 0x03
    10ec:	bc 81       	ldd	r27, Y+4	; 0x04
    10ee:	48 17       	cp	r20, r24
    10f0:	59 07       	cpc	r21, r25
    10f2:	6a 07       	cpc	r22, r26
    10f4:	7b 07       	cpc	r23, r27
    10f6:	61 f4       	brne	.+24     	; 0x1110 <main+0xee>
    10f8:	88 81       	ld	r24, Y
				// Setting next state for task
				Tasks[i].state = Tasks[i].TickFct(Tasks[i].state);
    10fa:	e9 85       	ldd	r30, Y+9	; 0x09
    10fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    10fe:	08 2e       	mov	r0, r24
    1100:	00 0c       	add	r0, r0
    1102:	99 0b       	sbc	r25, r25
    1104:	09 95       	icall
    1106:	88 83       	st	Y, r24
    1108:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				Tasks[i].elapsedTime = 0;
    110a:	1e 82       	std	Y+6, r1	; 0x06
    110c:	1f 82       	std	Y+7, r1	; 0x07
    110e:	18 86       	std	Y+8, r1	; 0x08
    1110:	f8 01       	movw	r30, r16
			}
			Tasks[i].elapsedTime += period;
    1112:	85 81       	ldd	r24, Z+5	; 0x05
    1114:	96 81       	ldd	r25, Z+6	; 0x06
    1116:	a7 81       	ldd	r26, Z+7	; 0x07
    1118:	b0 85       	ldd	r27, Z+8	; 0x08
    111a:	8c 59       	subi	r24, 0x9C	; 156
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	af 4f       	sbci	r26, 0xFF	; 255
    1120:	bf 4f       	sbci	r27, 0xFF	; 255
    1122:	85 83       	std	Z+5, r24	; 0x05
    1124:	96 83       	std	Z+6, r25	; 0x06
    1126:	a7 83       	std	Z+7, r26	; 0x07
    1128:	b0 87       	std	Z+8, r27	; 0x08
    112a:	2b 96       	adiw	r28, 0x0b	; 11
    112c:	ce 15       	cp	r28, r14
	
	
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 4; i++ ) {
    112e:	df 05       	cpc	r29, r15
    1130:	a9 f6       	brne	.-86     	; 0x10dc <main+0xba>
    1132:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <TimerFlag>
				Tasks[i].elapsedTime = 0;
			}
			Tasks[i].elapsedTime += period;
		}
		
		while (!TimerFlag){}
    1136:	88 23       	and	r24, r24
    1138:	e1 f3       	breq	.-8      	; 0x1132 <main+0x110>
    113a:	10 92 fa 0f 	sts	0x0FFA, r1	; 0x800ffa <TimerFlag>
		TimerFlag = 0;
    113e:	cc cf       	rjmp	.-104    	; 0x10d8 <main+0xb6>

00001140 <SPI_SS_Enable>:
		
	}
    1140:	2c 98       	cbi	0x05, 4	; 5
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
    1142:	08 95       	ret

00001144 <SPI_SS_Disable>:
    1144:	2c 9a       	sbi	0x05, 4	; 5
    1146:	08 95       	ret

00001148 <SPI_Init>:
    1148:	83 eb       	ldi	r24, 0xB3	; 179
    114a:	84 b9       	out	0x04, r24	; 4
    114c:	28 9a       	sbi	0x05, 0	; 5
    114e:	26 98       	cbi	0x04, 6	; 4
    1150:	2c 9a       	sbi	0x05, 4	; 5
    1152:	81 e5       	ldi	r24, 0x51	; 81
    1154:	8c bd       	out	0x2c, r24	; 44
    1156:	08 95       	ret

00001158 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
    1158:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
    115a:	0d b4       	in	r0, 0x2d	; 45
    115c:	07 fe       	sbrs	r0, 7
    115e:	fd cf       	rjmp	.-6      	; 0x115a <SPI_Write+0x2>
}
    1160:	08 95       	ret

00001162 <__cmpsf2>:
    1162:	9c d0       	rcall	.+312    	; 0x129c <__fp_cmp>
    1164:	08 f4       	brcc	.+2      	; 0x1168 <__cmpsf2+0x6>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	08 95       	ret

0000116a <__divsf3>:
    116a:	0c d0       	rcall	.+24     	; 0x1184 <__divsf3x>
    116c:	d2 c0       	rjmp	.+420    	; 0x1312 <__fp_round>
    116e:	ca d0       	rcall	.+404    	; 0x1304 <__fp_pscB>
    1170:	40 f0       	brcs	.+16     	; 0x1182 <__divsf3+0x18>
    1172:	c1 d0       	rcall	.+386    	; 0x12f6 <__fp_pscA>
    1174:	30 f0       	brcs	.+12     	; 0x1182 <__divsf3+0x18>
    1176:	21 f4       	brne	.+8      	; 0x1180 <__divsf3+0x16>
    1178:	5f 3f       	cpi	r21, 0xFF	; 255
    117a:	19 f0       	breq	.+6      	; 0x1182 <__divsf3+0x18>
    117c:	b3 c0       	rjmp	.+358    	; 0x12e4 <__fp_inf>
    117e:	51 11       	cpse	r21, r1
    1180:	fc c0       	rjmp	.+504    	; 0x137a <__fp_szero>
    1182:	b6 c0       	rjmp	.+364    	; 0x12f0 <__fp_nan>

00001184 <__divsf3x>:
    1184:	d7 d0       	rcall	.+430    	; 0x1334 <__fp_split3>
    1186:	98 f3       	brcs	.-26     	; 0x116e <__divsf3+0x4>

00001188 <__divsf3_pse>:
    1188:	99 23       	and	r25, r25
    118a:	c9 f3       	breq	.-14     	; 0x117e <__divsf3+0x14>
    118c:	55 23       	and	r21, r21
    118e:	b1 f3       	breq	.-20     	; 0x117c <__divsf3+0x12>
    1190:	95 1b       	sub	r25, r21
    1192:	55 0b       	sbc	r21, r21
    1194:	bb 27       	eor	r27, r27
    1196:	aa 27       	eor	r26, r26
    1198:	62 17       	cp	r22, r18
    119a:	73 07       	cpc	r23, r19
    119c:	84 07       	cpc	r24, r20
    119e:	38 f0       	brcs	.+14     	; 0x11ae <__divsf3_pse+0x26>
    11a0:	9f 5f       	subi	r25, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	44 1f       	adc	r20, r20
    11aa:	aa 1f       	adc	r26, r26
    11ac:	a9 f3       	breq	.-22     	; 0x1198 <__divsf3_pse+0x10>
    11ae:	33 d0       	rcall	.+102    	; 0x1216 <__divsf3_pse+0x8e>
    11b0:	0e 2e       	mov	r0, r30
    11b2:	3a f0       	brmi	.+14     	; 0x11c2 <__divsf3_pse+0x3a>
    11b4:	e0 e8       	ldi	r30, 0x80	; 128
    11b6:	30 d0       	rcall	.+96     	; 0x1218 <__divsf3_pse+0x90>
    11b8:	91 50       	subi	r25, 0x01	; 1
    11ba:	50 40       	sbci	r21, 0x00	; 0
    11bc:	e6 95       	lsr	r30
    11be:	00 1c       	adc	r0, r0
    11c0:	ca f7       	brpl	.-14     	; 0x11b4 <__divsf3_pse+0x2c>
    11c2:	29 d0       	rcall	.+82     	; 0x1216 <__divsf3_pse+0x8e>
    11c4:	fe 2f       	mov	r31, r30
    11c6:	27 d0       	rcall	.+78     	; 0x1216 <__divsf3_pse+0x8e>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	bb 1f       	adc	r27, r27
    11d0:	26 17       	cp	r18, r22
    11d2:	37 07       	cpc	r19, r23
    11d4:	48 07       	cpc	r20, r24
    11d6:	ab 07       	cpc	r26, r27
    11d8:	b0 e8       	ldi	r27, 0x80	; 128
    11da:	09 f0       	breq	.+2      	; 0x11de <__divsf3_pse+0x56>
    11dc:	bb 0b       	sbc	r27, r27
    11de:	80 2d       	mov	r24, r0
    11e0:	bf 01       	movw	r22, r30
    11e2:	ff 27       	eor	r31, r31
    11e4:	93 58       	subi	r25, 0x83	; 131
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	2a f0       	brmi	.+10     	; 0x11f4 <__divsf3_pse+0x6c>
    11ea:	9e 3f       	cpi	r25, 0xFE	; 254
    11ec:	51 05       	cpc	r21, r1
    11ee:	68 f0       	brcs	.+26     	; 0x120a <__divsf3_pse+0x82>
    11f0:	79 c0       	rjmp	.+242    	; 0x12e4 <__fp_inf>
    11f2:	c3 c0       	rjmp	.+390    	; 0x137a <__fp_szero>
    11f4:	5f 3f       	cpi	r21, 0xFF	; 255
    11f6:	ec f3       	brlt	.-6      	; 0x11f2 <__divsf3_pse+0x6a>
    11f8:	98 3e       	cpi	r25, 0xE8	; 232
    11fa:	dc f3       	brlt	.-10     	; 0x11f2 <__divsf3_pse+0x6a>
    11fc:	86 95       	lsr	r24
    11fe:	77 95       	ror	r23
    1200:	67 95       	ror	r22
    1202:	b7 95       	ror	r27
    1204:	f7 95       	ror	r31
    1206:	9f 5f       	subi	r25, 0xFF	; 255
    1208:	c9 f7       	brne	.-14     	; 0x11fc <__divsf3_pse+0x74>
    120a:	88 0f       	add	r24, r24
    120c:	91 1d       	adc	r25, r1
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret
    1216:	e1 e0       	ldi	r30, 0x01	; 1
    1218:	66 0f       	add	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	88 1f       	adc	r24, r24
    121e:	bb 1f       	adc	r27, r27
    1220:	62 17       	cp	r22, r18
    1222:	73 07       	cpc	r23, r19
    1224:	84 07       	cpc	r24, r20
    1226:	ba 07       	cpc	r27, r26
    1228:	20 f0       	brcs	.+8      	; 0x1232 <__divsf3_pse+0xaa>
    122a:	62 1b       	sub	r22, r18
    122c:	73 0b       	sbc	r23, r19
    122e:	84 0b       	sbc	r24, r20
    1230:	ba 0b       	sbc	r27, r26
    1232:	ee 1f       	adc	r30, r30
    1234:	88 f7       	brcc	.-30     	; 0x1218 <__divsf3_pse+0x90>
    1236:	e0 95       	com	r30
    1238:	08 95       	ret

0000123a <__fixsfsi>:
    123a:	04 d0       	rcall	.+8      	; 0x1244 <__fixunssfsi>
    123c:	68 94       	set
    123e:	b1 11       	cpse	r27, r1
    1240:	9c c0       	rjmp	.+312    	; 0x137a <__fp_szero>
    1242:	08 95       	ret

00001244 <__fixunssfsi>:
    1244:	7f d0       	rcall	.+254    	; 0x1344 <__fp_splitA>
    1246:	88 f0       	brcs	.+34     	; 0x126a <__fixunssfsi+0x26>
    1248:	9f 57       	subi	r25, 0x7F	; 127
    124a:	90 f0       	brcs	.+36     	; 0x1270 <__fixunssfsi+0x2c>
    124c:	b9 2f       	mov	r27, r25
    124e:	99 27       	eor	r25, r25
    1250:	b7 51       	subi	r27, 0x17	; 23
    1252:	a0 f0       	brcs	.+40     	; 0x127c <__fixunssfsi+0x38>
    1254:	d1 f0       	breq	.+52     	; 0x128a <__fixunssfsi+0x46>
    1256:	66 0f       	add	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	88 1f       	adc	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	1a f0       	brmi	.+6      	; 0x1266 <__fixunssfsi+0x22>
    1260:	ba 95       	dec	r27
    1262:	c9 f7       	brne	.-14     	; 0x1256 <__fixunssfsi+0x12>
    1264:	12 c0       	rjmp	.+36     	; 0x128a <__fixunssfsi+0x46>
    1266:	b1 30       	cpi	r27, 0x01	; 1
    1268:	81 f0       	breq	.+32     	; 0x128a <__fixunssfsi+0x46>
    126a:	86 d0       	rcall	.+268    	; 0x1378 <__fp_zero>
    126c:	b1 e0       	ldi	r27, 0x01	; 1
    126e:	08 95       	ret
    1270:	83 c0       	rjmp	.+262    	; 0x1378 <__fp_zero>
    1272:	67 2f       	mov	r22, r23
    1274:	78 2f       	mov	r23, r24
    1276:	88 27       	eor	r24, r24
    1278:	b8 5f       	subi	r27, 0xF8	; 248
    127a:	39 f0       	breq	.+14     	; 0x128a <__fixunssfsi+0x46>
    127c:	b9 3f       	cpi	r27, 0xF9	; 249
    127e:	cc f3       	brlt	.-14     	; 0x1272 <__fixunssfsi+0x2e>
    1280:	86 95       	lsr	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
    1286:	b3 95       	inc	r27
    1288:	d9 f7       	brne	.-10     	; 0x1280 <__fixunssfsi+0x3c>
    128a:	3e f4       	brtc	.+14     	; 0x129a <__fixunssfsi+0x56>
    128c:	90 95       	com	r25
    128e:	80 95       	com	r24
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	08 95       	ret

0000129c <__fp_cmp>:
    129c:	99 0f       	add	r25, r25
    129e:	00 08       	sbc	r0, r0
    12a0:	55 0f       	add	r21, r21
    12a2:	aa 0b       	sbc	r26, r26
    12a4:	e0 e8       	ldi	r30, 0x80	; 128
    12a6:	fe ef       	ldi	r31, 0xFE	; 254
    12a8:	16 16       	cp	r1, r22
    12aa:	17 06       	cpc	r1, r23
    12ac:	e8 07       	cpc	r30, r24
    12ae:	f9 07       	cpc	r31, r25
    12b0:	c0 f0       	brcs	.+48     	; 0x12e2 <__fp_cmp+0x46>
    12b2:	12 16       	cp	r1, r18
    12b4:	13 06       	cpc	r1, r19
    12b6:	e4 07       	cpc	r30, r20
    12b8:	f5 07       	cpc	r31, r21
    12ba:	98 f0       	brcs	.+38     	; 0x12e2 <__fp_cmp+0x46>
    12bc:	62 1b       	sub	r22, r18
    12be:	73 0b       	sbc	r23, r19
    12c0:	84 0b       	sbc	r24, r20
    12c2:	95 0b       	sbc	r25, r21
    12c4:	39 f4       	brne	.+14     	; 0x12d4 <__fp_cmp+0x38>
    12c6:	0a 26       	eor	r0, r26
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <__fp_cmp+0x46>
    12ca:	23 2b       	or	r18, r19
    12cc:	24 2b       	or	r18, r20
    12ce:	25 2b       	or	r18, r21
    12d0:	21 f4       	brne	.+8      	; 0x12da <__fp_cmp+0x3e>
    12d2:	08 95       	ret
    12d4:	0a 26       	eor	r0, r26
    12d6:	09 f4       	brne	.+2      	; 0x12da <__fp_cmp+0x3e>
    12d8:	a1 40       	sbci	r26, 0x01	; 1
    12da:	a6 95       	lsr	r26
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	81 1d       	adc	r24, r1
    12e0:	81 1d       	adc	r24, r1
    12e2:	08 95       	ret

000012e4 <__fp_inf>:
    12e4:	97 f9       	bld	r25, 7
    12e6:	9f 67       	ori	r25, 0x7F	; 127
    12e8:	80 e8       	ldi	r24, 0x80	; 128
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <__fp_nan>:
    12f0:	9f ef       	ldi	r25, 0xFF	; 255
    12f2:	80 ec       	ldi	r24, 0xC0	; 192
    12f4:	08 95       	ret

000012f6 <__fp_pscA>:
    12f6:	00 24       	eor	r0, r0
    12f8:	0a 94       	dec	r0
    12fa:	16 16       	cp	r1, r22
    12fc:	17 06       	cpc	r1, r23
    12fe:	18 06       	cpc	r1, r24
    1300:	09 06       	cpc	r0, r25
    1302:	08 95       	ret

00001304 <__fp_pscB>:
    1304:	00 24       	eor	r0, r0
    1306:	0a 94       	dec	r0
    1308:	12 16       	cp	r1, r18
    130a:	13 06       	cpc	r1, r19
    130c:	14 06       	cpc	r1, r20
    130e:	05 06       	cpc	r0, r21
    1310:	08 95       	ret

00001312 <__fp_round>:
    1312:	09 2e       	mov	r0, r25
    1314:	03 94       	inc	r0
    1316:	00 0c       	add	r0, r0
    1318:	11 f4       	brne	.+4      	; 0x131e <__fp_round+0xc>
    131a:	88 23       	and	r24, r24
    131c:	52 f0       	brmi	.+20     	; 0x1332 <__fp_round+0x20>
    131e:	bb 0f       	add	r27, r27
    1320:	40 f4       	brcc	.+16     	; 0x1332 <__fp_round+0x20>
    1322:	bf 2b       	or	r27, r31
    1324:	11 f4       	brne	.+4      	; 0x132a <__fp_round+0x18>
    1326:	60 ff       	sbrs	r22, 0
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <__fp_round+0x20>
    132a:	6f 5f       	subi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8f 4f       	sbci	r24, 0xFF	; 255
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	08 95       	ret

00001334 <__fp_split3>:
    1334:	57 fd       	sbrc	r21, 7
    1336:	90 58       	subi	r25, 0x80	; 128
    1338:	44 0f       	add	r20, r20
    133a:	55 1f       	adc	r21, r21
    133c:	59 f0       	breq	.+22     	; 0x1354 <__fp_splitA+0x10>
    133e:	5f 3f       	cpi	r21, 0xFF	; 255
    1340:	71 f0       	breq	.+28     	; 0x135e <__fp_splitA+0x1a>
    1342:	47 95       	ror	r20

00001344 <__fp_splitA>:
    1344:	88 0f       	add	r24, r24
    1346:	97 fb       	bst	r25, 7
    1348:	99 1f       	adc	r25, r25
    134a:	61 f0       	breq	.+24     	; 0x1364 <__fp_splitA+0x20>
    134c:	9f 3f       	cpi	r25, 0xFF	; 255
    134e:	79 f0       	breq	.+30     	; 0x136e <__fp_splitA+0x2a>
    1350:	87 95       	ror	r24
    1352:	08 95       	ret
    1354:	12 16       	cp	r1, r18
    1356:	13 06       	cpc	r1, r19
    1358:	14 06       	cpc	r1, r20
    135a:	55 1f       	adc	r21, r21
    135c:	f2 cf       	rjmp	.-28     	; 0x1342 <__fp_split3+0xe>
    135e:	46 95       	lsr	r20
    1360:	f1 df       	rcall	.-30     	; 0x1344 <__fp_splitA>
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <__fp_splitA+0x30>
    1364:	16 16       	cp	r1, r22
    1366:	17 06       	cpc	r1, r23
    1368:	18 06       	cpc	r1, r24
    136a:	99 1f       	adc	r25, r25
    136c:	f1 cf       	rjmp	.-30     	; 0x1350 <__fp_splitA+0xc>
    136e:	86 95       	lsr	r24
    1370:	71 05       	cpc	r23, r1
    1372:	61 05       	cpc	r22, r1
    1374:	08 94       	sec
    1376:	08 95       	ret

00001378 <__fp_zero>:
    1378:	e8 94       	clt

0000137a <__fp_szero>:
    137a:	bb 27       	eor	r27, r27
    137c:	66 27       	eor	r22, r22
    137e:	77 27       	eor	r23, r23
    1380:	cb 01       	movw	r24, r22
    1382:	97 f9       	bld	r25, 7
    1384:	08 95       	ret

00001386 <__gesf2>:
    1386:	8a df       	rcall	.-236    	; 0x129c <__fp_cmp>
    1388:	08 f4       	brcc	.+2      	; 0x138c <__gesf2+0x6>
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	08 95       	ret

0000138e <__mulsf3>:
    138e:	0b d0       	rcall	.+22     	; 0x13a6 <__mulsf3x>
    1390:	c0 cf       	rjmp	.-128    	; 0x1312 <__fp_round>
    1392:	b1 df       	rcall	.-158    	; 0x12f6 <__fp_pscA>
    1394:	28 f0       	brcs	.+10     	; 0x13a0 <__mulsf3+0x12>
    1396:	b6 df       	rcall	.-148    	; 0x1304 <__fp_pscB>
    1398:	18 f0       	brcs	.+6      	; 0x13a0 <__mulsf3+0x12>
    139a:	95 23       	and	r25, r21
    139c:	09 f0       	breq	.+2      	; 0x13a0 <__mulsf3+0x12>
    139e:	a2 cf       	rjmp	.-188    	; 0x12e4 <__fp_inf>
    13a0:	a7 cf       	rjmp	.-178    	; 0x12f0 <__fp_nan>
    13a2:	11 24       	eor	r1, r1
    13a4:	ea cf       	rjmp	.-44     	; 0x137a <__fp_szero>

000013a6 <__mulsf3x>:
    13a6:	c6 df       	rcall	.-116    	; 0x1334 <__fp_split3>
    13a8:	a0 f3       	brcs	.-24     	; 0x1392 <__mulsf3+0x4>

000013aa <__mulsf3_pse>:
    13aa:	95 9f       	mul	r25, r21
    13ac:	d1 f3       	breq	.-12     	; 0x13a2 <__mulsf3+0x14>
    13ae:	95 0f       	add	r25, r21
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	55 1f       	adc	r21, r21
    13b4:	62 9f       	mul	r22, r18
    13b6:	f0 01       	movw	r30, r0
    13b8:	72 9f       	mul	r23, r18
    13ba:	bb 27       	eor	r27, r27
    13bc:	f0 0d       	add	r31, r0
    13be:	b1 1d       	adc	r27, r1
    13c0:	63 9f       	mul	r22, r19
    13c2:	aa 27       	eor	r26, r26
    13c4:	f0 0d       	add	r31, r0
    13c6:	b1 1d       	adc	r27, r1
    13c8:	aa 1f       	adc	r26, r26
    13ca:	64 9f       	mul	r22, r20
    13cc:	66 27       	eor	r22, r22
    13ce:	b0 0d       	add	r27, r0
    13d0:	a1 1d       	adc	r26, r1
    13d2:	66 1f       	adc	r22, r22
    13d4:	82 9f       	mul	r24, r18
    13d6:	22 27       	eor	r18, r18
    13d8:	b0 0d       	add	r27, r0
    13da:	a1 1d       	adc	r26, r1
    13dc:	62 1f       	adc	r22, r18
    13de:	73 9f       	mul	r23, r19
    13e0:	b0 0d       	add	r27, r0
    13e2:	a1 1d       	adc	r26, r1
    13e4:	62 1f       	adc	r22, r18
    13e6:	83 9f       	mul	r24, r19
    13e8:	a0 0d       	add	r26, r0
    13ea:	61 1d       	adc	r22, r1
    13ec:	22 1f       	adc	r18, r18
    13ee:	74 9f       	mul	r23, r20
    13f0:	33 27       	eor	r19, r19
    13f2:	a0 0d       	add	r26, r0
    13f4:	61 1d       	adc	r22, r1
    13f6:	23 1f       	adc	r18, r19
    13f8:	84 9f       	mul	r24, r20
    13fa:	60 0d       	add	r22, r0
    13fc:	21 1d       	adc	r18, r1
    13fe:	82 2f       	mov	r24, r18
    1400:	76 2f       	mov	r23, r22
    1402:	6a 2f       	mov	r22, r26
    1404:	11 24       	eor	r1, r1
    1406:	9f 57       	subi	r25, 0x7F	; 127
    1408:	50 40       	sbci	r21, 0x00	; 0
    140a:	8a f0       	brmi	.+34     	; 0x142e <__mulsf3_pse+0x84>
    140c:	e1 f0       	breq	.+56     	; 0x1446 <__mulsf3_pse+0x9c>
    140e:	88 23       	and	r24, r24
    1410:	4a f0       	brmi	.+18     	; 0x1424 <__mulsf3_pse+0x7a>
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	bb 1f       	adc	r27, r27
    1418:	66 1f       	adc	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	91 50       	subi	r25, 0x01	; 1
    1420:	50 40       	sbci	r21, 0x00	; 0
    1422:	a9 f7       	brne	.-22     	; 0x140e <__mulsf3_pse+0x64>
    1424:	9e 3f       	cpi	r25, 0xFE	; 254
    1426:	51 05       	cpc	r21, r1
    1428:	70 f0       	brcs	.+28     	; 0x1446 <__mulsf3_pse+0x9c>
    142a:	5c cf       	rjmp	.-328    	; 0x12e4 <__fp_inf>
    142c:	a6 cf       	rjmp	.-180    	; 0x137a <__fp_szero>
    142e:	5f 3f       	cpi	r21, 0xFF	; 255
    1430:	ec f3       	brlt	.-6      	; 0x142c <__mulsf3_pse+0x82>
    1432:	98 3e       	cpi	r25, 0xE8	; 232
    1434:	dc f3       	brlt	.-10     	; 0x142c <__mulsf3_pse+0x82>
    1436:	86 95       	lsr	r24
    1438:	77 95       	ror	r23
    143a:	67 95       	ror	r22
    143c:	b7 95       	ror	r27
    143e:	f7 95       	ror	r31
    1440:	e7 95       	ror	r30
    1442:	9f 5f       	subi	r25, 0xFF	; 255
    1444:	c1 f7       	brne	.-16     	; 0x1436 <__mulsf3_pse+0x8c>
    1446:	fe 2b       	or	r31, r30
    1448:	88 0f       	add	r24, r24
    144a:	91 1d       	adc	r25, r1
    144c:	96 95       	lsr	r25
    144e:	87 95       	ror	r24
    1450:	97 f9       	bld	r25, 7
    1452:	08 95       	ret

00001454 <__divmodhi4>:
    1454:	97 fb       	bst	r25, 7
    1456:	07 2e       	mov	r0, r23
    1458:	16 f4       	brtc	.+4      	; 0x145e <__divmodhi4+0xa>
    145a:	00 94       	com	r0
    145c:	06 d0       	rcall	.+12     	; 0x146a <__divmodhi4_neg1>
    145e:	77 fd       	sbrc	r23, 7
    1460:	08 d0       	rcall	.+16     	; 0x1472 <__divmodhi4_neg2>
    1462:	14 d0       	rcall	.+40     	; 0x148c <__udivmodhi4>
    1464:	07 fc       	sbrc	r0, 7
    1466:	05 d0       	rcall	.+10     	; 0x1472 <__divmodhi4_neg2>
    1468:	3e f4       	brtc	.+14     	; 0x1478 <__divmodhi4_exit>

0000146a <__divmodhi4_neg1>:
    146a:	90 95       	com	r25
    146c:	81 95       	neg	r24
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	08 95       	ret

00001472 <__divmodhi4_neg2>:
    1472:	70 95       	com	r23
    1474:	61 95       	neg	r22
    1476:	7f 4f       	sbci	r23, 0xFF	; 255

00001478 <__divmodhi4_exit>:
    1478:	08 95       	ret

0000147a <__tablejump2__>:
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	00 24       	eor	r0, r0
    1480:	00 1c       	adc	r0, r0
    1482:	0b be       	out	0x3b, r0	; 59
    1484:	07 90       	elpm	r0, Z+
    1486:	f6 91       	elpm	r31, Z
    1488:	e0 2d       	mov	r30, r0
    148a:	09 94       	ijmp

0000148c <__udivmodhi4>:
    148c:	aa 1b       	sub	r26, r26
    148e:	bb 1b       	sub	r27, r27
    1490:	51 e1       	ldi	r21, 0x11	; 17
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <__udivmodhi4_ep>

00001494 <__udivmodhi4_loop>:
    1494:	aa 1f       	adc	r26, r26
    1496:	bb 1f       	adc	r27, r27
    1498:	a6 17       	cp	r26, r22
    149a:	b7 07       	cpc	r27, r23
    149c:	10 f0       	brcs	.+4      	; 0x14a2 <__udivmodhi4_ep>
    149e:	a6 1b       	sub	r26, r22
    14a0:	b7 0b       	sbc	r27, r23

000014a2 <__udivmodhi4_ep>:
    14a2:	88 1f       	adc	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	5a 95       	dec	r21
    14a8:	a9 f7       	brne	.-22     	; 0x1494 <__udivmodhi4_loop>
    14aa:	80 95       	com	r24
    14ac:	90 95       	com	r25
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	08 95       	ret

000014b4 <_exit>:
    14b4:	f8 94       	cli

000014b6 <__stop_program>:
    14b6:	ff cf       	rjmp	.-2      	; 0x14b6 <__stop_program>
