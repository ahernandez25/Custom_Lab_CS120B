
Hangman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000e88  00000f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800182  00800182  00000f9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a8  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6f  00000000  00000000  00002b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f9b  00000000  00000000  0000367f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  0000461c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000853  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be4  00000000  00000000  000051bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005da3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>
   2:	00 00       	nop
   4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
   6:	00 00       	nop
   8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
   a:	00 00       	nop
   c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
   e:	00 00       	nop
  10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
  12:	00 00       	nop
  14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
  16:	00 00       	nop
  18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
  1e:	00 00       	nop
  20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
  22:	00 00       	nop
  24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
  26:	00 00       	nop
  28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
  2e:	00 00       	nop
  30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
  32:	00 00       	nop
  34:	10 c1       	rjmp	.+544    	; 0x256 <__vector_13>
  36:	00 00       	nop
  38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
  3e:	00 00       	nop
  40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
  42:	00 00       	nop
  44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
  46:	00 00       	nop
  48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
  4e:	00 00       	nop
  50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
  52:	00 00       	nop
  54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
  56:	00 00       	nop
  58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
  5e:	00 00       	nop
  60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
  62:	00 00       	nop
  64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
  66:	00 00       	nop
  68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
  6e:	00 00       	nop
  70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
  72:	00 00       	nop
  74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
  76:	00 00       	nop
  78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
  7e:	00 00       	nop
  80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
  82:	00 00       	nop
  84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
  86:	00 00       	nop
  88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e5 01       	movw	r28, r10
  8e:	0e 03       	fmul	r16, r22
  90:	0e 03       	fmul	r16, r22
  92:	0e 03       	fmul	r16, r22
  94:	0e 03       	fmul	r16, r22
  96:	0e 03       	fmul	r16, r22
  98:	0e 03       	fmul	r16, r22
  9a:	0e 03       	fmul	r16, r22
  9c:	0e 03       	fmul	r16, r22
  9e:	0e 03       	fmul	r16, r22
  a0:	0e 03       	fmul	r16, r22
  a2:	0e 03       	fmul	r16, r22
  a4:	0e 03       	fmul	r16, r22
  a6:	0e 03       	fmul	r16, r22
  a8:	0e 03       	fmul	r16, r22
  aa:	0e 03       	fmul	r16, r22
  ac:	0e 03       	fmul	r16, r22
  ae:	0e 03       	fmul	r16, r22
  b0:	0e 03       	fmul	r16, r22
  b2:	0e 03       	fmul	r16, r22
  b4:	0e 03       	fmul	r16, r22
  b6:	0e 03       	fmul	r16, r22
  b8:	0e 03       	fmul	r16, r22
  ba:	0e 03       	fmul	r16, r22
  bc:	0e 03       	fmul	r16, r22
  be:	0e 03       	fmul	r16, r22
  c0:	0e 03       	fmul	r16, r22
  c2:	0e 03       	fmul	r16, r22
  c4:	0e 03       	fmul	r16, r22
  c6:	0e 03       	fmul	r16, r22
  c8:	0e 03       	fmul	r16, r22
  ca:	0e 03       	fmul	r16, r22
  cc:	0e 03       	fmul	r16, r22
  ce:	0e 03       	fmul	r16, r22
  d0:	0e 03       	fmul	r16, r22
  d2:	0e 03       	fmul	r16, r22
  d4:	0e 03       	fmul	r16, r22
  d6:	0e 03       	fmul	r16, r22
  d8:	0e 03       	fmul	r16, r22
  da:	0e 03       	fmul	r16, r22
  dc:	0e 03       	fmul	r16, r22
  de:	0e 03       	fmul	r16, r22
  e0:	0e 03       	fmul	r16, r22
  e2:	0e 03       	fmul	r16, r22
  e4:	0e 03       	fmul	r16, r22
  e6:	0e 03       	fmul	r16, r22
  e8:	0e 03       	fmul	r16, r22
  ea:	0e 03       	fmul	r16, r22
  ec:	0e 03       	fmul	r16, r22
  ee:	eb 01       	movw	r28, r22
  f0:	f1 01       	movw	r30, r2
  f2:	14 02       	muls	r17, r20
  f4:	37 02       	muls	r19, r23
  f6:	5a 02       	muls	r21, r26
  f8:	7d 02       	muls	r23, r29
  fa:	a0 02       	muls	r26, r16
  fc:	c3 02       	muls	r28, r19
  fe:	e7 02       	muls	r30, r23

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf ef       	ldi	r28, 0xFF	; 255
 106:	d0 e4       	ldi	r29, 0x40	; 64
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
 10c:	11 e0       	ldi	r17, 0x01	; 1
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	e8 e8       	ldi	r30, 0x88	; 136
 114:	fe e0       	ldi	r31, 0x0E	; 14
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	0b bf       	out	0x3b, r16	; 59
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x14>
 11c:	07 90       	elpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a2 38       	cpi	r26, 0x82	; 130
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x10>

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	a2 e8       	ldi	r26, 0x82	; 130
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	a7 3b       	cpi	r26, 0xB7	; 183
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	91 d4       	rcall	.+2338   	; 0xa5a <main>
 138:	a5 c6       	rjmp	.+3402   	; 0xe84 <_exit>

0000013a <__bad_interrupt>:
 13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <delay_ms>:
	set_PWM(0);
}

void PWM_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
 13c:	18 16       	cp	r1, r24
 13e:	19 06       	cpc	r1, r25
 140:	5c f0       	brlt	.+22     	; 0x158 <delay_ms+0x1c>
 142:	08 95       	ret
 144:	00 00       	nop
 146:	21 50       	subi	r18, 0x01	; 1
 148:	31 09       	sbc	r19, r1
 14a:	e1 f7       	brne	.-8      	; 0x144 <delay_ms+0x8>
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	84 17       	cp	r24, r20
 152:	95 07       	cpc	r25, r21
 154:	19 f4       	brne	.+6      	; 0x15c <delay_ms+0x20>
 156:	08 95       	ret
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	27 e0       	ldi	r18, 0x07	; 7
 15e:	33 e0       	ldi	r19, 0x03	; 3
 160:	f1 cf       	rjmp	.-30     	; 0x144 <delay_ms+0x8>

00000162 <LCD_WriteCommand>:
 162:	10 98       	cbi	0x02, 0	; 2
 164:	8b b9       	out	0x0b, r24	; 11
 166:	11 9a       	sbi	0x02, 1	; 2
 168:	00 00       	nop
 16a:	11 98       	cbi	0x02, 1	; 2
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	e5 cf       	rjmp	.-54     	; 0x13c <delay_ms>
 172:	08 95       	ret

00000174 <LCD_ClearScreen>:
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	f5 cf       	rjmp	.-22     	; 0x162 <LCD_WriteCommand>
 178:	08 95       	ret

0000017a <LCD_Cursor>:
 17a:	81 31       	cpi	r24, 0x11	; 17
 17c:	18 f4       	brcc	.+6      	; 0x184 <LCD_Cursor+0xa>
 17e:	81 58       	subi	r24, 0x81	; 129
 180:	f0 cf       	rjmp	.-32     	; 0x162 <LCD_WriteCommand>
 182:	08 95       	ret
 184:	81 55       	subi	r24, 0x51	; 81
 186:	ed cf       	rjmp	.-38     	; 0x162 <LCD_WriteCommand>
 188:	08 95       	ret

0000018a <LCD_init>:
 18a:	84 e6       	ldi	r24, 0x64	; 100
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	d6 df       	rcall	.-84     	; 0x13c <delay_ms>
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	e7 df       	rcall	.-50     	; 0x162 <LCD_WriteCommand>
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	e5 df       	rcall	.-54     	; 0x162 <LCD_WriteCommand>
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	e3 df       	rcall	.-58     	; 0x162 <LCD_WriteCommand>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	e1 df       	rcall	.-62     	; 0x162 <LCD_WriteCommand>
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	cb cf       	rjmp	.-106    	; 0x13c <delay_ms>
 1a6:	08 95       	ret

000001a8 <LCD_WriteData>:
 1a8:	10 9a       	sbi	0x02, 0	; 2
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	11 9a       	sbi	0x02, 1	; 2
 1ae:	00 00       	nop
 1b0:	11 98       	cbi	0x02, 1	; 2
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	c2 cf       	rjmp	.-124    	; 0x13c <delay_ms>
 1b8:	08 95       	ret

000001ba <LCD_DisplayString>:
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	18 2f       	mov	r17, r24
 1c4:	eb 01       	movw	r28, r22
 1c6:	d6 df       	rcall	.-84     	; 0x174 <LCD_ClearScreen>
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	51 f0       	breq	.+20     	; 0x1e2 <LCD_DisplayString+0x28>
 1ce:	01 e0       	ldi	r16, 0x01	; 1
 1d0:	01 0f       	add	r16, r17
 1d2:	81 2f       	mov	r24, r17
 1d4:	d2 df       	rcall	.-92     	; 0x17a <LCD_Cursor>
 1d6:	89 91       	ld	r24, Y+
 1d8:	e7 df       	rcall	.-50     	; 0x1a8 <LCD_WriteData>
 1da:	10 2f       	mov	r17, r16
 1dc:	88 81       	ld	r24, Y
 1de:	81 11       	cpse	r24, r1
 1e0:	f6 cf       	rjmp	.-20     	; 0x1ce <LCD_DisplayString+0x14>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <TimerSet>:
 1ec:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <_avr_timer_M>
 1f0:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <_avr_timer_M+0x1>
 1f4:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <_avr_timer_M+0x2>
 1f8:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <_avr_timer_M+0x3>
 1fc:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <_avr_timer_cntcurr>
 200:	70 93 ae 01 	sts	0x01AE, r23	; 0x8001ae <_avr_timer_cntcurr+0x1>
 204:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_avr_timer_cntcurr+0x2>
 208:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <_avr_timer_cntcurr+0x3>
 20c:	08 95       	ret

0000020e <TimerOn>:
 20e:	8b e0       	ldi	r24, 0x0B	; 11
 210:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 214:	8d e7       	ldi	r24, 0x7D	; 125
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 21c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 226:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 22a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 22e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <_avr_timer_M>
 232:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <_avr_timer_M+0x1>
 236:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <_avr_timer_M+0x2>
 23a:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <_avr_timer_M+0x3>
 23e:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_avr_timer_cntcurr>
 242:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <_avr_timer_cntcurr+0x1>
 246:	a0 93 af 01 	sts	0x01AF, r26	; 0x8001af <_avr_timer_cntcurr+0x2>
 24a:	b0 93 b0 01 	sts	0x01B0, r27	; 0x8001b0 <_avr_timer_cntcurr+0x3>
 24e:	8f b7       	in	r24, 0x3f	; 63
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8f bf       	out	0x3f, r24	; 63
 254:	08 95       	ret

00000256 <__vector_13>:
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_avr_timer_cntcurr>
 26c:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_avr_timer_cntcurr+0x1>
 270:	a0 91 af 01 	lds	r26, 0x01AF	; 0x8001af <_avr_timer_cntcurr+0x2>
 274:	b0 91 b0 01 	lds	r27, 0x01B0	; 0x8001b0 <_avr_timer_cntcurr+0x3>
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	a1 09       	sbc	r26, r1
 27c:	b1 09       	sbc	r27, r1
 27e:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_avr_timer_cntcurr>
 282:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <_avr_timer_cntcurr+0x1>
 286:	a0 93 af 01 	sts	0x01AF, r26	; 0x8001af <_avr_timer_cntcurr+0x2>
 28a:	b0 93 b0 01 	sts	0x01B0, r27	; 0x8001b0 <_avr_timer_cntcurr+0x3>
 28e:	89 2b       	or	r24, r25
 290:	8a 2b       	or	r24, r26
 292:	8b 2b       	or	r24, r27
 294:	99 f4       	brne	.+38     	; 0x2bc <__vector_13+0x66>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TimerFlag>
 29c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <_avr_timer_M>
 2a0:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <_avr_timer_M+0x1>
 2a4:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <_avr_timer_M+0x2>
 2a8:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <_avr_timer_M+0x3>
 2ac:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_avr_timer_cntcurr>
 2b0:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <_avr_timer_cntcurr+0x1>
 2b4:	a0 93 af 01 	sts	0x01AF, r26	; 0x8001af <_avr_timer_cntcurr+0x2>
 2b8:	b0 93 b0 01 	sts	0x01B0, r27	; 0x8001b0 <_avr_timer_cntcurr+0x3>
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <GetKeypadKey>:
 2ce:	8f ee       	ldi	r24, 0xEF	; 239
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	00 00       	nop
 2d4:	30 9b       	sbis	0x06, 0	; 6
 2d6:	2e c0       	rjmp	.+92     	; 0x334 <GetKeypadKey+0x66>
 2d8:	31 9b       	sbis	0x06, 1	; 6
 2da:	2e c0       	rjmp	.+92     	; 0x338 <GetKeypadKey+0x6a>
 2dc:	32 9b       	sbis	0x06, 2	; 6
 2de:	2e c0       	rjmp	.+92     	; 0x33c <GetKeypadKey+0x6e>
 2e0:	33 9b       	sbis	0x06, 3	; 6
 2e2:	2e c0       	rjmp	.+92     	; 0x340 <GetKeypadKey+0x72>
 2e4:	8f ed       	ldi	r24, 0xDF	; 223
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	00 00       	nop
 2ea:	30 9b       	sbis	0x06, 0	; 6
 2ec:	2b c0       	rjmp	.+86     	; 0x344 <GetKeypadKey+0x76>
 2ee:	31 9b       	sbis	0x06, 1	; 6
 2f0:	2b c0       	rjmp	.+86     	; 0x348 <GetKeypadKey+0x7a>
 2f2:	32 9b       	sbis	0x06, 2	; 6
 2f4:	2b c0       	rjmp	.+86     	; 0x34c <GetKeypadKey+0x7e>
 2f6:	33 9b       	sbis	0x06, 3	; 6
 2f8:	2b c0       	rjmp	.+86     	; 0x350 <GetKeypadKey+0x82>
 2fa:	8f eb       	ldi	r24, 0xBF	; 191
 2fc:	88 b9       	out	0x08, r24	; 8
 2fe:	00 00       	nop
 300:	30 9b       	sbis	0x06, 0	; 6
 302:	28 c0       	rjmp	.+80     	; 0x354 <GetKeypadKey+0x86>
 304:	31 9b       	sbis	0x06, 1	; 6
 306:	28 c0       	rjmp	.+80     	; 0x358 <GetKeypadKey+0x8a>
 308:	32 9b       	sbis	0x06, 2	; 6
 30a:	28 c0       	rjmp	.+80     	; 0x35c <GetKeypadKey+0x8e>
 30c:	33 9b       	sbis	0x06, 3	; 6
 30e:	28 c0       	rjmp	.+80     	; 0x360 <GetKeypadKey+0x92>
 310:	8f e7       	ldi	r24, 0x7F	; 127
 312:	88 b9       	out	0x08, r24	; 8
 314:	00 00       	nop
 316:	30 9b       	sbis	0x06, 0	; 6
 318:	25 c0       	rjmp	.+74     	; 0x364 <GetKeypadKey+0x96>
 31a:	31 9b       	sbis	0x06, 1	; 6
 31c:	25 c0       	rjmp	.+74     	; 0x368 <GetKeypadKey+0x9a>
 31e:	32 9b       	sbis	0x06, 2	; 6
 320:	25 c0       	rjmp	.+74     	; 0x36c <GetKeypadKey+0x9e>
 322:	33 9b       	sbis	0x06, 3	; 6
 324:	25 c0       	rjmp	.+74     	; 0x370 <GetKeypadKey+0xa2>
 326:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <click>
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <click>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
 334:	81 e3       	ldi	r24, 0x31	; 49
 336:	08 95       	ret
 338:	84 e3       	ldi	r24, 0x34	; 52
 33a:	08 95       	ret
 33c:	87 e3       	ldi	r24, 0x37	; 55
 33e:	08 95       	ret
 340:	8a e2       	ldi	r24, 0x2A	; 42
 342:	08 95       	ret
 344:	82 e3       	ldi	r24, 0x32	; 50
 346:	08 95       	ret
 348:	85 e3       	ldi	r24, 0x35	; 53
 34a:	08 95       	ret
 34c:	88 e3       	ldi	r24, 0x38	; 56
 34e:	08 95       	ret
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	08 95       	ret
 354:	83 e3       	ldi	r24, 0x33	; 51
 356:	08 95       	ret
 358:	86 e3       	ldi	r24, 0x36	; 54
 35a:	08 95       	ret
 35c:	89 e3       	ldi	r24, 0x39	; 57
 35e:	08 95       	ret
 360:	83 e2       	ldi	r24, 0x23	; 35
 362:	08 95       	ret
 364:	81 e4       	ldi	r24, 0x41	; 65
 366:	08 95       	ret
 368:	82 e4       	ldi	r24, 0x42	; 66
 36a:	08 95       	ret
 36c:	83 e4       	ldi	r24, 0x43	; 67
 36e:	08 95       	ret
 370:	84 e4       	ldi	r24, 0x44	; 68
 372:	08 95       	ret

00000374 <KeypadTick>:
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	91 05       	cpc	r25, r1
 37e:	c9 f0       	breq	.+50     	; 0x3b2 <KeypadTick+0x3e>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	91 05       	cpc	r25, r1
 384:	31 f0       	breq	.+12     	; 0x392 <KeypadTick+0x1e>
 386:	89 2b       	or	r24, r25
 388:	21 f0       	breq	.+8      	; 0x392 <KeypadTick+0x1e>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <State>
 390:	02 c0       	rjmp	.+4      	; 0x396 <KeypadTick+0x22>
 392:	c1 e0       	ldi	r28, 0x01	; 1
 394:	d0 e0       	ldi	r29, 0x00	; 0
 396:	c1 30       	cpi	r28, 0x01	; 1
 398:	d1 05       	cpc	r29, r1
 39a:	39 f0       	breq	.+14     	; 0x3aa <KeypadTick+0x36>
 39c:	c2 30       	cpi	r28, 0x02	; 2
 39e:	d1 05       	cpc	r29, r1
 3a0:	41 f0       	breq	.+16     	; 0x3b2 <KeypadTick+0x3e>
 3a2:	20 97       	sbiw	r28, 0x00	; 0
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <KeypadTick+0x34>
 3a6:	54 c1       	rjmp	.+680    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3a8:	35 c1       	rjmp	.+618    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 3aa:	91 df       	rcall	.-222    	; 0x2ce <GetKeypadKey>
 3ac:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <x>
 3b0:	4f c1       	rjmp	.+670    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3b2:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <x>
 3b6:	8e 2f       	mov	r24, r30
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	8a 33       	cpi	r24, 0x3A	; 58
 3bc:	91 05       	cpc	r25, r1
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <KeypadTick+0x4e>
 3c0:	2d c1       	rjmp	.+602    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 3c2:	fc 01       	movw	r30, r24
 3c4:	ea 5b       	subi	r30, 0xBA	; 186
 3c6:	ff 4f       	sbci	r31, 0xFF	; 255
 3c8:	54 c5       	rjmp	.+2728   	; 0xe72 <__tablejump2__>
 3ca:	80 e2       	ldi	r24, 0x20	; 32
 3cc:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 3d0:	c2 e0       	ldi	r28, 0x02	; 2
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	3d c1       	rjmp	.+634    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3d6:	80 e2       	ldi	r24, 0x20	; 32
 3d8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 3dc:	c2 e0       	ldi	r28, 0x02	; 2
 3de:	d0 e0       	ldi	r29, 0x00	; 0
 3e0:	37 c1       	rjmp	.+622    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 3e2:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <click>
 3e6:	8b ea       	ldi	r24, 0xAB	; 171
 3e8:	98 9f       	mul	r25, r24
 3ea:	81 2d       	mov	r24, r1
 3ec:	11 24       	eor	r1, r1
 3ee:	86 95       	lsr	r24
 3f0:	28 2f       	mov	r18, r24
 3f2:	22 0f       	add	r18, r18
 3f4:	82 0f       	add	r24, r18
 3f6:	98 1b       	sub	r25, r24
 3f8:	91 30       	cpi	r25, 0x01	; 1
 3fa:	31 f4       	brne	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	81 e4       	ldi	r24, 0x41	; 65
 3fe:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 402:	c2 e0       	ldi	r28, 0x02	; 2
 404:	d0 e0       	ldi	r29, 0x00	; 0
 406:	24 c1       	rjmp	.+584    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 408:	92 30       	cpi	r25, 0x02	; 2
 40a:	31 f4       	brne	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40c:	82 e4       	ldi	r24, 0x42	; 66
 40e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 412:	c2 e0       	ldi	r28, 0x02	; 2
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	1c c1       	rjmp	.+568    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 418:	91 11       	cpse	r25, r1
 41a:	03 c1       	rjmp	.+518    	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 41c:	83 e4       	ldi	r24, 0x43	; 67
 41e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 422:	c2 e0       	ldi	r28, 0x02	; 2
 424:	d0 e0       	ldi	r29, 0x00	; 0
 426:	14 c1       	rjmp	.+552    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 428:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <click>
 42c:	8b ea       	ldi	r24, 0xAB	; 171
 42e:	98 9f       	mul	r25, r24
 430:	81 2d       	mov	r24, r1
 432:	11 24       	eor	r1, r1
 434:	86 95       	lsr	r24
 436:	28 2f       	mov	r18, r24
 438:	22 0f       	add	r18, r18
 43a:	82 0f       	add	r24, r18
 43c:	98 1b       	sub	r25, r24
 43e:	91 30       	cpi	r25, 0x01	; 1
 440:	31 f4       	brne	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 442:	84 e4       	ldi	r24, 0x44	; 68
 444:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 448:	c2 e0       	ldi	r28, 0x02	; 2
 44a:	d0 e0       	ldi	r29, 0x00	; 0
 44c:	01 c1       	rjmp	.+514    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 44e:	92 30       	cpi	r25, 0x02	; 2
 450:	31 f4       	brne	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 452:	85 e4       	ldi	r24, 0x45	; 69
 454:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 458:	c2 e0       	ldi	r28, 0x02	; 2
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	f9 c0       	rjmp	.+498    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 45e:	91 11       	cpse	r25, r1
 460:	e3 c0       	rjmp	.+454    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 462:	86 e4       	ldi	r24, 0x46	; 70
 464:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 468:	c2 e0       	ldi	r28, 0x02	; 2
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	f1 c0       	rjmp	.+482    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 46e:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <click>
 472:	8b ea       	ldi	r24, 0xAB	; 171
 474:	98 9f       	mul	r25, r24
 476:	81 2d       	mov	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	86 95       	lsr	r24
 47c:	28 2f       	mov	r18, r24
 47e:	22 0f       	add	r18, r18
 480:	82 0f       	add	r24, r18
 482:	98 1b       	sub	r25, r24
 484:	91 30       	cpi	r25, 0x01	; 1
 486:	31 f4       	brne	.+12     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 488:	87 e4       	ldi	r24, 0x47	; 71
 48a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 48e:	c2 e0       	ldi	r28, 0x02	; 2
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	de c0       	rjmp	.+444    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 494:	92 30       	cpi	r25, 0x02	; 2
 496:	31 f4       	brne	.+12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 498:	88 e4       	ldi	r24, 0x48	; 72
 49a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 49e:	c2 e0       	ldi	r28, 0x02	; 2
 4a0:	d0 e0       	ldi	r29, 0x00	; 0
 4a2:	d6 c0       	rjmp	.+428    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4a4:	91 11       	cpse	r25, r1
 4a6:	c3 c0       	rjmp	.+390    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 4a8:	89 e4       	ldi	r24, 0x49	; 73
 4aa:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 4ae:	c2 e0       	ldi	r28, 0x02	; 2
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
 4b2:	ce c0       	rjmp	.+412    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4b4:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <click>
 4b8:	8b ea       	ldi	r24, 0xAB	; 171
 4ba:	98 9f       	mul	r25, r24
 4bc:	81 2d       	mov	r24, r1
 4be:	11 24       	eor	r1, r1
 4c0:	86 95       	lsr	r24
 4c2:	28 2f       	mov	r18, r24
 4c4:	22 0f       	add	r18, r18
 4c6:	82 0f       	add	r24, r18
 4c8:	98 1b       	sub	r25, r24
 4ca:	91 30       	cpi	r25, 0x01	; 1
 4cc:	31 f4       	brne	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ce:	8a e4       	ldi	r24, 0x4A	; 74
 4d0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 4d4:	c2 e0       	ldi	r28, 0x02	; 2
 4d6:	d0 e0       	ldi	r29, 0x00	; 0
 4d8:	bb c0       	rjmp	.+374    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4da:	92 30       	cpi	r25, 0x02	; 2
 4dc:	31 f4       	brne	.+12     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4de:	8b e4       	ldi	r24, 0x4B	; 75
 4e0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 4e4:	c2 e0       	ldi	r28, 0x02	; 2
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	b3 c0       	rjmp	.+358    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4ea:	91 11       	cpse	r25, r1
 4ec:	a3 c0       	rjmp	.+326    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 4ee:	8c e4       	ldi	r24, 0x4C	; 76
 4f0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 4f4:	c2 e0       	ldi	r28, 0x02	; 2
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
 4f8:	ab c0       	rjmp	.+342    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4fa:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <click>
 4fe:	8b ea       	ldi	r24, 0xAB	; 171
 500:	98 9f       	mul	r25, r24
 502:	81 2d       	mov	r24, r1
 504:	11 24       	eor	r1, r1
 506:	86 95       	lsr	r24
 508:	28 2f       	mov	r18, r24
 50a:	22 0f       	add	r18, r18
 50c:	82 0f       	add	r24, r18
 50e:	98 1b       	sub	r25, r24
 510:	91 30       	cpi	r25, 0x01	; 1
 512:	31 f4       	brne	.+12     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 514:	8d e4       	ldi	r24, 0x4D	; 77
 516:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 51a:	c2 e0       	ldi	r28, 0x02	; 2
 51c:	d0 e0       	ldi	r29, 0x00	; 0
 51e:	98 c0       	rjmp	.+304    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 520:	92 30       	cpi	r25, 0x02	; 2
 522:	31 f4       	brne	.+12     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 524:	8e e4       	ldi	r24, 0x4E	; 78
 526:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 52a:	c2 e0       	ldi	r28, 0x02	; 2
 52c:	d0 e0       	ldi	r29, 0x00	; 0
 52e:	90 c0       	rjmp	.+288    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 530:	91 11       	cpse	r25, r1
 532:	83 c0       	rjmp	.+262    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 534:	8f e4       	ldi	r24, 0x4F	; 79
 536:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 53a:	c2 e0       	ldi	r28, 0x02	; 2
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	88 c0       	rjmp	.+272    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 540:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <click>
 544:	83 70       	andi	r24, 0x03	; 3
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	31 f4       	brne	.+12     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 54a:	80 e5       	ldi	r24, 0x50	; 80
 54c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 550:	c2 e0       	ldi	r28, 0x02	; 2
 552:	d0 e0       	ldi	r29, 0x00	; 0
 554:	7d c0       	rjmp	.+250    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	31 f4       	brne	.+12     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 55a:	81 e5       	ldi	r24, 0x51	; 81
 55c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 560:	c2 e0       	ldi	r28, 0x02	; 2
 562:	d0 e0       	ldi	r29, 0x00	; 0
 564:	75 c0       	rjmp	.+234    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 566:	83 30       	cpi	r24, 0x03	; 3
 568:	31 f4       	brne	.+12     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 56a:	82 e5       	ldi	r24, 0x52	; 82
 56c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 570:	c2 e0       	ldi	r28, 0x02	; 2
 572:	d0 e0       	ldi	r29, 0x00	; 0
 574:	6d c0       	rjmp	.+218    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 576:	81 11       	cpse	r24, r1
 578:	63 c0       	rjmp	.+198    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 57a:	83 e5       	ldi	r24, 0x53	; 83
 57c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 580:	c2 e0       	ldi	r28, 0x02	; 2
 582:	d0 e0       	ldi	r29, 0x00	; 0
 584:	65 c0       	rjmp	.+202    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 586:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <click>
 58a:	8b ea       	ldi	r24, 0xAB	; 171
 58c:	98 9f       	mul	r25, r24
 58e:	81 2d       	mov	r24, r1
 590:	11 24       	eor	r1, r1
 592:	86 95       	lsr	r24
 594:	28 2f       	mov	r18, r24
 596:	22 0f       	add	r18, r18
 598:	82 0f       	add	r24, r18
 59a:	98 1b       	sub	r25, r24
 59c:	91 30       	cpi	r25, 0x01	; 1
 59e:	31 f4       	brne	.+12     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a0:	84 e5       	ldi	r24, 0x54	; 84
 5a2:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 5a6:	c2 e0       	ldi	r28, 0x02	; 2
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
 5aa:	52 c0       	rjmp	.+164    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5ac:	92 30       	cpi	r25, 0x02	; 2
 5ae:	31 f4       	brne	.+12     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5b0:	85 e5       	ldi	r24, 0x55	; 85
 5b2:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 5b6:	c2 e0       	ldi	r28, 0x02	; 2
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	4a c0       	rjmp	.+148    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5bc:	93 30       	cpi	r25, 0x03	; 3
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c0:	42 c0       	rjmp	.+132    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 5c2:	86 e5       	ldi	r24, 0x56	; 86
 5c4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 5c8:	c2 e0       	ldi	r28, 0x02	; 2
 5ca:	d0 e0       	ldi	r29, 0x00	; 0
 5cc:	41 c0       	rjmp	.+130    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5ce:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <click>
 5d2:	83 70       	andi	r24, 0x03	; 3
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	31 f4       	brne	.+12     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5d8:	87 e5       	ldi	r24, 0x57	; 87
 5da:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 5de:	c2 e0       	ldi	r28, 0x02	; 2
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	36 c0       	rjmp	.+108    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5e4:	82 30       	cpi	r24, 0x02	; 2
 5e6:	31 f4       	brne	.+12     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5e8:	88 e5       	ldi	r24, 0x58	; 88
 5ea:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 5ee:	c2 e0       	ldi	r28, 0x02	; 2
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
 5f2:	2e c0       	rjmp	.+92     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5f4:	83 30       	cpi	r24, 0x03	; 3
 5f6:	31 f4       	brne	.+12     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5f8:	89 e5       	ldi	r24, 0x59	; 89
 5fa:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 5fe:	c2 e0       	ldi	r28, 0x02	; 2
 600:	d0 e0       	ldi	r29, 0x00	; 0
 602:	26 c0       	rjmp	.+76     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 604:	81 11       	cpse	r24, r1
 606:	22 c0       	rjmp	.+68     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 608:	8a e5       	ldi	r24, 0x5A	; 90
 60a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 60e:	c2 e0       	ldi	r28, 0x02	; 2
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	1e c0       	rjmp	.+60     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <State>
 61a:	1a c0       	rjmp	.+52     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 61c:	c2 e0       	ldi	r28, 0x02	; 2
 61e:	d0 e0       	ldi	r29, 0x00	; 0
 620:	17 c0       	rjmp	.+46     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 622:	c2 e0       	ldi	r28, 0x02	; 2
 624:	d0 e0       	ldi	r29, 0x00	; 0
 626:	14 c0       	rjmp	.+40     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 628:	c2 e0       	ldi	r28, 0x02	; 2
 62a:	d0 e0       	ldi	r29, 0x00	; 0
 62c:	11 c0       	rjmp	.+34     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 62e:	c2 e0       	ldi	r28, 0x02	; 2
 630:	d0 e0       	ldi	r29, 0x00	; 0
 632:	0e c0       	rjmp	.+28     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 634:	c2 e0       	ldi	r28, 0x02	; 2
 636:	d0 e0       	ldi	r29, 0x00	; 0
 638:	0b c0       	rjmp	.+22     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 63a:	c2 e0       	ldi	r28, 0x02	; 2
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	08 c0       	rjmp	.+16     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 640:	c2 e0       	ldi	r28, 0x02	; 2
 642:	d0 e0       	ldi	r29, 0x00	; 0
 644:	05 c0       	rjmp	.+10     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 646:	c2 e0       	ldi	r28, 0x02	; 2
 648:	d0 e0       	ldi	r29, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64c:	c2 e0       	ldi	r28, 0x02	; 2
 64e:	d0 e0       	ldi	r29, 0x00	; 0
 650:	ce 01       	movw	r24, r28
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <N5110_Cmnd>:
 658:	cf 93       	push	r28
 65a:	c8 2f       	mov	r28, r24
 65c:	29 98       	cbi	0x05, 1	; 5
 65e:	7f d2       	rcall	.+1278   	; 0xb5e <SPI_SS_Enable>
 660:	8c 2f       	mov	r24, r28
 662:	89 d2       	rcall	.+1298   	; 0xb76 <SPI_Write>
 664:	29 9a       	sbi	0x05, 1	; 5
 666:	7d d2       	rcall	.+1274   	; 0xb62 <SPI_SS_Disable>
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <N5110_Reset>:
 66c:	28 98       	cbi	0x05, 0	; 5
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	80 e7       	ldi	r24, 0x70	; 112
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	21 50       	subi	r18, 0x01	; 1
 676:	80 40       	sbci	r24, 0x00	; 0
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	e1 f7       	brne	.-8      	; 0x674 <N5110_Reset+0x8>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <N5110_Reset+0x12>
 67e:	00 00       	nop
 680:	28 9a       	sbi	0x05, 0	; 5
 682:	08 95       	ret

00000684 <N5110_init>:
 684:	f3 df       	rcall	.-26     	; 0x66c <N5110_Reset>
 686:	81 e2       	ldi	r24, 0x21	; 33
 688:	e7 df       	rcall	.-50     	; 0x658 <N5110_Cmnd>
 68a:	80 ec       	ldi	r24, 0xC0	; 192
 68c:	e5 df       	rcall	.-54     	; 0x658 <N5110_Cmnd>
 68e:	87 e0       	ldi	r24, 0x07	; 7
 690:	e3 df       	rcall	.-58     	; 0x658 <N5110_Cmnd>
 692:	83 e1       	ldi	r24, 0x13	; 19
 694:	e1 df       	rcall	.-62     	; 0x658 <N5110_Cmnd>
 696:	80 e2       	ldi	r24, 0x20	; 32
 698:	df df       	rcall	.-66     	; 0x658 <N5110_Cmnd>
 69a:	8c e0       	ldi	r24, 0x0C	; 12
 69c:	dd cf       	rjmp	.-70     	; 0x658 <N5110_Cmnd>
 69e:	08 95       	ret

000006a0 <N5110_clear>:
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	5c d2       	rcall	.+1208   	; 0xb5e <SPI_SS_Enable>
 6a6:	29 9a       	sbi	0x05, 1	; 5
 6a8:	c8 ef       	ldi	r28, 0xF8	; 248
 6aa:	d1 e0       	ldi	r29, 0x01	; 1
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	63 d2       	rcall	.+1222   	; 0xb76 <SPI_Write>
 6b0:	21 97       	sbiw	r28, 0x01	; 1
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <N5110_clear+0xc>
 6b4:	29 98       	cbi	0x05, 1	; 5
 6b6:	55 d2       	rcall	.+1194   	; 0xb62 <SPI_SS_Disable>
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret

000006be <set_PWM>:
 6be:	cf 92       	push	r12
 6c0:	df 92       	push	r13
 6c2:	ef 92       	push	r14
 6c4:	ff 92       	push	r15
 6c6:	6b 01       	movw	r12, r22
 6c8:	7c 01       	movw	r14, r24
 6ca:	9b 01       	movw	r18, r22
 6cc:	ac 01       	movw	r20, r24
 6ce:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <__data_end>
 6d2:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <__data_end+0x1>
 6d6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end+0x2>
 6da:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x3>
 6de:	50 d2       	rcall	.+1184   	; 0xb80 <__cmpsf2>
 6e0:	88 23       	and	r24, r24
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <set_PWM+0x28>
 6e4:	40 c0       	rjmp	.+128    	; 0x766 <set_PWM+0xa8>
 6e6:	20 e0       	ldi	r18, 0x00	; 0
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	a9 01       	movw	r20, r18
 6ec:	c7 01       	movw	r24, r14
 6ee:	b6 01       	movw	r22, r12
 6f0:	47 d2       	rcall	.+1166   	; 0xb80 <__cmpsf2>
 6f2:	81 11       	cpse	r24, r1
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <set_PWM+0x40>
 6f6:	85 b5       	in	r24, 0x25	; 37
 6f8:	88 70       	andi	r24, 0x08	; 8
 6fa:	85 bd       	out	0x25, r24	; 37
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <set_PWM+0x46>
 6fe:	85 b5       	in	r24, 0x25	; 37
 700:	83 60       	ori	r24, 0x03	; 3
 702:	85 bd       	out	0x25, r24	; 37
 704:	28 e5       	ldi	r18, 0x58	; 88
 706:	39 e3       	ldi	r19, 0x39	; 57
 708:	44 e7       	ldi	r20, 0x74	; 116
 70a:	5f e3       	ldi	r21, 0x3F	; 63
 70c:	c7 01       	movw	r24, r14
 70e:	b6 01       	movw	r22, r12
 710:	37 d2       	rcall	.+1134   	; 0xb80 <__cmpsf2>
 712:	88 23       	and	r24, r24
 714:	1c f4       	brge	.+6      	; 0x71c <set_PWM+0x5e>
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	87 bd       	out	0x27, r24	; 39
 71a:	1c c0       	rjmp	.+56     	; 0x754 <set_PWM+0x96>
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	34 e2       	ldi	r19, 0x24	; 36
 720:	44 ef       	ldi	r20, 0xF4	; 244
 722:	56 e4       	ldi	r21, 0x46	; 70
 724:	c7 01       	movw	r24, r14
 726:	b6 01       	movw	r22, r12
 728:	3d d3       	rcall	.+1658   	; 0xda4 <__gesf2>
 72a:	18 16       	cp	r1, r24
 72c:	14 f4       	brge	.+4      	; 0x732 <set_PWM+0x74>
 72e:	17 bc       	out	0x27, r1	; 39
 730:	11 c0       	rjmp	.+34     	; 0x754 <set_PWM+0x96>
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	53 e4       	ldi	r21, 0x43	; 67
 73a:	c7 01       	movw	r24, r14
 73c:	b6 01       	movw	r22, r12
 73e:	36 d3       	rcall	.+1644   	; 0xdac <__mulsf3>
 740:	9b 01       	movw	r18, r22
 742:	ac 01       	movw	r20, r24
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	74 e2       	ldi	r23, 0x24	; 36
 748:	84 ef       	ldi	r24, 0xF4	; 244
 74a:	9a e4       	ldi	r25, 0x4A	; 74
 74c:	1d d2       	rcall	.+1082   	; 0xb88 <__divsf3>
 74e:	84 d2       	rcall	.+1288   	; 0xc58 <__fixsfsi>
 750:	61 50       	subi	r22, 0x01	; 1
 752:	67 bd       	out	0x27, r22	; 39
 754:	16 bc       	out	0x26, r1	; 38
 756:	c0 92 82 01 	sts	0x0182, r12	; 0x800182 <__data_end>
 75a:	d0 92 83 01 	sts	0x0183, r13	; 0x800183 <__data_end+0x1>
 75e:	e0 92 84 01 	sts	0x0184, r14	; 0x800184 <__data_end+0x2>
 762:	f0 92 85 01 	sts	0x0185, r15	; 0x800185 <__data_end+0x3>
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	08 95       	ret

00000770 <WA_Tick>:
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	91 05       	cpc	r25, r1
 774:	79 f0       	breq	.+30     	; 0x794 <WA_Tick+0x24>
 776:	82 30       	cpi	r24, 0x02	; 2
 778:	91 05       	cpc	r25, r1
 77a:	99 f0       	breq	.+38     	; 0x7a2 <WA_Tick+0x32>
 77c:	00 97       	sbiw	r24, 0x00	; 0
 77e:	b1 f4       	brne	.+44     	; 0x7ac <WA_Tick+0x3c>
 780:	31 e0       	ldi	r19, 0x01	; 1
 782:	20 e0       	ldi	r18, 0x00	; 0
 784:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <letterFound>
 788:	81 11       	cpse	r24, r1
 78a:	01 c0       	rjmp	.+2      	; 0x78e <WA_Tick+0x1e>
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	83 2f       	mov	r24, r19
 790:	92 2f       	mov	r25, r18
 792:	0c c0       	rjmp	.+24     	; 0x7ac <WA_Tick+0x3c>
 794:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <WA_Count>
 798:	8b 30       	cpi	r24, 0x0B	; 11
 79a:	80 f0       	brcs	.+32     	; 0x7bc <WA_Tick+0x4c>
 79c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <WA_Count>
 7a0:	0d c0       	rjmp	.+26     	; 0x7bc <WA_Tick+0x4c>
 7a2:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <letterFound>
 7a6:	81 11       	cpse	r24, r1
 7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <WA_Tick+0x62>
 7aa:	08 c0       	rjmp	.+16     	; 0x7bc <WA_Tick+0x4c>
 7ac:	81 30       	cpi	r24, 0x01	; 1
 7ae:	91 05       	cpc	r25, r1
 7b0:	51 f0       	breq	.+20     	; 0x7c6 <WA_Tick+0x56>
 7b2:	82 30       	cpi	r24, 0x02	; 2
 7b4:	91 05       	cpc	r25, r1
 7b6:	69 f0       	breq	.+26     	; 0x7d2 <WA_Tick+0x62>
 7b8:	89 2b       	or	r24, r25
 7ba:	79 f4       	brne	.+30     	; 0x7da <WA_Tick+0x6a>
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	cb 01       	movw	r24, r22
 7c2:	7d cf       	rjmp	.-262    	; 0x6be <set_PWM>
 7c4:	08 95       	ret
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	70 ed       	ldi	r23, 0xD0	; 208
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	94 e4       	ldi	r25, 0x44	; 68
 7ce:	77 cf       	rjmp	.-274    	; 0x6be <set_PWM>
 7d0:	08 95       	ret
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	cb 01       	movw	r24, r22
 7d8:	72 cf       	rjmp	.-284    	; 0x6be <set_PWM>
 7da:	08 95       	ret

000007dc <PWM_on>:
 7dc:	81 e4       	ldi	r24, 0x41	; 65
 7de:	84 bd       	out	0x24, r24	; 36
 7e0:	8b e0       	ldi	r24, 0x0B	; 11
 7e2:	85 bd       	out	0x25, r24	; 37
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	cb 01       	movw	r24, r22
 7ea:	69 cf       	rjmp	.-302    	; 0x6be <set_PWM>
 7ec:	08 95       	ret

000007ee <LCDBuildChar>:
unsigned char WTG_Index = 0; //world to guess index
unsigned char lastClicked;  //last letter user clicked


void LCDBuildChar(unsigned char loc, unsigned char *p)
{
 7ee:	0f 93       	push	r16
 7f0:	1f 93       	push	r17
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
	unsigned char i;
	if(loc<8) //If valid address
 7f6:	88 30       	cpi	r24, 0x08	; 8
 7f8:	70 f4       	brcc	.+28     	; 0x816 <LCDBuildChar+0x28>
 7fa:	8b 01       	movw	r16, r22
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
 7fc:	88 0f       	add	r24, r24
 7fe:	88 0f       	add	r24, r24
 800:	88 0f       	add	r24, r24
 802:	80 5c       	subi	r24, 0xC0	; 192
 804:	ae dc       	rcall	.-1700   	; 0x162 <LCD_WriteCommand>
 806:	e8 01       	movw	r28, r16
 808:	08 5f       	subi	r16, 0xF8	; 248
 80a:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
 80c:	89 91       	ld	r24, Y+
 80e:	cc dc       	rcall	.-1640   	; 0x1a8 <LCD_WriteData>
{
	unsigned char i;
	if(loc<8) //If valid address
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		for(i=0;i<8;i++)
 810:	c0 17       	cp	r28, r16
 812:	d1 07       	cpc	r29, r17
 814:	d9 f7       	brne	.-10     	; 0x80c <LCDBuildChar+0x1e>
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
}
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <CheckGuessed>:

void CheckGuessed(){
	letterFound = 0;
	
	for(unsigned char b = 0; b < 17; b++){
		if(wordToGuess[b] == P2Guess){
 820:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <P2Guess>
 824:	ec e5       	ldi	r30, 0x5C	; 92
 826:	f1 e0       	ldi	r31, 0x01	; 1
 828:	a0 e0       	ldi	r26, 0x00	; 0
 82a:	b1 e0       	ldi	r27, 0x01	; 1
 82c:	2d e6       	ldi	r18, 0x6D	; 109
 82e:	31 e0       	ldi	r19, 0x01	; 1
 830:	40 e0       	ldi	r20, 0x00	; 0
			displayGuess[b] = wordToGuess[b];
		}
		else
		{
			letterFound = 1;
 832:	51 e0       	ldi	r21, 0x01	; 1

void CheckGuessed(){
	letterFound = 0;
	
	for(unsigned char b = 0; b < 17; b++){
		if(wordToGuess[b] == P2Guess){
 834:	81 91       	ld	r24, Z+
 836:	89 13       	cpse	r24, r25
 838:	02 c0       	rjmp	.+4      	; 0x83e <CheckGuessed+0x1e>
			displayGuess[b] = wordToGuess[b];
 83a:	9c 93       	st	X, r25
 83c:	01 c0       	rjmp	.+2      	; 0x840 <CheckGuessed+0x20>
		}
		else
		{
			letterFound = 1;
 83e:	45 2f       	mov	r20, r21
 840:	11 96       	adiw	r26, 0x01	; 1
}

void CheckGuessed(){
	letterFound = 0;
	
	for(unsigned char b = 0; b < 17; b++){
 842:	e2 17       	cp	r30, r18
 844:	f3 07       	cpc	r31, r19
 846:	b1 f7       	brne	.-20     	; 0x834 <CheckGuessed+0x14>
 848:	40 93 ab 01 	sts	0x01AB, r20	; 0x8001ab <letterFound>
 84c:	08 95       	ret

0000084e <LCD_Tick>:

enum LCD_States{Init, Wait, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
	switch (state)
 852:	82 30       	cpi	r24, 0x02	; 2
 854:	91 05       	cpc	r25, r1
 856:	89 f0       	breq	.+34     	; 0x87a <LCD_Tick+0x2c>
 858:	1c f4       	brge	.+6      	; 0x860 <LCD_Tick+0x12>
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	49 f0       	breq	.+18     	; 0x870 <LCD_Tick+0x22>
 85e:	42 c0       	rjmp	.+132    	; 0x8e4 <LCD_Tick+0x96>
 860:	83 30       	cpi	r24, 0x03	; 3
 862:	91 05       	cpc	r25, r1
 864:	d1 f0       	breq	.+52     	; 0x89a <LCD_Tick+0x4c>
 866:	84 30       	cpi	r24, 0x04	; 4
 868:	91 05       	cpc	r25, r1
 86a:	09 f4       	brne	.+2      	; 0x86e <LCD_Tick+0x20>
 86c:	39 c0       	rjmp	.+114    	; 0x8e0 <LCD_Tick+0x92>
 86e:	3a c0       	rjmp	.+116    	; 0x8e4 <LCD_Tick+0x96>
	{
		case Init : state = WelcomeLCD;
					LCD_ClearScreen();
 870:	81 dc       	rcall	.-1790   	; 0x174 <LCD_ClearScreen>
					SPI_Init();
 872:	79 d1       	rcall	.+754    	; 0xb66 <SPI_Init>
					N5110_init();
 874:	07 df       	rcall	.-498    	; 0x684 <N5110_init>
 876:	14 df       	rcall	.-472    	; 0x6a0 <N5110_clear>
					N5110_clear();
 878:	41 c0       	rjmp	.+130    	; 0x8fc <LCD_Tick+0xae>
 87a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <count>
					
					
		break;
		case Wait : 
		break;
		case WelcomeLCD : if(count <= 51){ 
 87e:	84 33       	cpi	r24, 0x34	; 52
 880:	08 f4       	brcc	.+2      	; 0x884 <LCD_Tick+0x36>
 882:	3c c0       	rjmp	.+120    	; 0x8fc <LCD_Tick+0xae>
 884:	77 dc       	rcall	.-1810   	; 0x174 <LCD_ClearScreen>
							  state = WelcomeLCD;
						  }
						  else if(count > 51){
							  state = P1InputLCD;
							  LCD_ClearScreen();
 886:	62 e7       	ldi	r22, 0x72	; 114
							  LCD_DisplayString(17,"16 Letters MAX");
 888:	71 e0       	ldi	r23, 0x01	; 1
 88a:	81 e1       	ldi	r24, 0x11	; 17
 88c:	96 dc       	rcall	.-1748   	; 0x1ba <LCD_DisplayString>
 88e:	81 e0       	ldi	r24, 0x01	; 1
							  LCD_Cursor(1);
 890:	74 dc       	rcall	.-1816   	; 0x17a <LCD_Cursor>
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <LCDindex>
							  LCDindex = 1;
 898:	7b c0       	rjmp	.+246    	; 0x990 <LCD_Tick+0x142>
 89a:	80 b1       	in	r24, 0x00	; 0
						 }
		break;
		case P1InputLCD :	if(GetBit(~PINA, 6)){
 89c:	80 95       	com	r24
 89e:	86 ff       	sbrs	r24, 6
 8a0:	77 c0       	rjmp	.+238    	; 0x990 <LCD_Tick+0x142>
								LCD_ClearScreen();
 8a2:	68 dc       	rcall	.-1840   	; 0x174 <LCD_ClearScreen>
 8a4:	82 e0       	ldi	r24, 0x02	; 2
								state = P2InputLCD;
								delay_ms(2);
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	49 dc       	rcall	.-1902   	; 0x13c <delay_ms>
 8aa:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <WTG_Index>
							
							
							for(unsigned char a = 0; a < WTG_Index; a++){
 8ae:	88 23       	and	r24, r24
 8b0:	89 f0       	breq	.+34     	; 0x8d4 <LCD_Tick+0x86>
 8b2:	c0 e0       	ldi	r28, 0x00	; 0
 8b4:	df e5       	ldi	r29, 0x5F	; 95
								displayGuess[a] = '_';
 8b6:	ec 2f       	mov	r30, r28
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	e0 50       	subi	r30, 0x00	; 0
 8bc:	ff 4f       	sbci	r31, 0xFF	; 255
 8be:	d0 83       	st	Z, r29
								LCD_Cursor(a + 17);
 8c0:	81 e1       	ldi	r24, 0x11	; 17
 8c2:	8c 0f       	add	r24, r28
 8c4:	5a dc       	rcall	.-1868   	; 0x17a <LCD_Cursor>
								LCD_WriteData('_');
 8c6:	8d 2f       	mov	r24, r29
 8c8:	6f dc       	rcall	.-1826   	; 0x1a8 <LCD_WriteData>
 8ca:	cf 5f       	subi	r28, 0xFF	; 255
								LCD_ClearScreen();
								state = P2InputLCD;
								delay_ms(2);
							
							
							for(unsigned char a = 0; a < WTG_Index; a++){
 8cc:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <WTG_Index>
 8d0:	c8 17       	cp	r28, r24
 8d2:	88 f3       	brcs	.-30     	; 0x8b6 <LCD_Tick+0x68>
 8d4:	81 e0       	ldi	r24, 0x01	; 1
								displayGuess[a] = '_';
								LCD_Cursor(a + 17);
								LCD_WriteData('_');
							}
								
							LCD_Cursor(1);
 8d6:	51 dc       	rcall	.-1886   	; 0x17a <LCD_Cursor>
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <LCDindex>
							LCDindex = 1;					
 8de:	82 c0       	rjmp	.+260    	; 0x9e4 <LCD_Tick+0x196>
 8e0:	80 b1       	in	r24, 0x00	; 0
 8e2:	80 c0       	rjmp	.+256    	; 0x9e4 <LCD_Tick+0x196>
						}else{						
							state = P1InputLCD;
						}
		break;
		case P2InputLCD :	if(GetBit(~PINA, 6)){
 8e4:	83 30       	cpi	r24, 0x03	; 3
 8e6:	91 05       	cpc	r25, r1
		break;
		case LoseLCD :
		break;
	}//end Transitions
	
	switch (state)
 8e8:	09 f4       	brne	.+2      	; 0x8ec <LCD_Tick+0x9e>
 8ea:	52 c0       	rjmp	.+164    	; 0x990 <LCD_Tick+0x142>
 8ec:	84 30       	cpi	r24, 0x04	; 4
 8ee:	91 05       	cpc	r25, r1
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <LCD_Tick+0xa6>
 8f2:	78 c0       	rjmp	.+240    	; 0x9e4 <LCD_Tick+0x196>
 8f4:	82 30       	cpi	r24, 0x02	; 2
 8f6:	91 05       	cpc	r25, r1
 8f8:	09 f0       	breq	.+2      	; 0x8fc <LCD_Tick+0xae>
 8fa:	ac c0       	rjmp	.+344    	; 0xa54 <LCD_Tick+0x206>
 8fc:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <LCDindex>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
			for(LCDindex = 0; LCDindex < 16; LCDindex++){
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	8f 5f       	subi	r24, 0xFF	; 255
				LCD_Cursor(LCDindex + 1);
 904:	3a dc       	rcall	.-1932   	; 0x17a <LCD_Cursor>
 906:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <LCDindex>
				LCD_WriteData(welcomeMessage[LCDindex]);
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	e7 5e       	subi	r30, 0xE7	; 231
 90e:	fe 4f       	sbci	r31, 0xFE	; 254
 910:	80 81       	ld	r24, Z
 912:	4a dc       	rcall	.-1900   	; 0x1a8 <LCD_WriteData>
 914:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <LCDindex>
 918:	8f 5f       	subi	r24, 0xFF	; 255
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
			for(LCDindex = 0; LCDindex < 16; LCDindex++){
 91a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <LCDindex>
 91e:	80 31       	cpi	r24, 0x10	; 16
 920:	80 f3       	brcs	.-32     	; 0x902 <LCD_Tick+0xb4>
 922:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <welcomeMessage>
 926:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <front>
				LCD_WriteData(welcomeMessage[LCDindex]);
			}
		
		
		
		front = welcomeMessage[0];
 92a:	e9 e1       	ldi	r30, 0x19	; 25
 92c:	f1 e0       	ldi	r31, 0x01	; 1
 92e:	2c e5       	ldi	r18, 0x5C	; 92
 930:	31 e0       	ldi	r19, 0x01	; 1
 932:	81 81       	ldd	r24, Z+1	; 0x01
		
		for (unsigned char j = 0; j < 67; j++) {
			welcomeMessage[j] = welcomeMessage[j + 1];
 934:	81 93       	st	Z+, r24
		
		
		
		front = welcomeMessage[0];
		
		for (unsigned char j = 0; j < 67; j++) {
 936:	2e 17       	cp	r18, r30
 938:	3f 07       	cpc	r19, r31
			welcomeMessage[j] = welcomeMessage[j + 1];
		}
		// put the saved character on the end
		welcomeMessage[67] = front;
 93a:	d9 f7       	brne	.-10     	; 0x932 <LCD_Tick+0xe4>
		
		LCDBuildChar(0, customChar);
 93c:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <wordToGuess>
 940:	61 e1       	ldi	r22, 0x11	; 17
			LCD_Cursor(17);
 942:	71 e0       	ldi	r23, 0x01	; 1
 944:	80 e0       	ldi	r24, 0x00	; 0
			LCD_WriteData(0x00);
 946:	53 df       	rcall	.-346    	; 0x7ee <LCDBuildChar>
 948:	81 e1       	ldi	r24, 0x11	; 17
			LCD_Cursor(20);
 94a:	17 dc       	rcall	.-2002   	; 0x17a <LCD_Cursor>
 94c:	80 e0       	ldi	r24, 0x00	; 0
			LCD_WriteData(0x00);
 94e:	2c dc       	rcall	.-1960   	; 0x1a8 <LCD_WriteData>
 950:	84 e1       	ldi	r24, 0x14	; 20
			LCD_Cursor(23);
 952:	13 dc       	rcall	.-2010   	; 0x17a <LCD_Cursor>
 954:	80 e0       	ldi	r24, 0x00	; 0
			LCD_WriteData(0x00);
 956:	28 dc       	rcall	.-1968   	; 0x1a8 <LCD_WriteData>
 958:	87 e1       	ldi	r24, 0x17	; 23
 95a:	0f dc       	rcall	.-2018   	; 0x17a <LCD_Cursor>
			LCD_Cursor(26);
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	24 dc       	rcall	.-1976   	; 0x1a8 <LCD_WriteData>
 960:	8a e1       	ldi	r24, 0x1A	; 26
			LCD_WriteData(0x00);
 962:	0b dc       	rcall	.-2026   	; 0x17a <LCD_Cursor>
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	20 dc       	rcall	.-1984   	; 0x1a8 <LCD_WriteData>
			LCD_Cursor(29);
 968:	8d e1       	ldi	r24, 0x1D	; 29
 96a:	07 dc       	rcall	.-2034   	; 0x17a <LCD_Cursor>
 96c:	80 e0       	ldi	r24, 0x00	; 0
			LCD_WriteData(0x00);
 96e:	1c dc       	rcall	.-1992   	; 0x1a8 <LCD_WriteData>
 970:	80 e2       	ldi	r24, 0x20	; 32
 972:	03 dc       	rcall	.-2042   	; 0x17a <LCD_Cursor>
			LCD_Cursor(32);
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	18 dc       	rcall	.-2000   	; 0x1a8 <LCD_WriteData>
 978:	83 e2       	ldi	r24, 0x23	; 35
			LCD_WriteData(0x00);
 97a:	ff db       	rcall	.-2050   	; 0x17a <LCD_Cursor>
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	14 dc       	rcall	.-2008   	; 0x1a8 <LCD_WriteData>
			LCD_Cursor(35);
 980:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <count>
 984:	8f 5f       	subi	r24, 0xFF	; 255
			LCD_WriteData(0x00);
 986:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <count>
 98a:	82 e0       	ldi	r24, 0x02	; 2
		
		count++;
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	62 c0       	rjmp	.+196    	; 0xa54 <LCD_Tick+0x206>
 990:	80 b1       	in	r24, 0x00	; 0
 992:	80 95       	com	r24
 994:	85 ff       	sbrs	r24, 5
		
			
		break;
 996:	18 c0       	rjmp	.+48     	; 0x9c8 <LCD_Tick+0x17a>
 998:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <WTG_Index>
		case P1InputLCD :
			
			if(GetBit(~PINA,5)){
 99c:	80 31       	cpi	r24, 0x10	; 16
 99e:	a0 f4       	brcc	.+40     	; 0x9c8 <LCD_Tick+0x17a>
 9a0:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <LCDindex>
				if(WTG_Index < 16){
 9a4:	9f 5f       	subi	r25, 0xFF	; 255
 9a6:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <LCDindex>
					LCDindex++;
 9aa:	e8 2f       	mov	r30, r24
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	e4 5a       	subi	r30, 0xA4	; 164
 9b0:	fe 4f       	sbci	r31, 0xFE	; 254
					wordToGuess[WTG_Index] = lastClicked;
 9b2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <lastClicked>
 9b6:	90 83       	st	Z, r25
 9b8:	8f 5f       	subi	r24, 0xFF	; 255
 9ba:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <WTG_Index>
 9be:	80 e2       	ldi	r24, 0x20	; 32
					WTG_Index++;
 9c0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
 9c4:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <click>
					character = ' ';
 9c8:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <LCDindex>
					click = 0;
 9cc:	d6 db       	rcall	.-2132   	; 0x17a <LCD_Cursor>
					
				}
				
			}
			LCD_Cursor(LCDindex);
 9ce:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <character>
 9d2:	80 32       	cpi	r24, 0x20	; 32
			if(character != ' '){
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <LCD_Tick+0x18a>
 9d6:	39 c0       	rjmp	.+114    	; 0xa4a <LCD_Tick+0x1fc>
 9d8:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lastClicked>
				lastClicked = character;
 9dc:	e5 db       	rcall	.-2102   	; 0x1a8 <LCD_WriteData>
 9de:	83 e0       	ldi	r24, 0x03	; 3
				LCD_WriteData(character);
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	38 c0       	rjmp	.+112    	; 0xa54 <LCD_Tick+0x206>
 9e4:	80 b1       	in	r24, 0x00	; 0
 9e6:	80 95       	com	r24
// 		N5110_init();
// 				N5110_clear();
// 				lcd_setXY(0x40,0x80);
// 				N5110_Data("ElectronicWings");

				if(GetBit(~PINA,5)){
 9e8:	85 ff       	sbrs	r24, 5
 9ea:	23 c0       	rjmp	.+70     	; 0xa32 <LCD_Tick+0x1e4>
 9ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <lastClicked>
						P2Guess = lastClicked;
 9f0:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <P2Guess>
 9f4:	80 e2       	ldi	r24, 0x20	; 32
						character = ' ';
 9f6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <character>
						click = 0;
 9fa:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <click>
						LCD_Cursor(1);
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	bc db       	rcall	.-2184   	; 0x17a <LCD_Cursor>
 a02:	80 e2       	ldi	r24, 0x20	; 32
						LCD_WriteData(' ');
 a04:	d1 db       	rcall	.-2142   	; 0x1a8 <LCD_WriteData>
 a06:	81 e0       	ldi	r24, 0x01	; 1
						LCD_Cursor(1);
 a08:	b8 db       	rcall	.-2192   	; 0x17a <LCD_Cursor>
 a0a:	0a df       	rcall	.-492    	; 0x820 <CheckGuessed>
 a0c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <WTG_Index>
						
						CheckGuessed();
 a10:	88 23       	and	r24, r24
						for(unsigned char a = 0; a < WTG_Index; a++){
 a12:	79 f0       	breq	.+30     	; 0xa32 <LCD_Tick+0x1e4>
 a14:	c0 e0       	ldi	r28, 0x00	; 0
 a16:	81 e1       	ldi	r24, 0x11	; 17
 a18:	8c 0f       	add	r24, r28
 a1a:	af db       	rcall	.-2210   	; 0x17a <LCD_Cursor>
							LCD_Cursor(a + 17);
 a1c:	ec 2f       	mov	r30, r28
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	e0 50       	subi	r30, 0x00	; 0
 a22:	ff 4f       	sbci	r31, 0xFF	; 255
							LCD_WriteData(displayGuess[a]);
 a24:	80 81       	ld	r24, Z
 a26:	c0 db       	rcall	.-2176   	; 0x1a8 <LCD_WriteData>
 a28:	cf 5f       	subi	r28, 0xFF	; 255
 a2a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <WTG_Index>
 a2e:	c8 17       	cp	r28, r24
 a30:	90 f3       	brcs	.-28     	; 0xa16 <LCD_Tick+0x1c8>
						LCD_Cursor(1);
						LCD_WriteData(' ');
						LCD_Cursor(1);
						
						CheckGuessed();
						for(unsigned char a = 0; a < WTG_Index; a++){
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	a2 db       	rcall	.-2236   	; 0x17a <LCD_Cursor>
 a36:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <character>
 a3a:	80 32       	cpi	r24, 0x20	; 32
							LCD_WriteData(displayGuess[a]);
						}
						
					
				}
				LCD_Cursor(1);
 a3c:	49 f0       	breq	.+18     	; 0xa50 <LCD_Tick+0x202>
 a3e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lastClicked>
				if(character != ' '){
 a42:	b2 db       	rcall	.-2204   	; 0x1a8 <LCD_WriteData>
 a44:	84 e0       	ldi	r24, 0x04	; 4
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	05 c0       	rjmp	.+10     	; 0xa54 <LCD_Tick+0x206>
					lastClicked = character;
 a4a:	83 e0       	ldi	r24, 0x03	; 3
 a4c:	90 e0       	ldi	r25, 0x00	; 0
					LCD_WriteData(character);
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <LCD_Tick+0x206>
 a50:	84 e0       	ldi	r24, 0x04	; 4
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	08 95       	ret

00000a5a <main>:
 a5a:	8f ef       	ldi	r24, 0xFF	; 255
 a5c:	8a b9       	out	0x0a, r24	; 10
 a5e:	1b b8       	out	0x0b, r1	; 11
 a60:	81 b9       	out	0x01, r24	; 1
		break;
	}//end Initializations
	
	
	return state;
}
 a62:	82 b9       	out	0x02, r24	; 2
 a64:	84 b9       	out	0x04, r24	; 4
 a66:	15 b8       	out	0x05, r1	; 5
int main(void)
{
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
	DDRA = 0xFF; PORTA = 0xFF; // LCD control lines
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 a68:	80 ef       	ldi	r24, 0xF0	; 240
 a6a:	87 b9       	out	0x07, r24	; 7
 a6c:	8f e0       	ldi	r24, 0x0F	; 15
 a6e:	88 b9       	out	0x08, r24	; 8
	unsigned long WAPeriod = 100;
	
	unsigned long period = 100;
	unsigned char i = 0;
	
	Tasks[i].state = Init;
 a70:	e6 e8       	ldi	r30, 0x86	; 134
 a72:	f1 e0       	ldi	r31, 0x01	; 1
 a74:	10 82       	st	Z, r1
	Tasks[i].period = LCDPeriod;
 a76:	84 ef       	ldi	r24, 0xF4	; 244
 a78:	91 e0       	ldi	r25, 0x01	; 1
 a7a:	a0 e0       	ldi	r26, 0x00	; 0
 a7c:	b0 e0       	ldi	r27, 0x00	; 0
 a7e:	81 83       	std	Z+1, r24	; 0x01
 a80:	92 83       	std	Z+2, r25	; 0x02
 a82:	a3 83       	std	Z+3, r26	; 0x03
 a84:	b4 83       	std	Z+4, r27	; 0x04
	Tasks[i].elapsedTime = LCDPeriod;
 a86:	85 83       	std	Z+5, r24	; 0x05
 a88:	96 83       	std	Z+6, r25	; 0x06
 a8a:	a7 83       	std	Z+7, r26	; 0x07
 a8c:	b0 87       	std	Z+8, r27	; 0x08
	Tasks[i].TickFct = &LCD_Tick;
 a8e:	87 e2       	ldi	r24, 0x27	; 39
 a90:	94 e0       	ldi	r25, 0x04	; 4
 a92:	92 87       	std	Z+10, r25	; 0x0a
 a94:	81 87       	std	Z+9, r24	; 0x09
	i++;
	Tasks[i].state = Wait_KP;
 a96:	13 86       	std	Z+11, r1	; 0x0b
	Tasks[i].period = KPPeriod;
 a98:	8c e2       	ldi	r24, 0x2C	; 44
 a9a:	91 e0       	ldi	r25, 0x01	; 1
 a9c:	a0 e0       	ldi	r26, 0x00	; 0
 a9e:	b0 e0       	ldi	r27, 0x00	; 0
 aa0:	84 87       	std	Z+12, r24	; 0x0c
 aa2:	95 87       	std	Z+13, r25	; 0x0d
 aa4:	a6 87       	std	Z+14, r26	; 0x0e
 aa6:	b7 87       	std	Z+15, r27	; 0x0f
	Tasks[i].elapsedTime = KPPeriod;
 aa8:	80 8b       	std	Z+16, r24	; 0x10
 aaa:	91 8b       	std	Z+17, r25	; 0x11
 aac:	a2 8b       	std	Z+18, r26	; 0x12
 aae:	b3 8b       	std	Z+19, r27	; 0x13
	Tasks[i].TickFct = &KeypadTick;
 ab0:	8a eb       	ldi	r24, 0xBA	; 186
 ab2:	91 e0       	ldi	r25, 0x01	; 1
 ab4:	95 8b       	std	Z+21, r25	; 0x15
 ab6:	84 8b       	std	Z+20, r24	; 0x14
	i++;
	Tasks[i].state = WA_Wait;
 ab8:	16 8a       	std	Z+22, r1	; 0x16
	Tasks[i].period = WAPeriod;
 aba:	84 e6       	ldi	r24, 0x64	; 100
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	a0 e0       	ldi	r26, 0x00	; 0
 ac0:	b0 e0       	ldi	r27, 0x00	; 0
 ac2:	87 8b       	std	Z+23, r24	; 0x17
 ac4:	90 8f       	std	Z+24, r25	; 0x18
 ac6:	a1 8f       	std	Z+25, r26	; 0x19
 ac8:	b2 8f       	std	Z+26, r27	; 0x1a
	Tasks[i].elapsedTime = WAPeriod;
 aca:	83 8f       	std	Z+27, r24	; 0x1b
 acc:	94 8f       	std	Z+28, r25	; 0x1c
 ace:	a5 8f       	std	Z+29, r26	; 0x1d
 ad0:	b6 8f       	std	Z+30, r27	; 0x1e
	Tasks[i].TickFct = &WA_Tick;
 ad2:	88 eb       	ldi	r24, 0xB8	; 184
 ad4:	93 e0       	ldi	r25, 0x03	; 3
 ad6:	90 a3       	std	Z+32, r25	; 0x20
 ad8:	87 8f       	std	Z+31, r24	; 0x1f
	
	//LCDBuildChar(0, customChar);
	TimerSet(period);
 ada:	64 e6       	ldi	r22, 0x64	; 100
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	80 e0       	ldi	r24, 0x00	; 0
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	84 db       	rcall	.-2296   	; 0x1ec <TimerSet>
	TimerOn();
 ae4:	94 db       	rcall	.-2264   	; 0x20e <TimerOn>
	LCD_init();
 ae6:	51 db       	rcall	.-2398   	; 0x18a <LCD_init>
 ae8:	79 de       	rcall	.-782    	; 0x7dc <PWM_on>
	PWM_on();
 aea:	0f 2e       	mov	r0, r31
 aec:	f7 ea       	ldi	r31, 0xA7	; 167
 aee:	ef 2e       	mov	r14, r31
 af0:	f1 e0       	ldi	r31, 0x01	; 1
 af2:	ff 2e       	mov	r15, r31
 af4:	f0 2d       	mov	r31, r0
 af6:	c6 e8       	ldi	r28, 0x86	; 134
 af8:	d1 e0       	ldi	r29, 0x01	; 1
 afa:	8e 01       	movw	r16, r28
 afc:	4d 81       	ldd	r20, Y+5	; 0x05
 afe:	5e 81       	ldd	r21, Y+6	; 0x06
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 3; i++ ) {
			// Task is ready to tick
			if ( Tasks[i].elapsedTime == Tasks[i].period ) {
 b00:	6f 81       	ldd	r22, Y+7	; 0x07
 b02:	78 85       	ldd	r23, Y+8	; 0x08
 b04:	89 81       	ldd	r24, Y+1	; 0x01
 b06:	9a 81       	ldd	r25, Y+2	; 0x02
 b08:	ab 81       	ldd	r26, Y+3	; 0x03
 b0a:	bc 81       	ldd	r27, Y+4	; 0x04
 b0c:	48 17       	cp	r20, r24
 b0e:	59 07       	cpc	r21, r25
 b10:	6a 07       	cpc	r22, r26
 b12:	7b 07       	cpc	r23, r27
 b14:	61 f4       	brne	.+24     	; 0xb2e <main+0xd4>
 b16:	88 81       	ld	r24, Y
 b18:	e9 85       	ldd	r30, Y+9	; 0x09
				// Setting next state for task
				Tasks[i].state = Tasks[i].TickFct(Tasks[i].state);
 b1a:	fa 85       	ldd	r31, Y+10	; 0x0a
 b1c:	08 2e       	mov	r0, r24
 b1e:	00 0c       	add	r0, r0
 b20:	99 0b       	sbc	r25, r25
 b22:	09 95       	icall
 b24:	88 83       	st	Y, r24
 b26:	1d 82       	std	Y+5, r1	; 0x05
 b28:	1e 82       	std	Y+6, r1	; 0x06
				// Reset the elapsed time for next tick.
				Tasks[i].elapsedTime = 0;
 b2a:	1f 82       	std	Y+7, r1	; 0x07
 b2c:	18 86       	std	Y+8, r1	; 0x08
 b2e:	f8 01       	movw	r30, r16
 b30:	85 81       	ldd	r24, Z+5	; 0x05
			}
			Tasks[i].elapsedTime += period;
 b32:	96 81       	ldd	r25, Z+6	; 0x06
 b34:	a7 81       	ldd	r26, Z+7	; 0x07
 b36:	b0 85       	ldd	r27, Z+8	; 0x08
 b38:	8c 59       	subi	r24, 0x9C	; 156
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	af 4f       	sbci	r26, 0xFF	; 255
 b3e:	bf 4f       	sbci	r27, 0xFF	; 255
 b40:	85 83       	std	Z+5, r24	; 0x05
 b42:	96 83       	std	Z+6, r25	; 0x06
 b44:	a7 83       	std	Z+7, r26	; 0x07
 b46:	b0 87       	std	Z+8, r27	; 0x08
 b48:	2b 96       	adiw	r28, 0x0b	; 11
 b4a:	ce 15       	cp	r28, r14
 b4c:	df 05       	cpc	r29, r15
	
	
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 3; i++ ) {
 b4e:	a9 f6       	brne	.-86     	; 0xafa <main+0xa0>
 b50:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TimerFlag>
				Tasks[i].elapsedTime = 0;
			}
			Tasks[i].elapsedTime += period;
		}
		
		while (!TimerFlag){}
 b54:	88 23       	and	r24, r24
 b56:	e1 f3       	breq	.-8      	; 0xb50 <main+0xf6>
 b58:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <TimerFlag>
		TimerFlag = 0;
 b5c:	cc cf       	rjmp	.-104    	; 0xaf6 <main+0x9c>

00000b5e <SPI_SS_Enable>:
 b5e:	2c 98       	cbi	0x05, 4	; 5
		
	}
 b60:	08 95       	ret

00000b62 <SPI_SS_Disable>:
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
 b62:	2c 9a       	sbi	0x05, 4	; 5
 b64:	08 95       	ret

00000b66 <SPI_Init>:
 b66:	83 eb       	ldi	r24, 0xB3	; 179
 b68:	84 b9       	out	0x04, r24	; 4
 b6a:	28 9a       	sbi	0x05, 0	; 5
 b6c:	26 98       	cbi	0x04, 6	; 4
 b6e:	2c 9a       	sbi	0x05, 4	; 5
 b70:	81 e5       	ldi	r24, 0x51	; 81
 b72:	8c bd       	out	0x2c, r24	; 44
 b74:	08 95       	ret

00000b76 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
 b76:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
 b78:	0d b4       	in	r0, 0x2d	; 45
 b7a:	07 fe       	sbrs	r0, 7
 b7c:	fd cf       	rjmp	.-6      	; 0xb78 <SPI_Write+0x2>
}
 b7e:	08 95       	ret

00000b80 <__cmpsf2>:
 b80:	9c d0       	rcall	.+312    	; 0xcba <__fp_cmp>
 b82:	08 f4       	brcc	.+2      	; 0xb86 <__cmpsf2+0x6>
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	08 95       	ret

00000b88 <__divsf3>:
 b88:	0c d0       	rcall	.+24     	; 0xba2 <__divsf3x>
 b8a:	d2 c0       	rjmp	.+420    	; 0xd30 <__fp_round>
 b8c:	ca d0       	rcall	.+404    	; 0xd22 <__fp_pscB>
 b8e:	40 f0       	brcs	.+16     	; 0xba0 <__divsf3+0x18>
 b90:	c1 d0       	rcall	.+386    	; 0xd14 <__fp_pscA>
 b92:	30 f0       	brcs	.+12     	; 0xba0 <__divsf3+0x18>
 b94:	21 f4       	brne	.+8      	; 0xb9e <__divsf3+0x16>
 b96:	5f 3f       	cpi	r21, 0xFF	; 255
 b98:	19 f0       	breq	.+6      	; 0xba0 <__divsf3+0x18>
 b9a:	b3 c0       	rjmp	.+358    	; 0xd02 <__fp_inf>
 b9c:	51 11       	cpse	r21, r1
 b9e:	fc c0       	rjmp	.+504    	; 0xd98 <__fp_szero>
 ba0:	b6 c0       	rjmp	.+364    	; 0xd0e <__fp_nan>

00000ba2 <__divsf3x>:
 ba2:	d7 d0       	rcall	.+430    	; 0xd52 <__fp_split3>
 ba4:	98 f3       	brcs	.-26     	; 0xb8c <__divsf3+0x4>

00000ba6 <__divsf3_pse>:
 ba6:	99 23       	and	r25, r25
 ba8:	c9 f3       	breq	.-14     	; 0xb9c <__divsf3+0x14>
 baa:	55 23       	and	r21, r21
 bac:	b1 f3       	breq	.-20     	; 0xb9a <__divsf3+0x12>
 bae:	95 1b       	sub	r25, r21
 bb0:	55 0b       	sbc	r21, r21
 bb2:	bb 27       	eor	r27, r27
 bb4:	aa 27       	eor	r26, r26
 bb6:	62 17       	cp	r22, r18
 bb8:	73 07       	cpc	r23, r19
 bba:	84 07       	cpc	r24, r20
 bbc:	38 f0       	brcs	.+14     	; 0xbcc <__divsf3_pse+0x26>
 bbe:	9f 5f       	subi	r25, 0xFF	; 255
 bc0:	5f 4f       	sbci	r21, 0xFF	; 255
 bc2:	22 0f       	add	r18, r18
 bc4:	33 1f       	adc	r19, r19
 bc6:	44 1f       	adc	r20, r20
 bc8:	aa 1f       	adc	r26, r26
 bca:	a9 f3       	breq	.-22     	; 0xbb6 <__divsf3_pse+0x10>
 bcc:	33 d0       	rcall	.+102    	; 0xc34 <__divsf3_pse+0x8e>
 bce:	0e 2e       	mov	r0, r30
 bd0:	3a f0       	brmi	.+14     	; 0xbe0 <__divsf3_pse+0x3a>
 bd2:	e0 e8       	ldi	r30, 0x80	; 128
 bd4:	30 d0       	rcall	.+96     	; 0xc36 <__divsf3_pse+0x90>
 bd6:	91 50       	subi	r25, 0x01	; 1
 bd8:	50 40       	sbci	r21, 0x00	; 0
 bda:	e6 95       	lsr	r30
 bdc:	00 1c       	adc	r0, r0
 bde:	ca f7       	brpl	.-14     	; 0xbd2 <__divsf3_pse+0x2c>
 be0:	29 d0       	rcall	.+82     	; 0xc34 <__divsf3_pse+0x8e>
 be2:	fe 2f       	mov	r31, r30
 be4:	27 d0       	rcall	.+78     	; 0xc34 <__divsf3_pse+0x8e>
 be6:	66 0f       	add	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	bb 1f       	adc	r27, r27
 bee:	26 17       	cp	r18, r22
 bf0:	37 07       	cpc	r19, r23
 bf2:	48 07       	cpc	r20, r24
 bf4:	ab 07       	cpc	r26, r27
 bf6:	b0 e8       	ldi	r27, 0x80	; 128
 bf8:	09 f0       	breq	.+2      	; 0xbfc <__divsf3_pse+0x56>
 bfa:	bb 0b       	sbc	r27, r27
 bfc:	80 2d       	mov	r24, r0
 bfe:	bf 01       	movw	r22, r30
 c00:	ff 27       	eor	r31, r31
 c02:	93 58       	subi	r25, 0x83	; 131
 c04:	5f 4f       	sbci	r21, 0xFF	; 255
 c06:	2a f0       	brmi	.+10     	; 0xc12 <__divsf3_pse+0x6c>
 c08:	9e 3f       	cpi	r25, 0xFE	; 254
 c0a:	51 05       	cpc	r21, r1
 c0c:	68 f0       	brcs	.+26     	; 0xc28 <__divsf3_pse+0x82>
 c0e:	79 c0       	rjmp	.+242    	; 0xd02 <__fp_inf>
 c10:	c3 c0       	rjmp	.+390    	; 0xd98 <__fp_szero>
 c12:	5f 3f       	cpi	r21, 0xFF	; 255
 c14:	ec f3       	brlt	.-6      	; 0xc10 <__divsf3_pse+0x6a>
 c16:	98 3e       	cpi	r25, 0xE8	; 232
 c18:	dc f3       	brlt	.-10     	; 0xc10 <__divsf3_pse+0x6a>
 c1a:	86 95       	lsr	r24
 c1c:	77 95       	ror	r23
 c1e:	67 95       	ror	r22
 c20:	b7 95       	ror	r27
 c22:	f7 95       	ror	r31
 c24:	9f 5f       	subi	r25, 0xFF	; 255
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__divsf3_pse+0x74>
 c28:	88 0f       	add	r24, r24
 c2a:	91 1d       	adc	r25, r1
 c2c:	96 95       	lsr	r25
 c2e:	87 95       	ror	r24
 c30:	97 f9       	bld	r25, 7
 c32:	08 95       	ret
 c34:	e1 e0       	ldi	r30, 0x01	; 1
 c36:	66 0f       	add	r22, r22
 c38:	77 1f       	adc	r23, r23
 c3a:	88 1f       	adc	r24, r24
 c3c:	bb 1f       	adc	r27, r27
 c3e:	62 17       	cp	r22, r18
 c40:	73 07       	cpc	r23, r19
 c42:	84 07       	cpc	r24, r20
 c44:	ba 07       	cpc	r27, r26
 c46:	20 f0       	brcs	.+8      	; 0xc50 <__divsf3_pse+0xaa>
 c48:	62 1b       	sub	r22, r18
 c4a:	73 0b       	sbc	r23, r19
 c4c:	84 0b       	sbc	r24, r20
 c4e:	ba 0b       	sbc	r27, r26
 c50:	ee 1f       	adc	r30, r30
 c52:	88 f7       	brcc	.-30     	; 0xc36 <__divsf3_pse+0x90>
 c54:	e0 95       	com	r30
 c56:	08 95       	ret

00000c58 <__fixsfsi>:
 c58:	04 d0       	rcall	.+8      	; 0xc62 <__fixunssfsi>
 c5a:	68 94       	set
 c5c:	b1 11       	cpse	r27, r1
 c5e:	9c c0       	rjmp	.+312    	; 0xd98 <__fp_szero>
 c60:	08 95       	ret

00000c62 <__fixunssfsi>:
 c62:	7f d0       	rcall	.+254    	; 0xd62 <__fp_splitA>
 c64:	88 f0       	brcs	.+34     	; 0xc88 <__fixunssfsi+0x26>
 c66:	9f 57       	subi	r25, 0x7F	; 127
 c68:	90 f0       	brcs	.+36     	; 0xc8e <__fixunssfsi+0x2c>
 c6a:	b9 2f       	mov	r27, r25
 c6c:	99 27       	eor	r25, r25
 c6e:	b7 51       	subi	r27, 0x17	; 23
 c70:	a0 f0       	brcs	.+40     	; 0xc9a <__fixunssfsi+0x38>
 c72:	d1 f0       	breq	.+52     	; 0xca8 <__fixunssfsi+0x46>
 c74:	66 0f       	add	r22, r22
 c76:	77 1f       	adc	r23, r23
 c78:	88 1f       	adc	r24, r24
 c7a:	99 1f       	adc	r25, r25
 c7c:	1a f0       	brmi	.+6      	; 0xc84 <__fixunssfsi+0x22>
 c7e:	ba 95       	dec	r27
 c80:	c9 f7       	brne	.-14     	; 0xc74 <__fixunssfsi+0x12>
 c82:	12 c0       	rjmp	.+36     	; 0xca8 <__fixunssfsi+0x46>
 c84:	b1 30       	cpi	r27, 0x01	; 1
 c86:	81 f0       	breq	.+32     	; 0xca8 <__fixunssfsi+0x46>
 c88:	86 d0       	rcall	.+268    	; 0xd96 <__fp_zero>
 c8a:	b1 e0       	ldi	r27, 0x01	; 1
 c8c:	08 95       	ret
 c8e:	83 c0       	rjmp	.+262    	; 0xd96 <__fp_zero>
 c90:	67 2f       	mov	r22, r23
 c92:	78 2f       	mov	r23, r24
 c94:	88 27       	eor	r24, r24
 c96:	b8 5f       	subi	r27, 0xF8	; 248
 c98:	39 f0       	breq	.+14     	; 0xca8 <__fixunssfsi+0x46>
 c9a:	b9 3f       	cpi	r27, 0xF9	; 249
 c9c:	cc f3       	brlt	.-14     	; 0xc90 <__fixunssfsi+0x2e>
 c9e:	86 95       	lsr	r24
 ca0:	77 95       	ror	r23
 ca2:	67 95       	ror	r22
 ca4:	b3 95       	inc	r27
 ca6:	d9 f7       	brne	.-10     	; 0xc9e <__fixunssfsi+0x3c>
 ca8:	3e f4       	brtc	.+14     	; 0xcb8 <__fixunssfsi+0x56>
 caa:	90 95       	com	r25
 cac:	80 95       	com	r24
 cae:	70 95       	com	r23
 cb0:	61 95       	neg	r22
 cb2:	7f 4f       	sbci	r23, 0xFF	; 255
 cb4:	8f 4f       	sbci	r24, 0xFF	; 255
 cb6:	9f 4f       	sbci	r25, 0xFF	; 255
 cb8:	08 95       	ret

00000cba <__fp_cmp>:
 cba:	99 0f       	add	r25, r25
 cbc:	00 08       	sbc	r0, r0
 cbe:	55 0f       	add	r21, r21
 cc0:	aa 0b       	sbc	r26, r26
 cc2:	e0 e8       	ldi	r30, 0x80	; 128
 cc4:	fe ef       	ldi	r31, 0xFE	; 254
 cc6:	16 16       	cp	r1, r22
 cc8:	17 06       	cpc	r1, r23
 cca:	e8 07       	cpc	r30, r24
 ccc:	f9 07       	cpc	r31, r25
 cce:	c0 f0       	brcs	.+48     	; 0xd00 <__fp_cmp+0x46>
 cd0:	12 16       	cp	r1, r18
 cd2:	13 06       	cpc	r1, r19
 cd4:	e4 07       	cpc	r30, r20
 cd6:	f5 07       	cpc	r31, r21
 cd8:	98 f0       	brcs	.+38     	; 0xd00 <__fp_cmp+0x46>
 cda:	62 1b       	sub	r22, r18
 cdc:	73 0b       	sbc	r23, r19
 cde:	84 0b       	sbc	r24, r20
 ce0:	95 0b       	sbc	r25, r21
 ce2:	39 f4       	brne	.+14     	; 0xcf2 <__fp_cmp+0x38>
 ce4:	0a 26       	eor	r0, r26
 ce6:	61 f0       	breq	.+24     	; 0xd00 <__fp_cmp+0x46>
 ce8:	23 2b       	or	r18, r19
 cea:	24 2b       	or	r18, r20
 cec:	25 2b       	or	r18, r21
 cee:	21 f4       	brne	.+8      	; 0xcf8 <__fp_cmp+0x3e>
 cf0:	08 95       	ret
 cf2:	0a 26       	eor	r0, r26
 cf4:	09 f4       	brne	.+2      	; 0xcf8 <__fp_cmp+0x3e>
 cf6:	a1 40       	sbci	r26, 0x01	; 1
 cf8:	a6 95       	lsr	r26
 cfa:	8f ef       	ldi	r24, 0xFF	; 255
 cfc:	81 1d       	adc	r24, r1
 cfe:	81 1d       	adc	r24, r1
 d00:	08 95       	ret

00000d02 <__fp_inf>:
 d02:	97 f9       	bld	r25, 7
 d04:	9f 67       	ori	r25, 0x7F	; 127
 d06:	80 e8       	ldi	r24, 0x80	; 128
 d08:	70 e0       	ldi	r23, 0x00	; 0
 d0a:	60 e0       	ldi	r22, 0x00	; 0
 d0c:	08 95       	ret

00000d0e <__fp_nan>:
 d0e:	9f ef       	ldi	r25, 0xFF	; 255
 d10:	80 ec       	ldi	r24, 0xC0	; 192
 d12:	08 95       	ret

00000d14 <__fp_pscA>:
 d14:	00 24       	eor	r0, r0
 d16:	0a 94       	dec	r0
 d18:	16 16       	cp	r1, r22
 d1a:	17 06       	cpc	r1, r23
 d1c:	18 06       	cpc	r1, r24
 d1e:	09 06       	cpc	r0, r25
 d20:	08 95       	ret

00000d22 <__fp_pscB>:
 d22:	00 24       	eor	r0, r0
 d24:	0a 94       	dec	r0
 d26:	12 16       	cp	r1, r18
 d28:	13 06       	cpc	r1, r19
 d2a:	14 06       	cpc	r1, r20
 d2c:	05 06       	cpc	r0, r21
 d2e:	08 95       	ret

00000d30 <__fp_round>:
 d30:	09 2e       	mov	r0, r25
 d32:	03 94       	inc	r0
 d34:	00 0c       	add	r0, r0
 d36:	11 f4       	brne	.+4      	; 0xd3c <__fp_round+0xc>
 d38:	88 23       	and	r24, r24
 d3a:	52 f0       	brmi	.+20     	; 0xd50 <__fp_round+0x20>
 d3c:	bb 0f       	add	r27, r27
 d3e:	40 f4       	brcc	.+16     	; 0xd50 <__fp_round+0x20>
 d40:	bf 2b       	or	r27, r31
 d42:	11 f4       	brne	.+4      	; 0xd48 <__fp_round+0x18>
 d44:	60 ff       	sbrs	r22, 0
 d46:	04 c0       	rjmp	.+8      	; 0xd50 <__fp_round+0x20>
 d48:	6f 5f       	subi	r22, 0xFF	; 255
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	8f 4f       	sbci	r24, 0xFF	; 255
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	08 95       	ret

00000d52 <__fp_split3>:
 d52:	57 fd       	sbrc	r21, 7
 d54:	90 58       	subi	r25, 0x80	; 128
 d56:	44 0f       	add	r20, r20
 d58:	55 1f       	adc	r21, r21
 d5a:	59 f0       	breq	.+22     	; 0xd72 <__fp_splitA+0x10>
 d5c:	5f 3f       	cpi	r21, 0xFF	; 255
 d5e:	71 f0       	breq	.+28     	; 0xd7c <__fp_splitA+0x1a>
 d60:	47 95       	ror	r20

00000d62 <__fp_splitA>:
 d62:	88 0f       	add	r24, r24
 d64:	97 fb       	bst	r25, 7
 d66:	99 1f       	adc	r25, r25
 d68:	61 f0       	breq	.+24     	; 0xd82 <__fp_splitA+0x20>
 d6a:	9f 3f       	cpi	r25, 0xFF	; 255
 d6c:	79 f0       	breq	.+30     	; 0xd8c <__fp_splitA+0x2a>
 d6e:	87 95       	ror	r24
 d70:	08 95       	ret
 d72:	12 16       	cp	r1, r18
 d74:	13 06       	cpc	r1, r19
 d76:	14 06       	cpc	r1, r20
 d78:	55 1f       	adc	r21, r21
 d7a:	f2 cf       	rjmp	.-28     	; 0xd60 <__fp_split3+0xe>
 d7c:	46 95       	lsr	r20
 d7e:	f1 df       	rcall	.-30     	; 0xd62 <__fp_splitA>
 d80:	08 c0       	rjmp	.+16     	; 0xd92 <__fp_splitA+0x30>
 d82:	16 16       	cp	r1, r22
 d84:	17 06       	cpc	r1, r23
 d86:	18 06       	cpc	r1, r24
 d88:	99 1f       	adc	r25, r25
 d8a:	f1 cf       	rjmp	.-30     	; 0xd6e <__fp_splitA+0xc>
 d8c:	86 95       	lsr	r24
 d8e:	71 05       	cpc	r23, r1
 d90:	61 05       	cpc	r22, r1
 d92:	08 94       	sec
 d94:	08 95       	ret

00000d96 <__fp_zero>:
 d96:	e8 94       	clt

00000d98 <__fp_szero>:
 d98:	bb 27       	eor	r27, r27
 d9a:	66 27       	eor	r22, r22
 d9c:	77 27       	eor	r23, r23
 d9e:	cb 01       	movw	r24, r22
 da0:	97 f9       	bld	r25, 7
 da2:	08 95       	ret

00000da4 <__gesf2>:
 da4:	8a df       	rcall	.-236    	; 0xcba <__fp_cmp>
 da6:	08 f4       	brcc	.+2      	; 0xdaa <__gesf2+0x6>
 da8:	8f ef       	ldi	r24, 0xFF	; 255
 daa:	08 95       	ret

00000dac <__mulsf3>:
 dac:	0b d0       	rcall	.+22     	; 0xdc4 <__mulsf3x>
 dae:	c0 cf       	rjmp	.-128    	; 0xd30 <__fp_round>
 db0:	b1 df       	rcall	.-158    	; 0xd14 <__fp_pscA>
 db2:	28 f0       	brcs	.+10     	; 0xdbe <__mulsf3+0x12>
 db4:	b6 df       	rcall	.-148    	; 0xd22 <__fp_pscB>
 db6:	18 f0       	brcs	.+6      	; 0xdbe <__mulsf3+0x12>
 db8:	95 23       	and	r25, r21
 dba:	09 f0       	breq	.+2      	; 0xdbe <__mulsf3+0x12>
 dbc:	a2 cf       	rjmp	.-188    	; 0xd02 <__fp_inf>
 dbe:	a7 cf       	rjmp	.-178    	; 0xd0e <__fp_nan>
 dc0:	11 24       	eor	r1, r1
 dc2:	ea cf       	rjmp	.-44     	; 0xd98 <__fp_szero>

00000dc4 <__mulsf3x>:
 dc4:	c6 df       	rcall	.-116    	; 0xd52 <__fp_split3>
 dc6:	a0 f3       	brcs	.-24     	; 0xdb0 <__mulsf3+0x4>

00000dc8 <__mulsf3_pse>:
 dc8:	95 9f       	mul	r25, r21
 dca:	d1 f3       	breq	.-12     	; 0xdc0 <__mulsf3+0x14>
 dcc:	95 0f       	add	r25, r21
 dce:	50 e0       	ldi	r21, 0x00	; 0
 dd0:	55 1f       	adc	r21, r21
 dd2:	62 9f       	mul	r22, r18
 dd4:	f0 01       	movw	r30, r0
 dd6:	72 9f       	mul	r23, r18
 dd8:	bb 27       	eor	r27, r27
 dda:	f0 0d       	add	r31, r0
 ddc:	b1 1d       	adc	r27, r1
 dde:	63 9f       	mul	r22, r19
 de0:	aa 27       	eor	r26, r26
 de2:	f0 0d       	add	r31, r0
 de4:	b1 1d       	adc	r27, r1
 de6:	aa 1f       	adc	r26, r26
 de8:	64 9f       	mul	r22, r20
 dea:	66 27       	eor	r22, r22
 dec:	b0 0d       	add	r27, r0
 dee:	a1 1d       	adc	r26, r1
 df0:	66 1f       	adc	r22, r22
 df2:	82 9f       	mul	r24, r18
 df4:	22 27       	eor	r18, r18
 df6:	b0 0d       	add	r27, r0
 df8:	a1 1d       	adc	r26, r1
 dfa:	62 1f       	adc	r22, r18
 dfc:	73 9f       	mul	r23, r19
 dfe:	b0 0d       	add	r27, r0
 e00:	a1 1d       	adc	r26, r1
 e02:	62 1f       	adc	r22, r18
 e04:	83 9f       	mul	r24, r19
 e06:	a0 0d       	add	r26, r0
 e08:	61 1d       	adc	r22, r1
 e0a:	22 1f       	adc	r18, r18
 e0c:	74 9f       	mul	r23, r20
 e0e:	33 27       	eor	r19, r19
 e10:	a0 0d       	add	r26, r0
 e12:	61 1d       	adc	r22, r1
 e14:	23 1f       	adc	r18, r19
 e16:	84 9f       	mul	r24, r20
 e18:	60 0d       	add	r22, r0
 e1a:	21 1d       	adc	r18, r1
 e1c:	82 2f       	mov	r24, r18
 e1e:	76 2f       	mov	r23, r22
 e20:	6a 2f       	mov	r22, r26
 e22:	11 24       	eor	r1, r1
 e24:	9f 57       	subi	r25, 0x7F	; 127
 e26:	50 40       	sbci	r21, 0x00	; 0
 e28:	8a f0       	brmi	.+34     	; 0xe4c <__mulsf3_pse+0x84>
 e2a:	e1 f0       	breq	.+56     	; 0xe64 <__mulsf3_pse+0x9c>
 e2c:	88 23       	and	r24, r24
 e2e:	4a f0       	brmi	.+18     	; 0xe42 <__mulsf3_pse+0x7a>
 e30:	ee 0f       	add	r30, r30
 e32:	ff 1f       	adc	r31, r31
 e34:	bb 1f       	adc	r27, r27
 e36:	66 1f       	adc	r22, r22
 e38:	77 1f       	adc	r23, r23
 e3a:	88 1f       	adc	r24, r24
 e3c:	91 50       	subi	r25, 0x01	; 1
 e3e:	50 40       	sbci	r21, 0x00	; 0
 e40:	a9 f7       	brne	.-22     	; 0xe2c <__mulsf3_pse+0x64>
 e42:	9e 3f       	cpi	r25, 0xFE	; 254
 e44:	51 05       	cpc	r21, r1
 e46:	70 f0       	brcs	.+28     	; 0xe64 <__mulsf3_pse+0x9c>
 e48:	5c cf       	rjmp	.-328    	; 0xd02 <__fp_inf>
 e4a:	a6 cf       	rjmp	.-180    	; 0xd98 <__fp_szero>
 e4c:	5f 3f       	cpi	r21, 0xFF	; 255
 e4e:	ec f3       	brlt	.-6      	; 0xe4a <__mulsf3_pse+0x82>
 e50:	98 3e       	cpi	r25, 0xE8	; 232
 e52:	dc f3       	brlt	.-10     	; 0xe4a <__mulsf3_pse+0x82>
 e54:	86 95       	lsr	r24
 e56:	77 95       	ror	r23
 e58:	67 95       	ror	r22
 e5a:	b7 95       	ror	r27
 e5c:	f7 95       	ror	r31
 e5e:	e7 95       	ror	r30
 e60:	9f 5f       	subi	r25, 0xFF	; 255
 e62:	c1 f7       	brne	.-16     	; 0xe54 <__mulsf3_pse+0x8c>
 e64:	fe 2b       	or	r31, r30
 e66:	88 0f       	add	r24, r24
 e68:	91 1d       	adc	r25, r1
 e6a:	96 95       	lsr	r25
 e6c:	87 95       	ror	r24
 e6e:	97 f9       	bld	r25, 7
 e70:	08 95       	ret

00000e72 <__tablejump2__>:
 e72:	ee 0f       	add	r30, r30
 e74:	ff 1f       	adc	r31, r31
 e76:	00 24       	eor	r0, r0
 e78:	00 1c       	adc	r0, r0
 e7a:	0b be       	out	0x3b, r0	; 59
 e7c:	07 90       	elpm	r0, Z+
 e7e:	f6 91       	elpm	r31, Z
 e80:	e0 2d       	mov	r30, r0
 e82:	09 94       	ijmp

00000e84 <_exit>:
 e84:	f8 94       	cli

00000e86 <__stop_program>:
 e86:	ff cf       	rjmp	.-2      	; 0xe86 <__stop_program>
