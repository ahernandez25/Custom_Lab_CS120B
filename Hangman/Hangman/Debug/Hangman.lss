
Hangman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000eba  00800100  0000167a  0000170e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000167a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800fba  00800fba  000025c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00002638  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002496  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba5  00000000  00000000  00004ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190d  00000000  00000000  0000588b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00007198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a62  00000000  00000000  00007584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001208  00000000  00000000  00007fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000091ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
       2:	00 00       	nop
       4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c0       	rjmp	.+314    	; 0x164 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c0       	rjmp	.+310    	; 0x164 <__bad_interrupt>
      2e:	00 00       	nop
      30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
      32:	00 00       	nop
      34:	8d c1       	rjmp	.+794    	; 0x350 <__vector_13>
      36:	00 00       	nop
      38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c0       	rjmp	.+286    	; 0x164 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
      52:	00 00       	nop
      54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
      56:	00 00       	nop
      58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c0       	rjmp	.+262    	; 0x164 <__bad_interrupt>
      5e:	00 00       	nop
      60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
      62:	00 00       	nop
      64:	7f c0       	rjmp	.+254    	; 0x164 <__bad_interrupt>
      66:	00 00       	nop
      68:	7d c0       	rjmp	.+250    	; 0x164 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c0       	rjmp	.+238    	; 0x164 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c0       	rjmp	.+234    	; 0x164 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c0       	rjmp	.+230    	; 0x164 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c0       	rjmp	.+226    	; 0x164 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c0       	rjmp	.+222    	; 0x164 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c0       	rjmp	.+218    	; 0x164 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 02       	muls	r22, r19
      8e:	8c 03       	fmulsu	r16, r20
      90:	8c 03       	fmulsu	r16, r20
      92:	8c 03       	fmulsu	r16, r20
      94:	8c 03       	fmulsu	r16, r20
      96:	8c 03       	fmulsu	r16, r20
      98:	8c 03       	fmulsu	r16, r20
      9a:	8c 03       	fmulsu	r16, r20
      9c:	8c 03       	fmulsu	r16, r20
      9e:	8c 03       	fmulsu	r16, r20
      a0:	8c 03       	fmulsu	r16, r20
      a2:	8c 03       	fmulsu	r16, r20
      a4:	8c 03       	fmulsu	r16, r20
      a6:	8c 03       	fmulsu	r16, r20
      a8:	8c 03       	fmulsu	r16, r20
      aa:	8c 03       	fmulsu	r16, r20
      ac:	8c 03       	fmulsu	r16, r20
      ae:	8c 03       	fmulsu	r16, r20
      b0:	8c 03       	fmulsu	r16, r20
      b2:	8c 03       	fmulsu	r16, r20
      b4:	8c 03       	fmulsu	r16, r20
      b6:	8c 03       	fmulsu	r16, r20
      b8:	8c 03       	fmulsu	r16, r20
      ba:	8c 03       	fmulsu	r16, r20
      bc:	8c 03       	fmulsu	r16, r20
      be:	8c 03       	fmulsu	r16, r20
      c0:	8c 03       	fmulsu	r16, r20
      c2:	8c 03       	fmulsu	r16, r20
      c4:	8c 03       	fmulsu	r16, r20
      c6:	8c 03       	fmulsu	r16, r20
      c8:	8c 03       	fmulsu	r16, r20
      ca:	8c 03       	fmulsu	r16, r20
      cc:	8c 03       	fmulsu	r16, r20
      ce:	8c 03       	fmulsu	r16, r20
      d0:	8c 03       	fmulsu	r16, r20
      d2:	8c 03       	fmulsu	r16, r20
      d4:	8c 03       	fmulsu	r16, r20
      d6:	8c 03       	fmulsu	r16, r20
      d8:	8c 03       	fmulsu	r16, r20
      da:	8c 03       	fmulsu	r16, r20
      dc:	8c 03       	fmulsu	r16, r20
      de:	8c 03       	fmulsu	r16, r20
      e0:	8c 03       	fmulsu	r16, r20
      e2:	8c 03       	fmulsu	r16, r20
      e4:	8c 03       	fmulsu	r16, r20
      e6:	8c 03       	fmulsu	r16, r20
      e8:	8c 03       	fmulsu	r16, r20
      ea:	8c 03       	fmulsu	r16, r20
      ec:	8c 03       	fmulsu	r16, r20
      ee:	69 02       	muls	r22, r25
      f0:	6f 02       	muls	r22, r31
      f2:	92 02       	muls	r25, r18
      f4:	b5 02       	muls	r27, r21
      f6:	d8 02       	muls	r29, r24
      f8:	fb 02       	muls	r31, r27
      fa:	1e 03       	fmul	r17, r22
      fc:	41 03       	mulsu	r20, r17
      fe:	65 03       	mulsu	r22, r21
     100:	02 04       	cpc	r0, r2
     102:	0e 04       	cpc	r0, r14
     104:	2a 04       	cpc	r2, r10
     106:	46 04       	cpc	r4, r6
     108:	62 04       	cpc	r6, r2
     10a:	7e 04       	cpc	r7, r14
     10c:	9a 04       	cpc	r9, r10
     10e:	b4 04       	cpc	r11, r4
     110:	c7 04       	cpc	r12, r7
     112:	f2 04       	cpc	r15, r2
     114:	b8 06       	cpc	r11, r24
     116:	f6 06       	cpc	r15, r22
     118:	02 07       	cpc	r16, r18
     11a:	08 07       	cpc	r16, r24
     11c:	23 07       	cpc	r18, r19
     11e:	53 07       	cpc	r21, r19
     120:	72 07       	cpc	r23, r18
     122:	8a 07       	cpc	r24, r26
     124:	ba 07       	cpc	r27, r26

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d0 e4       	ldi	r29, 0x40	; 64
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	1f e0       	ldi	r17, 0x0F	; 15
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	ea e7       	ldi	r30, 0x7A	; 122
     13a:	f6 e1       	ldi	r31, 0x16	; 22
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0b bf       	out	0x3b, r16	; 59
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x14>
     142:	07 90       	elpm	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	aa 3b       	cpi	r26, 0xBA	; 186
     148:	b1 07       	cpc	r27, r17
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0x10>

0000014c <__do_clear_bss>:
     14c:	20 e1       	ldi	r18, 0x10	; 16
     14e:	aa eb       	ldi	r26, 0xBA	; 186
     150:	bf e0       	ldi	r27, 0x0F	; 15
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
     156:	a4 31       	cpi	r26, 0x14	; 20
     158:	b2 07       	cpc	r27, r18
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
     15c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <main>
     160:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <_exit>

00000164 <__bad_interrupt>:
     164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <LT_Tick>:
	set_PWM(0);
}

void PWM_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	91 05       	cpc	r25, r1
     16a:	a9 f0       	breq	.+42     	; 0x196 <LT_Tick+0x30>
     16c:	1c f4       	brge	.+6      	; 0x174 <LT_Tick+0xe>
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	49 f0       	breq	.+18     	; 0x184 <LT_Tick+0x1e>
     172:	24 c0       	rjmp	.+72     	; 0x1bc <LT_Tick+0x56>
     174:	82 30       	cpi	r24, 0x02	; 2
     176:	91 05       	cpc	r25, r1
     178:	99 f0       	breq	.+38     	; 0x1a0 <LT_Tick+0x3a>
     17a:	83 30       	cpi	r24, 0x03	; 3
     17c:	91 05       	cpc	r25, r1
     17e:	09 f4       	brne	.+2      	; 0x182 <LT_Tick+0x1c>
     180:	57 c0       	rjmp	.+174    	; 0x230 <LT_Tick+0xca>
     182:	1c c0       	rjmp	.+56     	; 0x1bc <LT_Tick+0x56>
     184:	10 92 0e 10 	sts	0x100E, r1	; 0x80100e <incrementTime+0x1>
     188:	10 92 0d 10 	sts	0x100D, r1	; 0x80100d <incrementTime>
     18c:	10 92 06 10 	sts	0x1006, r1	; 0x801006 <startTimer>
     190:	10 92 10 10 	sts	0x1010, r1	; 0x801010 <stopTimer>
     194:	4d c0       	rjmp	.+154    	; 0x230 <LT_Tick+0xca>
     196:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <startTimer>
     19a:	81 11       	cpse	r24, r1
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <LT_Tick+0x64>
     19e:	48 c0       	rjmp	.+144    	; 0x230 <LT_Tick+0xca>
     1a0:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <startTimer>
     1a4:	88 23       	and	r24, r24
     1a6:	29 f0       	breq	.+10     	; 0x1b2 <LT_Tick+0x4c>
     1a8:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <stopTimer>
     1ac:	88 23       	and	r24, r24
     1ae:	69 f0       	breq	.+26     	; 0x1ca <LT_Tick+0x64>
     1b0:	1c c0       	rjmp	.+56     	; 0x1ea <LT_Tick+0x84>
     1b2:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <stopTimer>
     1b6:	88 23       	and	r24, r24
     1b8:	81 f1       	breq	.+96     	; 0x21a <LT_Tick+0xb4>
     1ba:	07 c0       	rjmp	.+14     	; 0x1ca <LT_Tick+0x64>
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	91 05       	cpc	r25, r1
     1c0:	21 f0       	breq	.+8      	; 0x1ca <LT_Tick+0x64>
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	91 05       	cpc	r25, r1
     1c6:	69 f0       	breq	.+26     	; 0x1e2 <LT_Tick+0x7c>
     1c8:	08 95       	ret
     1ca:	80 91 0d 10 	lds	r24, 0x100D	; 0x80100d <incrementTime>
     1ce:	90 91 0e 10 	lds	r25, 0x100E	; 0x80100e <incrementTime+0x1>
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	90 93 0e 10 	sts	0x100E, r25	; 0x80100e <incrementTime+0x1>
     1d8:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <incrementTime>
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	08 95       	ret
     1e2:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <startTimer>
     1e6:	88 23       	and	r24, r24
     1e8:	c1 f0       	breq	.+48     	; 0x21a <LT_Tick+0xb4>
     1ea:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <stopTimer>
     1ee:	88 23       	and	r24, r24
     1f0:	a1 f0       	breq	.+40     	; 0x21a <LT_Tick+0xb4>
     1f2:	8e e2       	ldi	r24, 0x2E	; 46
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_word>
     1fa:	80 93 11 10 	sts	0x1011, r24	; 0x801011 <prevHighScore>
     1fe:	60 91 0d 10 	lds	r22, 0x100D	; 0x80100d <incrementTime>
     202:	70 91 0e 10 	lds	r23, 0x100E	; 0x80100e <incrementTime+0x1>
     206:	99 27       	eor	r25, r25
     208:	68 17       	cp	r22, r24
     20a:	79 07       	cpc	r23, r25
     20c:	30 f4       	brcc	.+12     	; 0x21a <LT_Tick+0xb4>
     20e:	76 95       	lsr	r23
     210:	67 95       	ror	r22
     212:	8e e2       	ldi	r24, 0x2E	; 46
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 15 0b 	call	0x162a	; 0x162a <eeprom_update_word>
     21a:	10 92 0e 10 	sts	0x100E, r1	; 0x80100e <incrementTime+0x1>
     21e:	10 92 0d 10 	sts	0x100D, r1	; 0x80100d <incrementTime>
     222:	10 92 06 10 	sts	0x1006, r1	; 0x801006 <startTimer>
     226:	10 92 10 10 	sts	0x1010, r1	; 0x801010 <stopTimer>
     22a:	83 e0       	ldi	r24, 0x03	; 3
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	08 95       	ret
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	08 95       	ret

00000236 <delay_ms>:
     236:	18 16       	cp	r1, r24
     238:	19 06       	cpc	r1, r25
     23a:	5c f0       	brlt	.+22     	; 0x252 <delay_ms+0x1c>
     23c:	08 95       	ret
     23e:	00 00       	nop
     240:	21 50       	subi	r18, 0x01	; 1
     242:	31 09       	sbc	r19, r1
     244:	e1 f7       	brne	.-8      	; 0x23e <delay_ms+0x8>
     246:	4f 5f       	subi	r20, 0xFF	; 255
     248:	5f 4f       	sbci	r21, 0xFF	; 255
     24a:	84 17       	cp	r24, r20
     24c:	95 07       	cpc	r25, r21
     24e:	19 f4       	brne	.+6      	; 0x256 <delay_ms+0x20>
     250:	08 95       	ret
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	27 e0       	ldi	r18, 0x07	; 7
     258:	33 e0       	ldi	r19, 0x03	; 3
     25a:	f1 cf       	rjmp	.-30     	; 0x23e <delay_ms+0x8>

0000025c <LCD_WriteCommand>:
     25c:	10 98       	cbi	0x02, 0	; 2
     25e:	8b b9       	out	0x0b, r24	; 11
     260:	11 9a       	sbi	0x02, 1	; 2
     262:	00 00       	nop
     264:	11 98       	cbi	0x02, 1	; 2
     266:	82 e0       	ldi	r24, 0x02	; 2
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	e5 cf       	rjmp	.-54     	; 0x236 <delay_ms>
     26c:	08 95       	ret

0000026e <LCD_ClearScreen>:
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	f5 cf       	rjmp	.-22     	; 0x25c <LCD_WriteCommand>
     272:	08 95       	ret

00000274 <LCD_Cursor>:
     274:	81 31       	cpi	r24, 0x11	; 17
     276:	18 f4       	brcc	.+6      	; 0x27e <LCD_Cursor+0xa>
     278:	81 58       	subi	r24, 0x81	; 129
     27a:	f0 cf       	rjmp	.-32     	; 0x25c <LCD_WriteCommand>
     27c:	08 95       	ret
     27e:	81 55       	subi	r24, 0x51	; 81
     280:	ed cf       	rjmp	.-38     	; 0x25c <LCD_WriteCommand>
     282:	08 95       	ret

00000284 <LCD_init>:
     284:	84 e6       	ldi	r24, 0x64	; 100
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	d6 df       	rcall	.-84     	; 0x236 <delay_ms>
     28a:	88 e3       	ldi	r24, 0x38	; 56
     28c:	e7 df       	rcall	.-50     	; 0x25c <LCD_WriteCommand>
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	e5 df       	rcall	.-54     	; 0x25c <LCD_WriteCommand>
     292:	8f e0       	ldi	r24, 0x0F	; 15
     294:	e3 df       	rcall	.-58     	; 0x25c <LCD_WriteCommand>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	e1 df       	rcall	.-62     	; 0x25c <LCD_WriteCommand>
     29a:	8a e0       	ldi	r24, 0x0A	; 10
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	cb cf       	rjmp	.-106    	; 0x236 <delay_ms>
     2a0:	08 95       	ret

000002a2 <LCD_WriteData>:
     2a2:	10 9a       	sbi	0x02, 0	; 2
     2a4:	8b b9       	out	0x0b, r24	; 11
     2a6:	11 9a       	sbi	0x02, 1	; 2
     2a8:	00 00       	nop
     2aa:	11 98       	cbi	0x02, 1	; 2
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	c2 cf       	rjmp	.-124    	; 0x236 <delay_ms>
     2b2:	08 95       	ret

000002b4 <LCD_DisplayString>:
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	18 2f       	mov	r17, r24
     2be:	eb 01       	movw	r28, r22
     2c0:	d6 df       	rcall	.-84     	; 0x26e <LCD_ClearScreen>
     2c2:	88 81       	ld	r24, Y
     2c4:	88 23       	and	r24, r24
     2c6:	51 f0       	breq	.+20     	; 0x2dc <LCD_DisplayString+0x28>
     2c8:	01 e0       	ldi	r16, 0x01	; 1
     2ca:	01 0f       	add	r16, r17
     2cc:	81 2f       	mov	r24, r17
     2ce:	d2 df       	rcall	.-92     	; 0x274 <LCD_Cursor>
     2d0:	89 91       	ld	r24, Y+
     2d2:	e7 df       	rcall	.-50     	; 0x2a2 <LCD_WriteData>
     2d4:	10 2f       	mov	r17, r16
     2d6:	88 81       	ld	r24, Y
     2d8:	81 11       	cpse	r24, r1
     2da:	f6 cf       	rjmp	.-20     	; 0x2c8 <LCD_DisplayString+0x14>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <TimerSet>:
     2e6:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <_avr_timer_M>
     2ea:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <_avr_timer_M+0x1>
     2ee:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <_avr_timer_M+0x2>
     2f2:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <_avr_timer_M+0x3>
     2f6:	60 93 01 10 	sts	0x1001, r22	; 0x801001 <_avr_timer_cntcurr>
     2fa:	70 93 02 10 	sts	0x1002, r23	; 0x801002 <_avr_timer_cntcurr+0x1>
     2fe:	80 93 03 10 	sts	0x1003, r24	; 0x801003 <_avr_timer_cntcurr+0x2>
     302:	90 93 04 10 	sts	0x1004, r25	; 0x801004 <_avr_timer_cntcurr+0x3>
     306:	08 95       	ret

00000308 <TimerOn>:
     308:	8b e0       	ldi	r24, 0x0B	; 11
     30a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     30e:	8d e7       	ldi	r24, 0x7D	; 125
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     316:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     320:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     324:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     328:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_avr_timer_M>
     32c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_avr_timer_M+0x1>
     330:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <_avr_timer_M+0x2>
     334:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <_avr_timer_M+0x3>
     338:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <_avr_timer_cntcurr>
     33c:	90 93 02 10 	sts	0x1002, r25	; 0x801002 <_avr_timer_cntcurr+0x1>
     340:	a0 93 03 10 	sts	0x1003, r26	; 0x801003 <_avr_timer_cntcurr+0x2>
     344:	b0 93 04 10 	sts	0x1004, r27	; 0x801004 <_avr_timer_cntcurr+0x3>
     348:	8f b7       	in	r24, 0x3f	; 63
     34a:	80 68       	ori	r24, 0x80	; 128
     34c:	8f bf       	out	0x3f, r24	; 63
     34e:	08 95       	ret

00000350 <__vector_13>:
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	af 93       	push	r26
     360:	bf 93       	push	r27
     362:	80 91 01 10 	lds	r24, 0x1001	; 0x801001 <_avr_timer_cntcurr>
     366:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <_avr_timer_cntcurr+0x1>
     36a:	a0 91 03 10 	lds	r26, 0x1003	; 0x801003 <_avr_timer_cntcurr+0x2>
     36e:	b0 91 04 10 	lds	r27, 0x1004	; 0x801004 <_avr_timer_cntcurr+0x3>
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	a1 09       	sbc	r26, r1
     376:	b1 09       	sbc	r27, r1
     378:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <_avr_timer_cntcurr>
     37c:	90 93 02 10 	sts	0x1002, r25	; 0x801002 <_avr_timer_cntcurr+0x1>
     380:	a0 93 03 10 	sts	0x1003, r26	; 0x801003 <_avr_timer_cntcurr+0x2>
     384:	b0 93 04 10 	sts	0x1004, r27	; 0x801004 <_avr_timer_cntcurr+0x3>
     388:	89 2b       	or	r24, r25
     38a:	8a 2b       	or	r24, r26
     38c:	8b 2b       	or	r24, r27
     38e:	99 f4       	brne	.+38     	; 0x3b6 <__vector_13+0x66>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 05 10 	sts	0x1005, r24	; 0x801005 <TimerFlag>
     396:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_avr_timer_M>
     39a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_avr_timer_M+0x1>
     39e:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <_avr_timer_M+0x2>
     3a2:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <_avr_timer_M+0x3>
     3a6:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <_avr_timer_cntcurr>
     3aa:	90 93 02 10 	sts	0x1002, r25	; 0x801002 <_avr_timer_cntcurr+0x1>
     3ae:	a0 93 03 10 	sts	0x1003, r26	; 0x801003 <_avr_timer_cntcurr+0x2>
     3b2:	b0 93 04 10 	sts	0x1004, r27	; 0x801004 <_avr_timer_cntcurr+0x3>
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <GetKeypadKey>:
     3c8:	8f ee       	ldi	r24, 0xEF	; 239
     3ca:	88 b9       	out	0x08, r24	; 8
     3cc:	00 00       	nop
     3ce:	30 9b       	sbis	0x06, 0	; 6
     3d0:	2e c0       	rjmp	.+92     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3d2:	31 9b       	sbis	0x06, 1	; 6
     3d4:	2e c0       	rjmp	.+92     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     3d6:	32 9b       	sbis	0x06, 2	; 6
     3d8:	2e c0       	rjmp	.+92     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     3da:	33 9b       	sbis	0x06, 3	; 6
     3dc:	2e c0       	rjmp	.+92     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3de:	8f ed       	ldi	r24, 0xDF	; 223
     3e0:	88 b9       	out	0x08, r24	; 8
     3e2:	00 00       	nop
     3e4:	30 9b       	sbis	0x06, 0	; 6
     3e6:	2b c0       	rjmp	.+86     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3e8:	31 9b       	sbis	0x06, 1	; 6
     3ea:	2b c0       	rjmp	.+86     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3ec:	32 9b       	sbis	0x06, 2	; 6
     3ee:	2b c0       	rjmp	.+86     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3f0:	33 9b       	sbis	0x06, 3	; 6
     3f2:	2b c0       	rjmp	.+86     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3f4:	8f eb       	ldi	r24, 0xBF	; 191
     3f6:	88 b9       	out	0x08, r24	; 8
     3f8:	00 00       	nop
     3fa:	30 9b       	sbis	0x06, 0	; 6
     3fc:	28 c0       	rjmp	.+80     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3fe:	31 9b       	sbis	0x06, 1	; 6
     400:	28 c0       	rjmp	.+80     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     402:	32 9b       	sbis	0x06, 2	; 6
     404:	28 c0       	rjmp	.+80     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     406:	33 9b       	sbis	0x06, 3	; 6
     408:	28 c0       	rjmp	.+80     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     40a:	8f e7       	ldi	r24, 0x7F	; 127
     40c:	88 b9       	out	0x08, r24	; 8
     40e:	00 00       	nop
     410:	30 9b       	sbis	0x06, 0	; 6
     412:	25 c0       	rjmp	.+74     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     414:	31 9b       	sbis	0x06, 1	; 6
     416:	25 c0       	rjmp	.+74     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     418:	32 9b       	sbis	0x06, 2	; 6
     41a:	25 c0       	rjmp	.+74     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     41c:	33 9b       	sbis	0x06, 3	; 6
     41e:	25 c0       	rjmp	.+74     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     420:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <click>
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	08 95       	ret
     42e:	81 e3       	ldi	r24, 0x31	; 49
     430:	08 95       	ret
     432:	84 e3       	ldi	r24, 0x34	; 52
     434:	08 95       	ret
     436:	87 e3       	ldi	r24, 0x37	; 55
     438:	08 95       	ret
     43a:	8a e2       	ldi	r24, 0x2A	; 42
     43c:	08 95       	ret
     43e:	82 e3       	ldi	r24, 0x32	; 50
     440:	08 95       	ret
     442:	85 e3       	ldi	r24, 0x35	; 53
     444:	08 95       	ret
     446:	88 e3       	ldi	r24, 0x38	; 56
     448:	08 95       	ret
     44a:	80 e3       	ldi	r24, 0x30	; 48
     44c:	08 95       	ret
     44e:	83 e3       	ldi	r24, 0x33	; 51
     450:	08 95       	ret
     452:	86 e3       	ldi	r24, 0x36	; 54
     454:	08 95       	ret
     456:	89 e3       	ldi	r24, 0x39	; 57
     458:	08 95       	ret
     45a:	83 e2       	ldi	r24, 0x23	; 35
     45c:	08 95       	ret
     45e:	81 e4       	ldi	r24, 0x41	; 65
     460:	08 95       	ret
     462:	82 e4       	ldi	r24, 0x42	; 66
     464:	08 95       	ret
     466:	83 e4       	ldi	r24, 0x43	; 67
     468:	08 95       	ret
     46a:	84 e4       	ldi	r24, 0x44	; 68
     46c:	08 95       	ret

0000046e <KeypadTick>:
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	ec 01       	movw	r28, r24
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	91 05       	cpc	r25, r1
     478:	c9 f0       	breq	.+50     	; 0x4ac <KeypadTick+0x3e>
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	91 05       	cpc	r25, r1
     47e:	31 f0       	breq	.+12     	; 0x48c <KeypadTick+0x1e>
     480:	89 2b       	or	r24, r25
     482:	21 f0       	breq	.+8      	; 0x48c <KeypadTick+0x1e>
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	80 93 0b 10 	sts	0x100B, r24	; 0x80100b <State>
     48a:	02 c0       	rjmp	.+4      	; 0x490 <KeypadTick+0x22>
     48c:	c1 e0       	ldi	r28, 0x01	; 1
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	c1 30       	cpi	r28, 0x01	; 1
     492:	d1 05       	cpc	r29, r1
     494:	39 f0       	breq	.+14     	; 0x4a4 <KeypadTick+0x36>
     496:	c2 30       	cpi	r28, 0x02	; 2
     498:	d1 05       	cpc	r29, r1
     49a:	41 f0       	breq	.+16     	; 0x4ac <KeypadTick+0x3e>
     49c:	20 97       	sbiw	r28, 0x00	; 0
     49e:	09 f4       	brne	.+2      	; 0x4a2 <KeypadTick+0x34>
     4a0:	55 c1       	rjmp	.+682    	; 0x74c <KeypadTick+0x2de>
     4a2:	36 c1       	rjmp	.+620    	; 0x710 <KeypadTick+0x2a2>
     4a4:	91 df       	rcall	.-222    	; 0x3c8 <GetKeypadKey>
     4a6:	80 93 07 10 	sts	0x1007, r24	; 0x801007 <x>
     4aa:	50 c1       	rjmp	.+672    	; 0x74c <KeypadTick+0x2de>
     4ac:	e0 91 07 10 	lds	r30, 0x1007	; 0x801007 <x>
     4b0:	8e 2f       	mov	r24, r30
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	8a 33       	cpi	r24, 0x3A	; 58
     4b6:	91 05       	cpc	r25, r1
     4b8:	08 f0       	brcs	.+2      	; 0x4bc <KeypadTick+0x4e>
     4ba:	2e c1       	rjmp	.+604    	; 0x718 <KeypadTick+0x2aa>
     4bc:	fc 01       	movw	r30, r24
     4be:	ea 5b       	subi	r30, 0xBA	; 186
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__tablejump2__>
     4c6:	80 e2       	ldi	r24, 0x20	; 32
     4c8:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     4cc:	c2 e0       	ldi	r28, 0x02	; 2
     4ce:	d0 e0       	ldi	r29, 0x00	; 0
     4d0:	3d c1       	rjmp	.+634    	; 0x74c <KeypadTick+0x2de>
     4d2:	80 e2       	ldi	r24, 0x20	; 32
     4d4:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     4d8:	c2 e0       	ldi	r28, 0x02	; 2
     4da:	d0 e0       	ldi	r29, 0x00	; 0
     4dc:	37 c1       	rjmp	.+622    	; 0x74c <KeypadTick+0x2de>
     4de:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     4e2:	8b ea       	ldi	r24, 0xAB	; 171
     4e4:	98 9f       	mul	r25, r24
     4e6:	81 2d       	mov	r24, r1
     4e8:	11 24       	eor	r1, r1
     4ea:	86 95       	lsr	r24
     4ec:	28 2f       	mov	r18, r24
     4ee:	22 0f       	add	r18, r18
     4f0:	82 0f       	add	r24, r18
     4f2:	98 1b       	sub	r25, r24
     4f4:	91 30       	cpi	r25, 0x01	; 1
     4f6:	31 f4       	brne	.+12     	; 0x504 <KeypadTick+0x96>
     4f8:	81 e4       	ldi	r24, 0x41	; 65
     4fa:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     4fe:	c2 e0       	ldi	r28, 0x02	; 2
     500:	d0 e0       	ldi	r29, 0x00	; 0
     502:	24 c1       	rjmp	.+584    	; 0x74c <KeypadTick+0x2de>
     504:	92 30       	cpi	r25, 0x02	; 2
     506:	31 f4       	brne	.+12     	; 0x514 <KeypadTick+0xa6>
     508:	82 e4       	ldi	r24, 0x42	; 66
     50a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     50e:	c2 e0       	ldi	r28, 0x02	; 2
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	1c c1       	rjmp	.+568    	; 0x74c <KeypadTick+0x2de>
     514:	91 11       	cpse	r25, r1
     516:	03 c1       	rjmp	.+518    	; 0x71e <KeypadTick+0x2b0>
     518:	83 e4       	ldi	r24, 0x43	; 67
     51a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     51e:	c2 e0       	ldi	r28, 0x02	; 2
     520:	d0 e0       	ldi	r29, 0x00	; 0
     522:	14 c1       	rjmp	.+552    	; 0x74c <KeypadTick+0x2de>
     524:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     528:	8b ea       	ldi	r24, 0xAB	; 171
     52a:	98 9f       	mul	r25, r24
     52c:	81 2d       	mov	r24, r1
     52e:	11 24       	eor	r1, r1
     530:	86 95       	lsr	r24
     532:	28 2f       	mov	r18, r24
     534:	22 0f       	add	r18, r18
     536:	82 0f       	add	r24, r18
     538:	98 1b       	sub	r25, r24
     53a:	91 30       	cpi	r25, 0x01	; 1
     53c:	31 f4       	brne	.+12     	; 0x54a <KeypadTick+0xdc>
     53e:	84 e4       	ldi	r24, 0x44	; 68
     540:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     544:	c2 e0       	ldi	r28, 0x02	; 2
     546:	d0 e0       	ldi	r29, 0x00	; 0
     548:	01 c1       	rjmp	.+514    	; 0x74c <KeypadTick+0x2de>
     54a:	92 30       	cpi	r25, 0x02	; 2
     54c:	31 f4       	brne	.+12     	; 0x55a <KeypadTick+0xec>
     54e:	85 e4       	ldi	r24, 0x45	; 69
     550:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     554:	c2 e0       	ldi	r28, 0x02	; 2
     556:	d0 e0       	ldi	r29, 0x00	; 0
     558:	f9 c0       	rjmp	.+498    	; 0x74c <KeypadTick+0x2de>
     55a:	91 11       	cpse	r25, r1
     55c:	e3 c0       	rjmp	.+454    	; 0x724 <KeypadTick+0x2b6>
     55e:	86 e4       	ldi	r24, 0x46	; 70
     560:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     564:	c2 e0       	ldi	r28, 0x02	; 2
     566:	d0 e0       	ldi	r29, 0x00	; 0
     568:	f1 c0       	rjmp	.+482    	; 0x74c <KeypadTick+0x2de>
     56a:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     56e:	8b ea       	ldi	r24, 0xAB	; 171
     570:	98 9f       	mul	r25, r24
     572:	81 2d       	mov	r24, r1
     574:	11 24       	eor	r1, r1
     576:	86 95       	lsr	r24
     578:	28 2f       	mov	r18, r24
     57a:	22 0f       	add	r18, r18
     57c:	82 0f       	add	r24, r18
     57e:	98 1b       	sub	r25, r24
     580:	91 30       	cpi	r25, 0x01	; 1
     582:	31 f4       	brne	.+12     	; 0x590 <KeypadTick+0x122>
     584:	87 e4       	ldi	r24, 0x47	; 71
     586:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     58a:	c2 e0       	ldi	r28, 0x02	; 2
     58c:	d0 e0       	ldi	r29, 0x00	; 0
     58e:	de c0       	rjmp	.+444    	; 0x74c <KeypadTick+0x2de>
     590:	92 30       	cpi	r25, 0x02	; 2
     592:	31 f4       	brne	.+12     	; 0x5a0 <KeypadTick+0x132>
     594:	88 e4       	ldi	r24, 0x48	; 72
     596:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     59a:	c2 e0       	ldi	r28, 0x02	; 2
     59c:	d0 e0       	ldi	r29, 0x00	; 0
     59e:	d6 c0       	rjmp	.+428    	; 0x74c <KeypadTick+0x2de>
     5a0:	91 11       	cpse	r25, r1
     5a2:	c3 c0       	rjmp	.+390    	; 0x72a <KeypadTick+0x2bc>
     5a4:	89 e4       	ldi	r24, 0x49	; 73
     5a6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5aa:	c2 e0       	ldi	r28, 0x02	; 2
     5ac:	d0 e0       	ldi	r29, 0x00	; 0
     5ae:	ce c0       	rjmp	.+412    	; 0x74c <KeypadTick+0x2de>
     5b0:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     5b4:	8b ea       	ldi	r24, 0xAB	; 171
     5b6:	98 9f       	mul	r25, r24
     5b8:	81 2d       	mov	r24, r1
     5ba:	11 24       	eor	r1, r1
     5bc:	86 95       	lsr	r24
     5be:	28 2f       	mov	r18, r24
     5c0:	22 0f       	add	r18, r18
     5c2:	82 0f       	add	r24, r18
     5c4:	98 1b       	sub	r25, r24
     5c6:	91 30       	cpi	r25, 0x01	; 1
     5c8:	31 f4       	brne	.+12     	; 0x5d6 <KeypadTick+0x168>
     5ca:	8a e4       	ldi	r24, 0x4A	; 74
     5cc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5d0:	c2 e0       	ldi	r28, 0x02	; 2
     5d2:	d0 e0       	ldi	r29, 0x00	; 0
     5d4:	bb c0       	rjmp	.+374    	; 0x74c <KeypadTick+0x2de>
     5d6:	92 30       	cpi	r25, 0x02	; 2
     5d8:	31 f4       	brne	.+12     	; 0x5e6 <KeypadTick+0x178>
     5da:	8b e4       	ldi	r24, 0x4B	; 75
     5dc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5e0:	c2 e0       	ldi	r28, 0x02	; 2
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
     5e4:	b3 c0       	rjmp	.+358    	; 0x74c <KeypadTick+0x2de>
     5e6:	91 11       	cpse	r25, r1
     5e8:	a3 c0       	rjmp	.+326    	; 0x730 <KeypadTick+0x2c2>
     5ea:	8c e4       	ldi	r24, 0x4C	; 76
     5ec:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     5f0:	c2 e0       	ldi	r28, 0x02	; 2
     5f2:	d0 e0       	ldi	r29, 0x00	; 0
     5f4:	ab c0       	rjmp	.+342    	; 0x74c <KeypadTick+0x2de>
     5f6:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     5fa:	8b ea       	ldi	r24, 0xAB	; 171
     5fc:	98 9f       	mul	r25, r24
     5fe:	81 2d       	mov	r24, r1
     600:	11 24       	eor	r1, r1
     602:	86 95       	lsr	r24
     604:	28 2f       	mov	r18, r24
     606:	22 0f       	add	r18, r18
     608:	82 0f       	add	r24, r18
     60a:	98 1b       	sub	r25, r24
     60c:	91 30       	cpi	r25, 0x01	; 1
     60e:	31 f4       	brne	.+12     	; 0x61c <KeypadTick+0x1ae>
     610:	8d e4       	ldi	r24, 0x4D	; 77
     612:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     616:	c2 e0       	ldi	r28, 0x02	; 2
     618:	d0 e0       	ldi	r29, 0x00	; 0
     61a:	98 c0       	rjmp	.+304    	; 0x74c <KeypadTick+0x2de>
     61c:	92 30       	cpi	r25, 0x02	; 2
     61e:	31 f4       	brne	.+12     	; 0x62c <KeypadTick+0x1be>
     620:	8e e4       	ldi	r24, 0x4E	; 78
     622:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     626:	c2 e0       	ldi	r28, 0x02	; 2
     628:	d0 e0       	ldi	r29, 0x00	; 0
     62a:	90 c0       	rjmp	.+288    	; 0x74c <KeypadTick+0x2de>
     62c:	91 11       	cpse	r25, r1
     62e:	83 c0       	rjmp	.+262    	; 0x736 <KeypadTick+0x2c8>
     630:	8f e4       	ldi	r24, 0x4F	; 79
     632:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     636:	c2 e0       	ldi	r28, 0x02	; 2
     638:	d0 e0       	ldi	r29, 0x00	; 0
     63a:	88 c0       	rjmp	.+272    	; 0x74c <KeypadTick+0x2de>
     63c:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     640:	83 70       	andi	r24, 0x03	; 3
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	31 f4       	brne	.+12     	; 0x652 <KeypadTick+0x1e4>
     646:	80 e5       	ldi	r24, 0x50	; 80
     648:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     64c:	c2 e0       	ldi	r28, 0x02	; 2
     64e:	d0 e0       	ldi	r29, 0x00	; 0
     650:	7d c0       	rjmp	.+250    	; 0x74c <KeypadTick+0x2de>
     652:	82 30       	cpi	r24, 0x02	; 2
     654:	31 f4       	brne	.+12     	; 0x662 <KeypadTick+0x1f4>
     656:	81 e5       	ldi	r24, 0x51	; 81
     658:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     65c:	c2 e0       	ldi	r28, 0x02	; 2
     65e:	d0 e0       	ldi	r29, 0x00	; 0
     660:	75 c0       	rjmp	.+234    	; 0x74c <KeypadTick+0x2de>
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	31 f4       	brne	.+12     	; 0x672 <KeypadTick+0x204>
     666:	82 e5       	ldi	r24, 0x52	; 82
     668:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     66c:	c2 e0       	ldi	r28, 0x02	; 2
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	6d c0       	rjmp	.+218    	; 0x74c <KeypadTick+0x2de>
     672:	81 11       	cpse	r24, r1
     674:	63 c0       	rjmp	.+198    	; 0x73c <KeypadTick+0x2ce>
     676:	83 e5       	ldi	r24, 0x53	; 83
     678:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     67c:	c2 e0       	ldi	r28, 0x02	; 2
     67e:	d0 e0       	ldi	r29, 0x00	; 0
     680:	65 c0       	rjmp	.+202    	; 0x74c <KeypadTick+0x2de>
     682:	90 91 00 10 	lds	r25, 0x1000	; 0x801000 <click>
     686:	8b ea       	ldi	r24, 0xAB	; 171
     688:	98 9f       	mul	r25, r24
     68a:	81 2d       	mov	r24, r1
     68c:	11 24       	eor	r1, r1
     68e:	86 95       	lsr	r24
     690:	28 2f       	mov	r18, r24
     692:	22 0f       	add	r18, r18
     694:	82 0f       	add	r24, r18
     696:	98 1b       	sub	r25, r24
     698:	91 30       	cpi	r25, 0x01	; 1
     69a:	31 f4       	brne	.+12     	; 0x6a8 <KeypadTick+0x23a>
     69c:	84 e5       	ldi	r24, 0x54	; 84
     69e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6a2:	c2 e0       	ldi	r28, 0x02	; 2
     6a4:	d0 e0       	ldi	r29, 0x00	; 0
     6a6:	52 c0       	rjmp	.+164    	; 0x74c <KeypadTick+0x2de>
     6a8:	92 30       	cpi	r25, 0x02	; 2
     6aa:	31 f4       	brne	.+12     	; 0x6b8 <KeypadTick+0x24a>
     6ac:	85 e5       	ldi	r24, 0x55	; 85
     6ae:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6b2:	c2 e0       	ldi	r28, 0x02	; 2
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
     6b6:	4a c0       	rjmp	.+148    	; 0x74c <KeypadTick+0x2de>
     6b8:	93 30       	cpi	r25, 0x03	; 3
     6ba:	09 f0       	breq	.+2      	; 0x6be <KeypadTick+0x250>
     6bc:	42 c0       	rjmp	.+132    	; 0x742 <KeypadTick+0x2d4>
     6be:	86 e5       	ldi	r24, 0x56	; 86
     6c0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6c4:	c2 e0       	ldi	r28, 0x02	; 2
     6c6:	d0 e0       	ldi	r29, 0x00	; 0
     6c8:	41 c0       	rjmp	.+130    	; 0x74c <KeypadTick+0x2de>
     6ca:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <click>
     6ce:	83 70       	andi	r24, 0x03	; 3
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	31 f4       	brne	.+12     	; 0x6e0 <KeypadTick+0x272>
     6d4:	87 e5       	ldi	r24, 0x57	; 87
     6d6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6da:	c2 e0       	ldi	r28, 0x02	; 2
     6dc:	d0 e0       	ldi	r29, 0x00	; 0
     6de:	36 c0       	rjmp	.+108    	; 0x74c <KeypadTick+0x2de>
     6e0:	82 30       	cpi	r24, 0x02	; 2
     6e2:	31 f4       	brne	.+12     	; 0x6f0 <KeypadTick+0x282>
     6e4:	88 e5       	ldi	r24, 0x58	; 88
     6e6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6ea:	c2 e0       	ldi	r28, 0x02	; 2
     6ec:	d0 e0       	ldi	r29, 0x00	; 0
     6ee:	2e c0       	rjmp	.+92     	; 0x74c <KeypadTick+0x2de>
     6f0:	83 30       	cpi	r24, 0x03	; 3
     6f2:	31 f4       	brne	.+12     	; 0x700 <KeypadTick+0x292>
     6f4:	89 e5       	ldi	r24, 0x59	; 89
     6f6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     6fa:	c2 e0       	ldi	r28, 0x02	; 2
     6fc:	d0 e0       	ldi	r29, 0x00	; 0
     6fe:	26 c0       	rjmp	.+76     	; 0x74c <KeypadTick+0x2de>
     700:	81 11       	cpse	r24, r1
     702:	22 c0       	rjmp	.+68     	; 0x748 <KeypadTick+0x2da>
     704:	8a e5       	ldi	r24, 0x5A	; 90
     706:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
     70a:	c2 e0       	ldi	r28, 0x02	; 2
     70c:	d0 e0       	ldi	r29, 0x00	; 0
     70e:	1e c0       	rjmp	.+60     	; 0x74c <KeypadTick+0x2de>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 0b 10 	sts	0x100B, r24	; 0x80100b <State>
     716:	1a c0       	rjmp	.+52     	; 0x74c <KeypadTick+0x2de>
     718:	c2 e0       	ldi	r28, 0x02	; 2
     71a:	d0 e0       	ldi	r29, 0x00	; 0
     71c:	17 c0       	rjmp	.+46     	; 0x74c <KeypadTick+0x2de>
     71e:	c2 e0       	ldi	r28, 0x02	; 2
     720:	d0 e0       	ldi	r29, 0x00	; 0
     722:	14 c0       	rjmp	.+40     	; 0x74c <KeypadTick+0x2de>
     724:	c2 e0       	ldi	r28, 0x02	; 2
     726:	d0 e0       	ldi	r29, 0x00	; 0
     728:	11 c0       	rjmp	.+34     	; 0x74c <KeypadTick+0x2de>
     72a:	c2 e0       	ldi	r28, 0x02	; 2
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	0e c0       	rjmp	.+28     	; 0x74c <KeypadTick+0x2de>
     730:	c2 e0       	ldi	r28, 0x02	; 2
     732:	d0 e0       	ldi	r29, 0x00	; 0
     734:	0b c0       	rjmp	.+22     	; 0x74c <KeypadTick+0x2de>
     736:	c2 e0       	ldi	r28, 0x02	; 2
     738:	d0 e0       	ldi	r29, 0x00	; 0
     73a:	08 c0       	rjmp	.+16     	; 0x74c <KeypadTick+0x2de>
     73c:	c2 e0       	ldi	r28, 0x02	; 2
     73e:	d0 e0       	ldi	r29, 0x00	; 0
     740:	05 c0       	rjmp	.+10     	; 0x74c <KeypadTick+0x2de>
     742:	c2 e0       	ldi	r28, 0x02	; 2
     744:	d0 e0       	ldi	r29, 0x00	; 0
     746:	02 c0       	rjmp	.+4      	; 0x74c <KeypadTick+0x2de>
     748:	c2 e0       	ldi	r28, 0x02	; 2
     74a:	d0 e0       	ldi	r29, 0x00	; 0
     74c:	ce 01       	movw	r24, r28
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <N5110_Cmnd>:
     754:	cf 93       	push	r28
     756:	c8 2f       	mov	r28, r24
     758:	29 98       	cbi	0x05, 1	; 5
     75a:	c0 d5       	rcall	.+2944   	; 0x12dc <SPI_SS_Enable>
     75c:	8c 2f       	mov	r24, r28
     75e:	ca d5       	rcall	.+2964   	; 0x12f4 <SPI_Write>
     760:	29 9a       	sbi	0x05, 1	; 5
     762:	be d5       	rcall	.+2940   	; 0x12e0 <SPI_SS_Disable>
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <N5110_Reset>:
     768:	28 98       	cbi	0x05, 0	; 5
     76a:	2f ef       	ldi	r18, 0xFF	; 255
     76c:	80 e7       	ldi	r24, 0x70	; 112
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	21 50       	subi	r18, 0x01	; 1
     772:	80 40       	sbci	r24, 0x00	; 0
     774:	90 40       	sbci	r25, 0x00	; 0
     776:	e1 f7       	brne	.-8      	; 0x770 <N5110_Reset+0x8>
     778:	00 c0       	rjmp	.+0      	; 0x77a <N5110_Reset+0x12>
     77a:	00 00       	nop
     77c:	28 9a       	sbi	0x05, 0	; 5
     77e:	08 95       	ret

00000780 <N5110_init>:
     780:	f3 df       	rcall	.-26     	; 0x768 <N5110_Reset>
     782:	81 e2       	ldi	r24, 0x21	; 33
     784:	e7 df       	rcall	.-50     	; 0x754 <N5110_Cmnd>
     786:	80 ec       	ldi	r24, 0xC0	; 192
     788:	e5 df       	rcall	.-54     	; 0x754 <N5110_Cmnd>
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	e3 df       	rcall	.-58     	; 0x754 <N5110_Cmnd>
     78e:	83 e1       	ldi	r24, 0x13	; 19
     790:	e1 df       	rcall	.-62     	; 0x754 <N5110_Cmnd>
     792:	80 e2       	ldi	r24, 0x20	; 32
     794:	df df       	rcall	.-66     	; 0x754 <N5110_Cmnd>
     796:	8c e0       	ldi	r24, 0x0C	; 12
     798:	dd cf       	rjmp	.-70     	; 0x754 <N5110_Cmnd>
     79a:	08 95       	ret

0000079c <lcd_setXY>:
     79c:	cf 93       	push	r28
     79e:	c6 2f       	mov	r28, r22
     7a0:	d9 df       	rcall	.-78     	; 0x754 <N5110_Cmnd>
     7a2:	8c 2f       	mov	r24, r28
     7a4:	d7 df       	rcall	.-82     	; 0x754 <N5110_Cmnd>
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <N5110_clear>:
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	96 d5       	rcall	.+2860   	; 0x12dc <SPI_SS_Enable>
     7b0:	29 9a       	sbi	0x05, 1	; 5
     7b2:	c8 ef       	ldi	r28, 0xF8	; 248
     7b4:	d1 e0       	ldi	r29, 0x01	; 1
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	9d d5       	rcall	.+2874   	; 0x12f4 <SPI_Write>
     7ba:	21 97       	sbiw	r28, 0x01	; 1
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <N5110_clear+0xc>
     7be:	29 98       	cbi	0x05, 1	; 5
     7c0:	8f d5       	rcall	.+2846   	; 0x12e0 <SPI_SS_Disable>
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <N5110_image>:
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	8c 01       	movw	r16, r24
     7d2:	84 d5       	rcall	.+2824   	; 0x12dc <SPI_SS_Enable>
     7d4:	29 9a       	sbi	0x05, 1	; 5
     7d6:	e8 01       	movw	r28, r16
     7d8:	08 50       	subi	r16, 0x08	; 8
     7da:	1e 4f       	sbci	r17, 0xFE	; 254
     7dc:	89 91       	ld	r24, Y+
     7de:	8a d5       	rcall	.+2836   	; 0x12f4 <SPI_Write>
     7e0:	c0 17       	cp	r28, r16
     7e2:	d1 07       	cpc	r29, r17
     7e4:	d9 f7       	brne	.-10     	; 0x7dc <N5110_image+0x14>
     7e6:	29 98       	cbi	0x05, 1	; 5
     7e8:	7b d5       	rcall	.+2806   	; 0x12e0 <SPI_SS_Disable>
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <Nokia_Tick>:
     7f4:	8a 30       	cpi	r24, 0x0A	; 10
     7f6:	91 05       	cpc	r25, r1
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <Nokia_Tick+0x8>
     7fa:	dd c0       	rjmp	.+442    	; 0x9b6 <Nokia_Tick+0x1c2>
     7fc:	fc 01       	movw	r30, r24
     7fe:	e0 58       	subi	r30, 0x80	; 128
     800:	ff 4f       	sbci	r31, 0xFF	; 255
     802:	f6 c6       	rjmp	.+3564   	; 0x15f0 <__tablejump2__>
     804:	6f d5       	rcall	.+2782   	; 0x12e4 <SPI_Init>
     806:	bc df       	rcall	.-136    	; 0x780 <N5110_init>
     808:	d0 df       	rcall	.-96     	; 0x7aa <N5110_clear>
     80a:	60 e8       	ldi	r22, 0x80	; 128
     80c:	80 e4       	ldi	r24, 0x40	; 64
     80e:	c6 df       	rcall	.-116    	; 0x79c <lcd_setXY>
     810:	82 ef       	ldi	r24, 0xF2	; 242
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	d9 df       	rcall	.-78     	; 0x7c8 <N5110_image>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	08 95       	ret
     81c:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     820:	22 23       	and	r18, r18
     822:	49 f0       	breq	.+18     	; 0x836 <Nokia_Tick+0x42>
     824:	82 2f       	mov	r24, r18
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     82c:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     830:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     834:	da c0       	rjmp	.+436    	; 0x9ea <Nokia_Tick+0x1f6>
     836:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     83a:	21 30       	cpi	r18, 0x01	; 1
     83c:	09 f0       	breq	.+2      	; 0x840 <Nokia_Tick+0x4c>
     83e:	d8 c0       	rjmp	.+432    	; 0x9f0 <Nokia_Tick+0x1fc>
     840:	b4 df       	rcall	.-152    	; 0x7aa <N5110_clear>
     842:	60 e8       	ldi	r22, 0x80	; 128
     844:	80 e4       	ldi	r24, 0x40	; 64
     846:	aa df       	rcall	.-172    	; 0x79c <lcd_setXY>
     848:	82 ec       	ldi	r24, 0xC2	; 194
     84a:	9d e0       	ldi	r25, 0x0D	; 13
     84c:	bd df       	rcall	.-134    	; 0x7c8 <N5110_image>
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	08 95       	ret
     854:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     858:	22 23       	and	r18, r18
     85a:	49 f0       	breq	.+18     	; 0x86e <Nokia_Tick+0x7a>
     85c:	82 2f       	mov	r24, r18
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     864:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     868:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     86c:	be c0       	rjmp	.+380    	; 0x9ea <Nokia_Tick+0x1f6>
     86e:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     872:	22 30       	cpi	r18, 0x02	; 2
     874:	09 f0       	breq	.+2      	; 0x878 <Nokia_Tick+0x84>
     876:	bc c0       	rjmp	.+376    	; 0x9f0 <Nokia_Tick+0x1fc>
     878:	98 df       	rcall	.-208    	; 0x7aa <N5110_clear>
     87a:	60 e8       	ldi	r22, 0x80	; 128
     87c:	80 e4       	ldi	r24, 0x40	; 64
     87e:	8e df       	rcall	.-228    	; 0x79c <lcd_setXY>
     880:	8a ec       	ldi	r24, 0xCA	; 202
     882:	9b e0       	ldi	r25, 0x0B	; 11
     884:	a1 df       	rcall	.-190    	; 0x7c8 <N5110_image>
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	08 95       	ret
     88c:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     890:	22 23       	and	r18, r18
     892:	49 f0       	breq	.+18     	; 0x8a6 <Nokia_Tick+0xb2>
     894:	82 2f       	mov	r24, r18
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     89c:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     8a0:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     8a4:	a2 c0       	rjmp	.+324    	; 0x9ea <Nokia_Tick+0x1f6>
     8a6:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     8aa:	23 30       	cpi	r18, 0x03	; 3
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <Nokia_Tick+0xbc>
     8ae:	a0 c0       	rjmp	.+320    	; 0x9f0 <Nokia_Tick+0x1fc>
     8b0:	7c df       	rcall	.-264    	; 0x7aa <N5110_clear>
     8b2:	60 e8       	ldi	r22, 0x80	; 128
     8b4:	80 e4       	ldi	r24, 0x40	; 64
     8b6:	72 df       	rcall	.-284    	; 0x79c <lcd_setXY>
     8b8:	82 ed       	ldi	r24, 0xD2	; 210
     8ba:	99 e0       	ldi	r25, 0x09	; 9
     8bc:	85 df       	rcall	.-246    	; 0x7c8 <N5110_image>
     8be:	84 e0       	ldi	r24, 0x04	; 4
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	08 95       	ret
     8c4:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     8c8:	22 23       	and	r18, r18
     8ca:	49 f0       	breq	.+18     	; 0x8de <Nokia_Tick+0xea>
     8cc:	82 2f       	mov	r24, r18
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     8d4:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     8d8:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     8dc:	86 c0       	rjmp	.+268    	; 0x9ea <Nokia_Tick+0x1f6>
     8de:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     8e2:	24 30       	cpi	r18, 0x04	; 4
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <Nokia_Tick+0xf4>
     8e6:	84 c0       	rjmp	.+264    	; 0x9f0 <Nokia_Tick+0x1fc>
     8e8:	60 df       	rcall	.-320    	; 0x7aa <N5110_clear>
     8ea:	60 e8       	ldi	r22, 0x80	; 128
     8ec:	80 e4       	ldi	r24, 0x40	; 64
     8ee:	56 df       	rcall	.-340    	; 0x79c <lcd_setXY>
     8f0:	8a ed       	ldi	r24, 0xDA	; 218
     8f2:	97 e0       	ldi	r25, 0x07	; 7
     8f4:	69 df       	rcall	.-302    	; 0x7c8 <N5110_image>
     8f6:	85 e0       	ldi	r24, 0x05	; 5
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	08 95       	ret
     8fc:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     900:	22 23       	and	r18, r18
     902:	49 f0       	breq	.+18     	; 0x916 <Nokia_Tick+0x122>
     904:	82 2f       	mov	r24, r18
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     90c:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     910:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     914:	6a c0       	rjmp	.+212    	; 0x9ea <Nokia_Tick+0x1f6>
     916:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     91a:	25 30       	cpi	r18, 0x05	; 5
     91c:	09 f0       	breq	.+2      	; 0x920 <Nokia_Tick+0x12c>
     91e:	68 c0       	rjmp	.+208    	; 0x9f0 <Nokia_Tick+0x1fc>
     920:	44 df       	rcall	.-376    	; 0x7aa <N5110_clear>
     922:	60 e8       	ldi	r22, 0x80	; 128
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	3a df       	rcall	.-396    	; 0x79c <lcd_setXY>
     928:	82 ee       	ldi	r24, 0xE2	; 226
     92a:	95 e0       	ldi	r25, 0x05	; 5
     92c:	4d df       	rcall	.-358    	; 0x7c8 <N5110_image>
     92e:	86 e0       	ldi	r24, 0x06	; 6
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	08 95       	ret
     934:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     938:	22 23       	and	r18, r18
     93a:	49 f0       	breq	.+18     	; 0x94e <Nokia_Tick+0x15a>
     93c:	82 2f       	mov	r24, r18
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     944:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     948:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     94c:	4e c0       	rjmp	.+156    	; 0x9ea <Nokia_Tick+0x1f6>
     94e:	20 91 ff 0f 	lds	r18, 0x0FFF	; 0x800fff <strike>
     952:	26 30       	cpi	r18, 0x06	; 6
     954:	09 f0       	breq	.+2      	; 0x958 <Nokia_Tick+0x164>
     956:	4c c0       	rjmp	.+152    	; 0x9f0 <Nokia_Tick+0x1fc>
     958:	28 df       	rcall	.-432    	; 0x7aa <N5110_clear>
     95a:	60 e8       	ldi	r22, 0x80	; 128
     95c:	80 e4       	ldi	r24, 0x40	; 64
     95e:	1e df       	rcall	.-452    	; 0x79c <lcd_setXY>
     960:	8a ee       	ldi	r24, 0xEA	; 234
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	31 df       	rcall	.-414    	; 0x7c8 <N5110_image>
     966:	2a c0       	rjmp	.+84     	; 0x9bc <Nokia_Tick+0x1c8>
     968:	80 91 fd 0f 	lds	r24, 0x0FFD	; 0x800ffd <NOKIAReset>
     96c:	88 23       	and	r24, r24
     96e:	41 f0       	breq	.+16     	; 0x980 <Nokia_Tick+0x18c>
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     976:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     97a:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     97e:	35 c0       	rjmp	.+106    	; 0x9ea <Nokia_Tick+0x1f6>
     980:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <counter>
     984:	85 31       	cpi	r24, 0x15	; 21
     986:	d0 f0       	brcs	.+52     	; 0x9bc <Nokia_Tick+0x1c8>
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	08 95       	ret
     98e:	20 91 fd 0f 	lds	r18, 0x0FFD	; 0x800ffd <NOKIAReset>
     992:	22 23       	and	r18, r18
     994:	49 f0       	breq	.+18     	; 0x9a8 <Nokia_Tick+0x1b4>
     996:	82 2f       	mov	r24, r18
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
     99e:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
     9a2:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <NOKIAReset>
     9a6:	21 c0       	rjmp	.+66     	; 0x9ea <Nokia_Tick+0x1f6>
     9a8:	20 91 fe 0f 	lds	r18, 0x0FFE	; 0x800ffe <counter>
     9ac:	25 31       	cpi	r18, 0x15	; 21
     9ae:	00 f1       	brcs	.+64     	; 0x9f0 <Nokia_Tick+0x1fc>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	08 95       	ret
     9b6:	87 30       	cpi	r24, 0x07	; 7
     9b8:	91 05       	cpc	r25, r1
     9ba:	d1 f4       	brne	.+52     	; 0x9f0 <Nokia_Tick+0x1fc>
     9bc:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <counter>
     9c0:	80 fd       	sbrc	r24, 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <Nokia_Tick+0x1d4>
     9c4:	f2 de       	rcall	.-540    	; 0x7aa <N5110_clear>
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <Nokia_Tick+0x1e0>
     9c8:	60 e8       	ldi	r22, 0x80	; 128
     9ca:	80 e4       	ldi	r24, 0x40	; 64
     9cc:	e7 de       	rcall	.-562    	; 0x79c <lcd_setXY>
     9ce:	8a ee       	ldi	r24, 0xEA	; 234
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	fa de       	rcall	.-524    	; 0x7c8 <N5110_image>
     9d4:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <counter>
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	80 93 fe 0f 	sts	0x0FFE, r24	; 0x800ffe <counter>
     9de:	87 e0       	ldi	r24, 0x07	; 7
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	08 95       	ret
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	08 95       	ret
     9ea:	87 30       	cpi	r24, 0x07	; 7
     9ec:	91 05       	cpc	r25, r1
     9ee:	51 f3       	breq	.-44     	; 0x9c4 <Nokia_Tick+0x1d0>
     9f0:	08 95       	ret

000009f2 <ResetWelcomeMessage>:
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
     9f8:	dc 01       	movw	r26, r24
     9fa:	ad 5b       	subi	r26, 0xBD	; 189
     9fc:	bf 4f       	sbci	r27, 0xFF	; 255
     9fe:	06 c0       	rjmp	.+12     	; 0xa0c <ResetWelcomeMessage+0x1a>
     a00:	91 81       	ldd	r25, Z+1	; 0x01
     a02:	91 93       	st	Z+, r25
     a04:	ae 17       	cp	r26, r30
     a06:	bf 07       	cpc	r27, r31
     a08:	d9 f7       	brne	.-10     	; 0xa00 <ResetWelcomeMessage+0xe>
     a0a:	2c 93       	st	X, r18
     a0c:	28 81       	ld	r18, Y
     a0e:	2c 34       	cpi	r18, 0x4C	; 76
     a10:	11 f0       	breq	.+4      	; 0xa16 <ResetWelcomeMessage+0x24>
     a12:	fe 01       	movw	r30, r28
     a14:	f5 cf       	rjmp	.-22     	; 0xa00 <ResetWelcomeMessage+0xe>
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <EEPROM_read>:
     a1c:	f9 99       	sbic	0x1f, 1	; 31
     a1e:	fe cf       	rjmp	.-4      	; 0xa1c <EEPROM_read>
     a20:	92 bd       	out	0x22, r25	; 34
     a22:	81 bd       	out	0x21, r24	; 33
     a24:	f8 9a       	sbi	0x1f, 0	; 31
     a26:	80 b5       	in	r24, 0x20	; 32
     a28:	08 95       	ret

00000a2a <ReturnHighScore>:
     a2a:	ac 01       	movw	r20, r24
     a2c:	9c 01       	movw	r18, r24
     a2e:	36 95       	lsr	r19
     a30:	27 95       	ror	r18
     a32:	36 95       	lsr	r19
     a34:	27 95       	ror	r18
     a36:	36 95       	lsr	r19
     a38:	27 95       	ror	r18
     a3a:	a5 ec       	ldi	r26, 0xC5	; 197
     a3c:	b0 e2       	ldi	r27, 0x20	; 32
     a3e:	e1 d5       	rcall	.+3010   	; 0x1602 <__umulhisi3>
     a40:	92 95       	swap	r25
     a42:	82 95       	swap	r24
     a44:	8f 70       	andi	r24, 0x0F	; 15
     a46:	89 27       	eor	r24, r25
     a48:	9f 70       	andi	r25, 0x0F	; 15
     a4a:	89 27       	eor	r24, r25
     a4c:	80 93 13 10 	sts	0x1013, r24	; 0x801013 <thousands>
     a50:	68 ee       	ldi	r22, 0xE8	; 232
     a52:	73 e0       	ldi	r23, 0x03	; 3
     a54:	86 9f       	mul	r24, r22
     a56:	90 01       	movw	r18, r0
     a58:	87 9f       	mul	r24, r23
     a5a:	30 0d       	add	r19, r0
     a5c:	96 9f       	mul	r25, r22
     a5e:	30 0d       	add	r19, r0
     a60:	11 24       	eor	r1, r1
     a62:	ca 01       	movw	r24, r20
     a64:	82 1b       	sub	r24, r18
     a66:	93 0b       	sbc	r25, r19
     a68:	9c 01       	movw	r18, r24
     a6a:	36 95       	lsr	r19
     a6c:	27 95       	ror	r18
     a6e:	36 95       	lsr	r19
     a70:	27 95       	ror	r18
     a72:	ab e7       	ldi	r26, 0x7B	; 123
     a74:	b4 e1       	ldi	r27, 0x14	; 20
     a76:	c5 d5       	rcall	.+2954   	; 0x1602 <__umulhisi3>
     a78:	96 95       	lsr	r25
     a7a:	87 95       	ror	r24
     a7c:	80 93 08 10 	sts	0x1008, r24	; 0x801008 <hundreds>
     a80:	9a 01       	movw	r18, r20
     a82:	36 95       	lsr	r19
     a84:	27 95       	ror	r18
     a86:	36 95       	lsr	r19
     a88:	27 95       	ror	r18
     a8a:	bb d5       	rcall	.+2934   	; 0x1602 <__umulhisi3>
     a8c:	96 95       	lsr	r25
     a8e:	87 95       	ror	r24
     a90:	64 e6       	ldi	r22, 0x64	; 100
     a92:	68 9f       	mul	r22, r24
     a94:	90 01       	movw	r18, r0
     a96:	69 9f       	mul	r22, r25
     a98:	30 0d       	add	r19, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	ca 01       	movw	r24, r20
     a9e:	82 1b       	sub	r24, r18
     aa0:	93 0b       	sbc	r25, r19
     aa2:	9c 01       	movw	r18, r24
     aa4:	ad ec       	ldi	r26, 0xCD	; 205
     aa6:	bc ec       	ldi	r27, 0xCC	; 204
     aa8:	ac d5       	rcall	.+2904   	; 0x1602 <__umulhisi3>
     aaa:	96 95       	lsr	r25
     aac:	87 95       	ror	r24
     aae:	96 95       	lsr	r25
     ab0:	87 95       	ror	r24
     ab2:	96 95       	lsr	r25
     ab4:	87 95       	ror	r24
     ab6:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <tens>
     aba:	9a 01       	movw	r18, r20
     abc:	a2 d5       	rcall	.+2884   	; 0x1602 <__umulhisi3>
     abe:	96 95       	lsr	r25
     ac0:	87 95       	ror	r24
     ac2:	96 95       	lsr	r25
     ac4:	87 95       	ror	r24
     ac6:	96 95       	lsr	r25
     ac8:	87 95       	ror	r24
     aca:	9c 01       	movw	r18, r24
     acc:	22 0f       	add	r18, r18
     ace:	33 1f       	adc	r19, r19
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	82 0f       	add	r24, r18
     ade:	93 1f       	adc	r25, r19
     ae0:	48 1b       	sub	r20, r24
     ae2:	59 0b       	sbc	r21, r25
     ae4:	40 93 09 10 	sts	0x1009, r20	; 0x801009 <ones>
     ae8:	08 95       	ret

00000aea <set_PWM>:
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	6b 01       	movw	r12, r22
     af4:	7c 01       	movw	r14, r24
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	60 91 ba 0f 	lds	r22, 0x0FBA	; 0x800fba <__data_end>
     afe:	70 91 bb 0f 	lds	r23, 0x0FBB	; 0x800fbb <__data_end+0x1>
     b02:	80 91 bc 0f 	lds	r24, 0x0FBC	; 0x800fbc <__data_end+0x2>
     b06:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <__data_end+0x3>
     b0a:	f9 d3       	rcall	.+2034   	; 0x12fe <__cmpsf2>
     b0c:	88 23       	and	r24, r24
     b0e:	09 f4       	brne	.+2      	; 0xb12 <set_PWM+0x28>
     b10:	40 c0       	rjmp	.+128    	; 0xb92 <set_PWM+0xa8>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	a9 01       	movw	r20, r18
     b18:	c7 01       	movw	r24, r14
     b1a:	b6 01       	movw	r22, r12
     b1c:	f0 d3       	rcall	.+2016   	; 0x12fe <__cmpsf2>
     b1e:	81 11       	cpse	r24, r1
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <set_PWM+0x40>
     b22:	85 b5       	in	r24, 0x25	; 37
     b24:	88 70       	andi	r24, 0x08	; 8
     b26:	85 bd       	out	0x25, r24	; 37
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <set_PWM+0x46>
     b2a:	85 b5       	in	r24, 0x25	; 37
     b2c:	83 60       	ori	r24, 0x03	; 3
     b2e:	85 bd       	out	0x25, r24	; 37
     b30:	28 e5       	ldi	r18, 0x58	; 88
     b32:	39 e3       	ldi	r19, 0x39	; 57
     b34:	44 e7       	ldi	r20, 0x74	; 116
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	c7 01       	movw	r24, r14
     b3a:	b6 01       	movw	r22, r12
     b3c:	e0 d3       	rcall	.+1984   	; 0x12fe <__cmpsf2>
     b3e:	88 23       	and	r24, r24
     b40:	1c f4       	brge	.+6      	; 0xb48 <set_PWM+0x5e>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	87 bd       	out	0x27, r24	; 39
     b46:	1c c0       	rjmp	.+56     	; 0xb80 <set_PWM+0x96>
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	34 e2       	ldi	r19, 0x24	; 36
     b4c:	44 ef       	ldi	r20, 0xF4	; 244
     b4e:	56 e4       	ldi	r21, 0x46	; 70
     b50:	c7 01       	movw	r24, r14
     b52:	b6 01       	movw	r22, r12
     b54:	e6 d4       	rcall	.+2508   	; 0x1522 <__gesf2>
     b56:	18 16       	cp	r1, r24
     b58:	14 f4       	brge	.+4      	; 0xb5e <set_PWM+0x74>
     b5a:	17 bc       	out	0x27, r1	; 39
     b5c:	11 c0       	rjmp	.+34     	; 0xb80 <set_PWM+0x96>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	53 e4       	ldi	r21, 0x43	; 67
     b66:	c7 01       	movw	r24, r14
     b68:	b6 01       	movw	r22, r12
     b6a:	df d4       	rcall	.+2494   	; 0x152a <__mulsf3>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	74 e2       	ldi	r23, 0x24	; 36
     b74:	84 ef       	ldi	r24, 0xF4	; 244
     b76:	9a e4       	ldi	r25, 0x4A	; 74
     b78:	c6 d3       	rcall	.+1932   	; 0x1306 <__divsf3>
     b7a:	2d d4       	rcall	.+2138   	; 0x13d6 <__fixsfsi>
     b7c:	61 50       	subi	r22, 0x01	; 1
     b7e:	67 bd       	out	0x27, r22	; 39
     b80:	16 bc       	out	0x26, r1	; 38
     b82:	c0 92 ba 0f 	sts	0x0FBA, r12	; 0x800fba <__data_end>
     b86:	d0 92 bb 0f 	sts	0x0FBB, r13	; 0x800fbb <__data_end+0x1>
     b8a:	e0 92 bc 0f 	sts	0x0FBC, r14	; 0x800fbc <__data_end+0x2>
     b8e:	f0 92 bd 0f 	sts	0x0FBD, r15	; 0x800fbd <__data_end+0x3>
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	08 95       	ret

00000b9c <WA_Tick>:
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	91 05       	cpc	r25, r1
     ba0:	a9 f0       	breq	.+42     	; 0xbcc <WA_Tick+0x30>
     ba2:	1c f4       	brge	.+6      	; 0xbaa <WA_Tick+0xe>
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	41 f0       	breq	.+16     	; 0xbb8 <WA_Tick+0x1c>
     ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <WA_Tick+0x5c>
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	91 05       	cpc	r25, r1
     bae:	d9 f0       	breq	.+54     	; 0xbe6 <WA_Tick+0x4a>
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	91 05       	cpc	r25, r1
     bb4:	79 f1       	breq	.+94     	; 0xc14 <WA_Tick+0x78>
     bb6:	20 c0       	rjmp	.+64     	; 0xbf8 <WA_Tick+0x5c>
     bb8:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <WAReset>
     bbc:	81 11       	cpse	r24, r1
     bbe:	49 c0       	rjmp	.+146    	; 0xc52 <WA_Tick+0xb6>
     bc0:	80 91 f9 0f 	lds	r24, 0x0FF9	; 0x800ff9 <wrong>
     bc4:	88 23       	and	r24, r24
     bc6:	31 f1       	breq	.+76     	; 0xc14 <WA_Tick+0x78>
     bc8:	12 9a       	sbi	0x02, 2	; 2
     bca:	2d c0       	rjmp	.+90     	; 0xc26 <WA_Tick+0x8a>
     bcc:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <WAReset>
     bd0:	81 11       	cpse	r24, r1
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <WA_Tick+0xb6>
     bd4:	80 91 fb 0f 	lds	r24, 0x0FFB	; 0x800ffb <WA_Count>
     bd8:	8f 31       	cpi	r24, 0x1F	; 31
     bda:	28 f1       	brcs	.+74     	; 0xc26 <WA_Tick+0x8a>
     bdc:	10 92 fb 0f 	sts	0x0FFB, r1	; 0x800ffb <WA_Count>
     be0:	10 92 f9 0f 	sts	0x0FF9, r1	; 0x800ff9 <wrong>
     be4:	2e c0       	rjmp	.+92     	; 0xc42 <WA_Tick+0xa6>
     be6:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <WAReset>
     bea:	81 11       	cpse	r24, r1
     bec:	32 c0       	rjmp	.+100    	; 0xc52 <WA_Tick+0xb6>
     bee:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <letterFound>
     bf2:	81 11       	cpse	r24, r1
     bf4:	26 c0       	rjmp	.+76     	; 0xc42 <WA_Tick+0xa6>
     bf6:	0e c0       	rjmp	.+28     	; 0xc14 <WA_Tick+0x78>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	91 05       	cpc	r25, r1
     bfc:	a1 f0       	breq	.+40     	; 0xc26 <WA_Tick+0x8a>
     bfe:	1c f4       	brge	.+6      	; 0xc06 <WA_Tick+0x6a>
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	89 f5       	brne	.+98     	; 0xc66 <WA_Tick+0xca>
     c04:	07 c0       	rjmp	.+14     	; 0xc14 <WA_Tick+0x78>
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	91 05       	cpc	r25, r1
     c0a:	d9 f0       	breq	.+54     	; 0xc42 <WA_Tick+0xa6>
     c0c:	83 30       	cpi	r24, 0x03	; 3
     c0e:	91 05       	cpc	r25, r1
     c10:	51 f5       	brne	.+84     	; 0xc66 <WA_Tick+0xca>
     c12:	1f c0       	rjmp	.+62     	; 0xc52 <WA_Tick+0xb6>
     c14:	10 92 fb 0f 	sts	0x0FFB, r1	; 0x800ffb <WA_Count>
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	cb 01       	movw	r24, r22
     c1e:	65 df       	rcall	.-310    	; 0xaea <set_PWM>
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	08 95       	ret
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 ed       	ldi	r23, 0xD0	; 208
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	94 e4       	ldi	r25, 0x44	; 68
     c2e:	5d df       	rcall	.-326    	; 0xaea <set_PWM>
     c30:	80 91 fb 0f 	lds	r24, 0x0FFB	; 0x800ffb <WA_Count>
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	80 93 fb 0f 	sts	0x0FFB, r24	; 0x800ffb <WA_Count>
     c3a:	12 9a       	sbi	0x02, 2	; 2
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	08 95       	ret
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	cb 01       	movw	r24, r22
     c48:	50 df       	rcall	.-352    	; 0xaea <set_PWM>
     c4a:	12 98       	cbi	0x02, 2	; 2
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	08 95       	ret
     c52:	10 92 fc 0f 	sts	0x0FFC, r1	; 0x800ffc <letterFound>
     c56:	10 92 fb 0f 	sts	0x0FFB, r1	; 0x800ffb <WA_Count>
     c5a:	10 92 fa 0f 	sts	0x0FFA, r1	; 0x800ffa <WAReset>
     c5e:	10 92 f9 0f 	sts	0x0FF9, r1	; 0x800ff9 <wrong>
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	08 95       	ret

00000c68 <PWM_on>:
     c68:	81 e4       	ldi	r24, 0x41	; 65
     c6a:	84 bd       	out	0x24, r24	; 36
     c6c:	8b e0       	ldi	r24, 0x0B	; 11
     c6e:	85 bd       	out	0x25, r24	; 37
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	cb 01       	movw	r24, r22
     c76:	39 cf       	rjmp	.-398    	; 0xaea <set_PWM>
     c78:	08 95       	ret

00000c7a <LCDBuildChar>:
unsigned char win = 0;
unsigned char LCDReset = 0;


void LCDBuildChar(unsigned char loc, unsigned char *p)
{
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
	unsigned char i;
	if(loc<8) //If valid address
     c82:	88 30       	cpi	r24, 0x08	; 8
     c84:	70 f4       	brcc	.+28     	; 0xca2 <LCDBuildChar+0x28>
     c86:	8b 01       	movw	r16, r22
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
     c88:	88 0f       	add	r24, r24
     c8a:	88 0f       	add	r24, r24
     c8c:	88 0f       	add	r24, r24
     c8e:	80 5c       	subi	r24, 0xC0	; 192
     c90:	e5 da       	rcall	.-2614   	; 0x25c <LCD_WriteCommand>
     c92:	e8 01       	movw	r28, r16
     c94:	08 5f       	subi	r16, 0xF8	; 248
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
     c98:	89 91       	ld	r24, Y+
     c9a:	03 db       	rcall	.-2554   	; 0x2a2 <LCD_WriteData>
{
	unsigned char i;
	if(loc<8) //If valid address
	{
		LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		for(i=0;i<8;i++)
     c9c:	c0 17       	cp	r28, r16
     c9e:	d1 07       	cpc	r29, r17
     ca0:	d9 f7       	brne	.-10     	; 0xc98 <LCDBuildChar+0x1e>
		LCD_WriteData(p[i]); //Write the character pattern to CGRAM
	}
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <CheckGuessed>:

void CheckGuessed(){

	letterFound = 0; //letter exists in word
     cac:	10 92 fc 0f 	sts	0x0FFC, r1	; 0x800ffc <letterFound>
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     cb0:	20 91 f7 0f 	lds	r18, 0x0FF7	; 0x800ff7 <WTG_Index>
     cb4:	22 23       	and	r18, r18
     cb6:	e9 f0       	breq	.+58     	; 0xcf2 <CheckGuessed+0x46>
		if(wordToGuess[b] == P2Guess){
     cb8:	90 91 0c 10 	lds	r25, 0x100C	; 0x80100c <P2Guess>
     cbc:	e7 e6       	ldi	r30, 0x67	; 103
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b1 e0       	ldi	r27, 0x01	; 1
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	28 59       	subi	r18, 0x98	; 152
     cca:	3e 4f       	sbci	r19, 0xFE	; 254
     ccc:	81 91       	ld	r24, Z+
     cce:	89 13       	cpse	r24, r25
     cd0:	06 c0       	rjmp	.+12     	; 0xcde <CheckGuessed+0x32>
			displayGuess[b] = wordToGuess[b];
     cd2:	9c 93       	st	X, r25

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     cd4:	e2 17       	cp	r30, r18
     cd6:	f3 07       	cpc	r31, r19
     cd8:	a9 f4       	brne	.+42     	; 0xd04 <CheckGuessed+0x58>
		if(wordToGuess[b] == P2Guess){
			displayGuess[b] = wordToGuess[b];
			letterFound = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <CheckGuessed+0x3e>

void CheckGuessed(){

	letterFound = 0; //letter exists in word
	unsigned char b = 0;
	while((b < WTG_Index) && !letterFound){
     cde:	e2 17       	cp	r30, r18
     ce0:	f3 07       	cpc	r31, r19
     ce2:	11 f0       	breq	.+4      	; 0xce8 <CheckGuessed+0x3c>
     ce4:	11 96       	adiw	r26, 0x01	; 1
     ce6:	f2 cf       	rjmp	.-28     	; 0xccc <CheckGuessed+0x20>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	80 93 fc 0f 	sts	0x0FFC, r24	; 0x800ffc <letterFound>
			letterFound = 1;
		}
		b++;
	}//end while
	
	if(letterFound == 0){
     cee:	81 11       	cpse	r24, r1
     cf0:	0c c0       	rjmp	.+24     	; 0xd0a <CheckGuessed+0x5e>
		strike++;
     cf2:	80 91 ff 0f 	lds	r24, 0x0FFF	; 0x800fff <strike>
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	80 93 ff 0f 	sts	0x0FFF, r24	; 0x800fff <strike>
		wrong = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 f9 0f 	sts	0x0FF9, r24	; 0x800ff9 <wrong>
	}
}
     d02:	08 95       	ret
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 fc 0f 	sts	0x0FFC, r24	; 0x800ffc <letterFound>
     d0a:	08 95       	ret

00000d0c <CheckCorrect>:

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
     d0c:	10 92 f6 0f 	sts	0x0FF6, r1	; 0x800ff6 <win>
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     d10:	20 91 f7 0f 	lds	r18, 0x0FF7	; 0x800ff7 <WTG_Index>
     d14:	22 23       	and	r18, r18
     d16:	a9 f0       	breq	.+42     	; 0xd42 <CheckCorrect+0x36>
     d18:	e0 e0       	ldi	r30, 0x00	; 0
     d1a:	f1 e0       	ldi	r31, 0x01	; 1
     d1c:	21 50       	subi	r18, 0x01	; 1
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	2f 5f       	subi	r18, 0xFF	; 255
     d22:	3e 4f       	sbci	r19, 0xFE	; 254
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <CheckCorrect+0x1e>
     d28:	89 2f       	mov	r24, r25
		if(displayGuess[b] == '_'){
     d2a:	91 91       	ld	r25, Z+
     d2c:	9f 35       	cpi	r25, 0x5F	; 95
     d2e:	69 f0       	breq	.+26     	; 0xd4a <CheckCorrect+0x3e>
     d30:	98 2f       	mov	r25, r24

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     d32:	e2 17       	cp	r30, r18
     d34:	f3 07       	cpc	r31, r19
     d36:	19 f0       	breq	.+6      	; 0xd3e <CheckCorrect+0x32>
     d38:	81 11       	cpse	r24, r1
     d3a:	f6 cf       	rjmp	.-20     	; 0xd28 <CheckCorrect+0x1c>
     d3c:	08 95       	ret
			checkWin = 0;
		}
		b++;
	}//end while
	
	if(checkWin){
     d3e:	88 23       	and	r24, r24
     d40:	49 f0       	breq	.+18     	; 0xd54 <CheckCorrect+0x48>
		win = 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 f6 0f 	sts	0x0FF6, r24	; 0x800ff6 <win>
	}
}
     d48:	08 95       	ret

void CheckCorrect(){
	unsigned char checkWin = 1;
	win = 0;
	unsigned char b = 0;
	while((b < WTG_Index) && checkWin){
     d4a:	e2 17       	cp	r30, r18
     d4c:	f3 07       	cpc	r31, r19
     d4e:	11 f4       	brne	.+4      	; 0xd54 <CheckCorrect+0x48>
		if(displayGuess[b] == '_'){
			checkWin = 0;
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	f5 cf       	rjmp	.-22     	; 0xd3e <CheckCorrect+0x32>
     d54:	08 95       	ret

00000d56 <LCD_Tick>:
enum LCD_States{Init, Wait, MenuLCD, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD, 
	ResetLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
	switch (state)
     d60:	89 30       	cpi	r24, 0x09	; 9
     d62:	91 05       	cpc	r25, r1
     d64:	08 f0       	brcs	.+2      	; 0xd68 <LCD_Tick+0x12>
     d66:	ee c0       	rjmp	.+476    	; 0xf44 <LCD_Tick+0x1ee>
     d68:	fc 01       	movw	r30, r24
     d6a:	e6 57       	subi	r30, 0x76	; 118
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	40 c4       	rjmp	.+2176   	; 0x15f0 <__tablejump2__>
	{
		case Init : state = MenuLCD;
					LCD_ClearScreen();
     d70:	7e da       	rcall	.-2820   	; 0x26e <LCD_ClearScreen>
     d72:	12 98       	cbi	0x02, 2	; 2
					PORTA = SetBit(PORTA,2,0);
     d74:	13 98       	cbi	0x02, 3	; 2
					PORTA = SetBit(PORTA,3,0);
     d76:	6e e7       	ldi	r22, 0x7E	; 126
					LCD_DisplayString(1, "High Score ");
     d78:	71 e0       	ldi	r23, 0x01	; 1
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	9b da       	rcall	.-2762   	; 0x2b4 <LCD_DisplayString>
					LCD_Cursor(12);
     d7e:	8c e0       	ldi	r24, 0x0C	; 12
     d80:	79 da       	rcall	.-2830   	; 0x274 <LCD_Cursor>


					ReturnHighScore(eeprom_read_word(( short*)46 ));
     d82:	8e e2       	ldi	r24, 0x2E	; 46
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	4c d4       	rcall	.+2200   	; 0x1620 <eeprom_read_word>
     d88:	50 de       	rcall	.-864    	; 0xa2a <ReturnHighScore>
					
					if(EEPROM_read(eeprom_read_word(( short*)46 )) > 0){
     d8a:	8e e2       	ldi	r24, 0x2E	; 46
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	48 d4       	rcall	.+2192   	; 0x1620 <eeprom_read_word>
     d90:	45 de       	rcall	.-886    	; 0xa1c <EEPROM_read>
     d92:	88 23       	and	r24, r24
     d94:	99 f0       	breq	.+38     	; 0xdbc <LCD_Tick+0x66>
     d96:	80 91 13 10 	lds	r24, 0x1013	; 0x801013 <thousands>
						
						LCD_WriteData((thousands) + '0');
     d9a:	80 5d       	subi	r24, 0xD0	; 208
     d9c:	82 da       	rcall	.-2812   	; 0x2a2 <LCD_WriteData>
     d9e:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <hundreds>
						LCD_WriteData(hundreds + '0');
     da2:	80 5d       	subi	r24, 0xD0	; 208
     da4:	7e da       	rcall	.-2820   	; 0x2a2 <LCD_WriteData>
     da6:	80 91 0f 10 	lds	r24, 0x100F	; 0x80100f <tens>
						LCD_WriteData(tens + '0');
     daa:	80 5d       	subi	r24, 0xD0	; 208
     dac:	7a da       	rcall	.-2828   	; 0x2a2 <LCD_WriteData>
     dae:	80 91 09 10 	lds	r24, 0x1009	; 0x801009 <ones>
						LCD_WriteData(ones + '0');
     db2:	80 5d       	subi	r24, 0xD0	; 208
     db4:	76 da       	rcall	.-2836   	; 0x2a2 <LCD_WriteData>
						LCD_WriteData('s');
     db6:	83 e7       	ldi	r24, 0x73	; 115
     db8:	74 da       	rcall	.-2840   	; 0x2a2 <LCD_WriteData>
     dba:	e4 c1       	rjmp	.+968    	; 0x1184 <LCD_Tick+0x42e>
					}else {
						//writes score to lcd screen
						LCD_WriteData(0 + '0');
     dbc:	80 e3       	ldi	r24, 0x30	; 48
     dbe:	71 da       	rcall	.-2846   	; 0x2a2 <LCD_WriteData>
     dc0:	80 e3       	ldi	r24, 0x30	; 48
						LCD_WriteData(0 + '0');
     dc2:	6f da       	rcall	.-2850   	; 0x2a2 <LCD_WriteData>
     dc4:	80 e3       	ldi	r24, 0x30	; 48
						LCD_WriteData(0 + '0');
     dc6:	6d da       	rcall	.-2854   	; 0x2a2 <LCD_WriteData>
     dc8:	80 e3       	ldi	r24, 0x30	; 48
     dca:	6b da       	rcall	.-2858   	; 0x2a2 <LCD_WriteData>
						LCD_WriteData(0 + '0');
     dcc:	83 e7       	ldi	r24, 0x73	; 115
     dce:	69 da       	rcall	.-2862   	; 0x2a2 <LCD_WriteData>
     dd0:	d9 c1       	rjmp	.+946    	; 0x1184 <LCD_Tick+0x42e>
						LCD_WriteData('s');	
     dd2:	8c 2f       	mov	r24, r28
     dd4:	4f da       	rcall	.-2914   	; 0x274 <LCD_Cursor>
     dd6:	f8 01       	movw	r30, r16
     dd8:	81 91       	ld	r24, Z+
					}
					

					for(unsigned char a = 0; a < 11; a++){
						LCD_Cursor(a + 17);
     dda:	8f 01       	movw	r16, r30
     ddc:	62 da       	rcall	.-2876   	; 0x2a2 <LCD_WriteData>
     dde:	cf 5f       	subi	r28, 0xFF	; 255
						LCD_WriteData(pressEnter[a]);
     de0:	e0 16       	cp	r14, r16
     de2:	f1 06       	cpc	r15, r17
     de4:	b1 f7       	brne	.-20     	; 0xdd2 <LCD_Tick+0x7c>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	d6 c1       	rjmp	.+940    	; 0x1198 <LCD_Tick+0x442>
						LCD_WriteData(0 + '0');
						LCD_WriteData('s');	
					}
					

					for(unsigned char a = 0; a < 11; a++){
     dec:	20 b1       	in	r18, 0x00	; 0
     dee:	20 95       	com	r18


int LCD_Tick(int state){
	switch (state)
	{
		case Init : state = MenuLCD;
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	22 0f       	add	r18, r18
     df4:	23 2f       	mov	r18, r19
						LCD_WriteData(pressEnter[a]);
					}
					
					
		break;
		case Wait : if(GetBit(~PINA,7)){
     df6:	22 1f       	adc	r18, r18
     df8:	33 0b       	sbc	r19, r19
     dfa:	31 95       	neg	r19
     dfc:	23 2b       	or	r18, r19
     dfe:	09 f0       	breq	.+2      	; 0xe02 <LCD_Tick+0xac>
     e00:	86 c1       	rjmp	.+780    	; 0x110e <LCD_Tick+0x3b8>
     e02:	ca c1       	rjmp	.+916    	; 0x1198 <LCD_Tick+0x442>
     e04:	20 b1       	in	r18, 0x00	; 0
     e06:	20 95       	com	r18
     e08:	26 ff       	sbrs	r18, 6
     e0a:	c6 c1       	rjmp	.+908    	; 0x1198 <LCD_Tick+0x442>
     e0c:	30 da       	rcall	.-2976   	; 0x26e <LCD_ClearScreen>
						state = ResetLCD;	
					}else{
						state = Wait;
					}
		break;
		case MenuLCD : if(GetBit(~PINA,6)){
     e0e:	b2 c0       	rjmp	.+356    	; 0xf74 <LCD_Tick+0x21e>
     e10:	80 b1       	in	r24, 0x00	; 0
     e12:	80 95       	com	r24
							state = WelcomeLCD;
							LCD_ClearScreen();
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	88 0f       	add	r24, r24
						}else {
							state = MenuLCD;
						}
		break;
		case WelcomeLCD :	if(GetBit(~PINA,7)){
     e18:	89 2f       	mov	r24, r25
     e1a:	88 1f       	adc	r24, r24
     e1c:	99 0b       	sbc	r25, r25
     e1e:	91 95       	neg	r25
     e20:	89 2b       	or	r24, r25
     e22:	09 f0       	breq	.+2      	; 0xe26 <LCD_Tick+0xd0>
     e24:	74 c1       	rjmp	.+744    	; 0x110e <LCD_Tick+0x3b8>
     e26:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
     e2a:	84 33       	cpi	r24, 0x34	; 52
								state = ResetLCD;
							}else if(count <= 51){ 
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <LCD_Tick+0xda>
     e2e:	a2 c0       	rjmp	.+324    	; 0xf74 <LCD_Tick+0x21e>
     e30:	1e da       	rcall	.-3012   	; 0x26e <LCD_ClearScreen>
     e32:	6a e8       	ldi	r22, 0x8A	; 138
     e34:	71 e0       	ldi	r23, 0x01	; 1
							  state = WelcomeLCD;
						  }
						  else if(count > 51){
							  state = P1InputLCD;
							  LCD_ClearScreen();
     e36:	81 e1       	ldi	r24, 0x11	; 17
     e38:	3d da       	rcall	.-2950   	; 0x2b4 <LCD_DisplayString>
							  LCD_DisplayString(17,"16 Letters MAX");
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	1b da       	rcall	.-3018   	; 0x274 <LCD_Cursor>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <LCDindex>
							  LCD_Cursor(1);
     e44:	e1 c0       	rjmp	.+450    	; 0x1008 <LCD_Tick+0x2b2>
							  LCDindex = 1;
     e46:	80 b1       	in	r24, 0x00	; 0
     e48:	80 95       	com	r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	88 0f       	add	r24, r24
						 }
		break;
		case P1InputLCD :	if(GetBit(~PINA,7)){
     e4e:	89 2f       	mov	r24, r25
     e50:	88 1f       	adc	r24, r24
     e52:	99 0b       	sbc	r25, r25
     e54:	91 95       	neg	r25
     e56:	89 2b       	or	r24, r25
     e58:	09 f0       	breq	.+2      	; 0xe5c <LCD_Tick+0x106>
     e5a:	59 c1       	rjmp	.+690    	; 0x110e <LCD_Tick+0x3b8>
     e5c:	80 b1       	in	r24, 0x00	; 0
     e5e:	80 95       	com	r24
     e60:	86 ff       	sbrs	r24, 6
								state = ResetLCD;
							}else if(GetBit(~PINA, 6)){
     e62:	d2 c0       	rjmp	.+420    	; 0x1008 <LCD_Tick+0x2b2>
     e64:	04 da       	rcall	.-3064   	; 0x26e <LCD_ClearScreen>
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	90 e0       	ldi	r25, 0x00	; 0
								LCD_ClearScreen();
     e6a:	e5 d9       	rcall	.-3126   	; 0x236 <delay_ms>
     e6c:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
								state = P2InputLCD;
								delay_ms(2);
     e70:	88 23       	and	r24, r24
     e72:	89 f0       	breq	.+34     	; 0xe96 <LCD_Tick+0x140>
							
								for(unsigned char a = 0; a < WTG_Index; a++){
     e74:	c0 e0       	ldi	r28, 0x00	; 0
     e76:	1f e5       	ldi	r17, 0x5F	; 95
     e78:	ec 2f       	mov	r30, r28
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	e0 50       	subi	r30, 0x00	; 0
									displayGuess[a] = '_';
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	10 83       	st	Z, r17
     e82:	81 e1       	ldi	r24, 0x11	; 17
     e84:	8c 0f       	add	r24, r28
     e86:	f6 d9       	rcall	.-3092   	; 0x274 <LCD_Cursor>
     e88:	81 2f       	mov	r24, r17
									LCD_Cursor(a + 17);
     e8a:	0b da       	rcall	.-3050   	; 0x2a2 <LCD_WriteData>
     e8c:	cf 5f       	subi	r28, 0xFF	; 255
     e8e:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
									LCD_WriteData('_');
     e92:	c8 17       	cp	r28, r24
     e94:	88 f3       	brcs	.-30     	; 0xe78 <LCD_Tick+0x122>
     e96:	81 e0       	ldi	r24, 0x01	; 1
							}else if(GetBit(~PINA, 6)){
								LCD_ClearScreen();
								state = P2InputLCD;
								delay_ms(2);
							
								for(unsigned char a = 0; a < WTG_Index; a++){
     e98:	ed d9       	rcall	.-3110   	; 0x274 <LCD_Cursor>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <LCDindex>
     ea0:	80 93 06 10 	sts	0x1006, r24	; 0x801006 <startTimer>
									displayGuess[a] = '_';
									LCD_Cursor(a + 17);
									LCD_WriteData('_');
								}
								
								LCD_Cursor(1);
     ea4:	db c0       	rjmp	.+438    	; 0x105c <LCD_Tick+0x306>
     ea6:	80 b1       	in	r24, 0x00	; 0
								LCDindex = 1;	
     ea8:	80 95       	com	r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	88 0f       	add	r24, r24
								
								//starts timer
								startTimer = 1;				
     eae:	89 2f       	mov	r24, r25
     eb0:	88 1f       	adc	r24, r24
     eb2:	99 0b       	sbc	r25, r25
						}else{						
							state = P1InputLCD;
						}
		break;
		case P2InputLCD :	if(GetBit(~PINA,7)){
     eb4:	91 95       	neg	r25
     eb6:	89 2b       	or	r24, r25
     eb8:	09 f0       	breq	.+2      	; 0xebc <LCD_Tick+0x166>
     eba:	29 c1       	rjmp	.+594    	; 0x110e <LCD_Tick+0x3b8>
     ebc:	80 91 ff 0f 	lds	r24, 0x0FFF	; 0x800fff <strike>
     ec0:	86 30       	cpi	r24, 0x06	; 6
     ec2:	29 f4       	brne	.+10     	; 0xece <LCD_Tick+0x178>
     ec4:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <count>
     ec8:	10 92 06 10 	sts	0x1006, r1	; 0x801006 <startTimer>
								state = ResetLCD;
								
							}else if(strike == 6){
     ecc:	12 c1       	rjmp	.+548    	; 0x10f2 <LCD_Tick+0x39c>
     ece:	80 91 f6 0f 	lds	r24, 0x0FF6	; 0x800ff6 <win>
								state = LoseLCD;
								count = 0;
     ed2:	88 23       	and	r24, r24
     ed4:	09 f4       	brne	.+2      	; 0xed8 <LCD_Tick+0x182>
								startTimer = 0;
     ed6:	c2 c0       	rjmp	.+388    	; 0x105c <LCD_Tick+0x306>
     ed8:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <count>
							} else if(win){
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	80 93 10 10 	sts	0x1010, r24	; 0x801010 <stopTimer>
								state = WinLCD;
								count = 0;
     ee2:	f5 c0       	rjmp	.+490    	; 0x10ce <LCD_Tick+0x378>
     ee4:	80 b1       	in	r24, 0x00	; 0
								stopTimer = 1;
     ee6:	80 95       	com	r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	88 0f       	add	r24, r24
     eec:	89 2f       	mov	r24, r25
							else
							{
								state = P2InputLCD;
							}
		break;
		case WinLCD:	if(GetBit(~PINA,7)){
     eee:	88 1f       	adc	r24, r24
     ef0:	99 0b       	sbc	r25, r25
     ef2:	91 95       	neg	r25
     ef4:	89 2b       	or	r24, r25
     ef6:	09 f0       	breq	.+2      	; 0xefa <LCD_Tick+0x1a4>
     ef8:	0a c1       	rjmp	.+532    	; 0x110e <LCD_Tick+0x3b8>
     efa:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
     efe:	85 31       	cpi	r24, 0x15	; 21
     f00:	08 f4       	brcc	.+2      	; 0xf04 <LCD_Tick+0x1ae>
     f02:	e1 c0       	rjmp	.+450    	; 0x10c6 <LCD_Tick+0x370>
							state = ResetLCD;
						}else if(count <= 20){
     f04:	b4 d9       	rcall	.-3224   	; 0x26e <LCD_ClearScreen>
     f06:	69 e9       	ldi	r22, 0x99	; 153
     f08:	71 e0       	ldi	r23, 0x01	; 1
     f0a:	81 e0       	ldi	r24, 0x01	; 1
							state = WinLCD;
						}else if(count > 20){
							state = Wait;
							LCD_ClearScreen();
     f0c:	d3 d9       	rcall	.-3162   	; 0x2b4 <LCD_DisplayString>
     f0e:	81 e0       	ldi	r24, 0x01	; 1
							LCD_DisplayString(1, "Press RESET to start a new game");
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	42 c1       	rjmp	.+644    	; 0x1198 <LCD_Tick+0x442>
     f14:	80 b1       	in	r24, 0x00	; 0
     f16:	80 95       	com	r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
		case WinLCD:	if(GetBit(~PINA,7)){
							state = ResetLCD;
						}else if(count <= 20){
							state = WinLCD;
						}else if(count > 20){
							state = Wait;
     f1a:	88 0f       	add	r24, r24
     f1c:	89 2f       	mov	r24, r25
     f1e:	88 1f       	adc	r24, r24
							LCD_ClearScreen();
							LCD_DisplayString(1, "Press RESET to start a new game");
						}
						
		break;
		case LoseLCD :	if(GetBit(~PINA,7)){
     f20:	99 0b       	sbc	r25, r25
     f22:	91 95       	neg	r25
     f24:	89 2b       	or	r24, r25
     f26:	09 f0       	breq	.+2      	; 0xf2a <LCD_Tick+0x1d4>
     f28:	f2 c0       	rjmp	.+484    	; 0x110e <LCD_Tick+0x3b8>
     f2a:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
     f2e:	85 31       	cpi	r24, 0x15	; 21
     f30:	08 f4       	brcc	.+2      	; 0xf34 <LCD_Tick+0x1de>
     f32:	db c0       	rjmp	.+438    	; 0x10ea <LCD_Tick+0x394>
     f34:	9c d9       	rcall	.-3272   	; 0x26e <LCD_ClearScreen>
							state = ResetLCD;
						}else if(count <= 20){
     f36:	69 e9       	ldi	r22, 0x99	; 153
     f38:	71 e0       	ldi	r23, 0x01	; 1
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	bb d9       	rcall	.-3210   	; 0x2b4 <LCD_DisplayString>
     f3e:	81 e0       	ldi	r24, 0x01	; 1
							state = LoseLCD;
						}else if(count > 20)
						{
							state = Wait;
							LCD_ClearScreen();
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	2a c1       	rjmp	.+596    	; 0x1198 <LCD_Tick+0x442>
							LCD_DisplayString(1, "Press RESET to start a new game");
     f44:	85 30       	cpi	r24, 0x05	; 5
     f46:	91 05       	cpc	r25, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <LCD_Tick+0x1f6>
     f4a:	88 c0       	rjmp	.+272    	; 0x105c <LCD_Tick+0x306>
							state = ResetLCD;
						}else if(count <= 20){
							state = LoseLCD;
						}else if(count > 20)
						{
							state = Wait;
     f4c:	44 f4       	brge	.+16     	; 0xf5e <LCD_Tick+0x208>
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
		break;
		case ResetLCD : state = WelcomeLCD;
		break;
	}//end Transitions
	
	switch (state)
     f52:	81 f0       	breq	.+32     	; 0xf74 <LCD_Tick+0x21e>
     f54:	84 30       	cpi	r24, 0x04	; 4
     f56:	91 05       	cpc	r25, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <LCD_Tick+0x206>
     f5a:	56 c0       	rjmp	.+172    	; 0x1008 <LCD_Tick+0x2b2>
     f5c:	1d c1       	rjmp	.+570    	; 0x1198 <LCD_Tick+0x442>
     f5e:	87 30       	cpi	r24, 0x07	; 7
     f60:	91 05       	cpc	r25, r1
     f62:	09 f4       	brne	.+2      	; 0xf66 <LCD_Tick+0x210>
     f64:	c2 c0       	rjmp	.+388    	; 0x10ea <LCD_Tick+0x394>
     f66:	0c f4       	brge	.+2      	; 0xf6a <LCD_Tick+0x214>
     f68:	ae c0       	rjmp	.+348    	; 0x10c6 <LCD_Tick+0x370>
     f6a:	88 30       	cpi	r24, 0x08	; 8
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <LCD_Tick+0x21c>
     f70:	13 c1       	rjmp	.+550    	; 0x1198 <LCD_Tick+0x442>
     f72:	cd c0       	rjmp	.+410    	; 0x110e <LCD_Tick+0x3b8>
     f74:	10 92 f8 0f 	sts	0x0FF8, r1	; 0x800ff8 <LCDindex>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	7b d9       	rcall	.-3338   	; 0x274 <LCD_Cursor>
     f7e:	e0 91 f8 0f 	lds	r30, 0x0FF8	; 0x800ff8 <LCDindex>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
							for(LCDindex = 0; LCDindex < 16; LCDindex++){
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	e4 5e       	subi	r30, 0xE4	; 228
								LCD_Cursor(LCDindex + 1);
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	80 81       	ld	r24, Z
								LCD_WriteData(welcomeMessage[LCDindex]);
     f8a:	8b d9       	rcall	.-3306   	; 0x2a2 <LCD_WriteData>
     f8c:	80 91 f8 0f 	lds	r24, 0x0FF8	; 0x800ff8 <LCDindex>
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <LCDindex>
								}
								// put the saved character on the end
								welcomeMessage[67] = front; */
		
						
							for(LCDindex = 0; LCDindex < 16; LCDindex++){
     f96:	80 31       	cpi	r24, 0x10	; 16
     f98:	80 f3       	brcs	.-32     	; 0xf7a <LCD_Tick+0x224>
     f9a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <welcomeMessage>
								LCD_Cursor(LCDindex + 1);
								LCD_WriteData(welcomeMessage[LCDindex]);
							}
				
							front = welcomeMessage[0];
     f9e:	90 93 0a 10 	sts	0x100A, r25	; 0x80100a <front>
     fa2:	ec e1       	ldi	r30, 0x1C	; 28
     fa4:	f1 e0       	ldi	r31, 0x01	; 1
		
							for (unsigned char j = 0; j < 67; j++) {
								welcomeMessage[j] = welcomeMessage[j + 1];
     fa6:	2f e5       	ldi	r18, 0x5F	; 95
								LCD_WriteData(welcomeMessage[LCDindex]);
							}
				
							front = welcomeMessage[0];
		
							for (unsigned char j = 0; j < 67; j++) {
     fa8:	31 e0       	ldi	r19, 0x01	; 1
     faa:	81 81       	ldd	r24, Z+1	; 0x01
								welcomeMessage[j] = welcomeMessage[j + 1];
							}
							// put the saved character on the end
							welcomeMessage[67] = front;
     fac:	81 93       	st	Z+, r24
     fae:	2e 17       	cp	r18, r30
		
							LCDBuildChar(0, customChar);
     fb0:	3f 07       	cpc	r19, r31
     fb2:	d9 f7       	brne	.-10     	; 0xfaa <LCD_Tick+0x254>
     fb4:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <customChar>
     fb8:	6f e5       	ldi	r22, 0x5F	; 95
								LCD_Cursor(17);
     fba:	71 e0       	ldi	r23, 0x01	; 1
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	5d de       	rcall	.-838    	; 0xc7a <LCDBuildChar>
								LCD_WriteData(0x00);
     fc0:	81 e1       	ldi	r24, 0x11	; 17
     fc2:	58 d9       	rcall	.-3408   	; 0x274 <LCD_Cursor>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
								LCD_Cursor(20);
     fc6:	6d d9       	rcall	.-3366   	; 0x2a2 <LCD_WriteData>
     fc8:	84 e1       	ldi	r24, 0x14	; 20
     fca:	54 d9       	rcall	.-3416   	; 0x274 <LCD_Cursor>
								LCD_WriteData(0x00);
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	69 d9       	rcall	.-3374   	; 0x2a2 <LCD_WriteData>
     fd0:	87 e1       	ldi	r24, 0x17	; 23
								LCD_Cursor(23);
     fd2:	50 d9       	rcall	.-3424   	; 0x274 <LCD_Cursor>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	65 d9       	rcall	.-3382   	; 0x2a2 <LCD_WriteData>
								LCD_WriteData(0x00);
     fd8:	8a e1       	ldi	r24, 0x1A	; 26
     fda:	4c d9       	rcall	.-3432   	; 0x274 <LCD_Cursor>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
								LCD_Cursor(26);
     fde:	61 d9       	rcall	.-3390   	; 0x2a2 <LCD_WriteData>
     fe0:	8d e1       	ldi	r24, 0x1D	; 29
     fe2:	48 d9       	rcall	.-3440   	; 0x274 <LCD_Cursor>
								LCD_WriteData(0x00);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	5d d9       	rcall	.-3398   	; 0x2a2 <LCD_WriteData>
     fe8:	80 e2       	ldi	r24, 0x20	; 32
								LCD_Cursor(29);
     fea:	44 d9       	rcall	.-3448   	; 0x274 <LCD_Cursor>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	59 d9       	rcall	.-3406   	; 0x2a2 <LCD_WriteData>
								LCD_WriteData(0x00);
     ff0:	83 e2       	ldi	r24, 0x23	; 35
     ff2:	40 d9       	rcall	.-3456   	; 0x274 <LCD_Cursor>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
								LCD_Cursor(32);
     ff6:	55 d9       	rcall	.-3414   	; 0x2a2 <LCD_WriteData>
     ff8:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
								LCD_WriteData(0x00);
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	80 93 f5 0f 	sts	0x0FF5, r24	; 0x800ff5 <count>
								LCD_Cursor(35);
    1002:	83 e0       	ldi	r24, 0x03	; 3
								LCD_WriteData(0x00);
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	c8 c0       	rjmp	.+400    	; 0x1198 <LCD_Tick+0x442>
    1008:	80 b1       	in	r24, 0x00	; 0
		
							count++;
    100a:	80 95       	com	r24
    100c:	85 ff       	sbrs	r24, 5
    100e:	18 c0       	rjmp	.+48     	; 0x1040 <LCD_Tick+0x2ea>
    1010:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
		
			
		break;
    1014:	80 31       	cpi	r24, 0x10	; 16
    1016:	a0 f4       	brcc	.+40     	; 0x1040 <LCD_Tick+0x2ea>
    1018:	90 91 f8 0f 	lds	r25, 0x0FF8	; 0x800ff8 <LCDindex>
		case P1InputLCD :	if(GetBit(~PINA,5)){
    101c:	9f 5f       	subi	r25, 0xFF	; 255
    101e:	90 93 f8 0f 	sts	0x0FF8, r25	; 0x800ff8 <LCDindex>
								if(WTG_Index < 16){
    1022:	e8 2f       	mov	r30, r24
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	e9 59       	subi	r30, 0x99	; 153
									LCDindex++;
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	90 91 12 10 	lds	r25, 0x1012	; 0x801012 <lastClicked>
									wordToGuess[WTG_Index] = lastClicked;
    102e:	90 83       	st	Z, r25
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	80 93 f7 0f 	sts	0x0FF7, r24	; 0x800ff7 <WTG_Index>
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
									WTG_Index++;
    103c:	10 92 00 10 	sts	0x1000, r1	; 0x801000 <click>
									character = ' ';
    1040:	80 91 f8 0f 	lds	r24, 0x0FF8	; 0x800ff8 <LCDindex>
    1044:	17 d9       	rcall	.-3538   	; 0x274 <LCD_Cursor>
									click = 0;
    1046:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <character>
					
								}
							}
							LCD_Cursor(LCDindex);
    104a:	80 32       	cpi	r24, 0x20	; 32
    104c:	09 f4       	brne	.+2      	; 0x1050 <LCD_Tick+0x2fa>
    104e:	94 c0       	rjmp	.+296    	; 0x1178 <LCD_Tick+0x422>
							if(character != ' '){
    1050:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
    1054:	26 d9       	rcall	.-3508   	; 0x2a2 <LCD_WriteData>
    1056:	84 e0       	ldi	r24, 0x04	; 4
								lastClicked = character;
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9e c0       	rjmp	.+316    	; 0x1198 <LCD_Tick+0x442>
								LCD_WriteData(character);
    105c:	80 b1       	in	r24, 0x00	; 0
    105e:	80 95       	com	r24
    1060:	85 ff       	sbrs	r24, 5
    1062:	24 c0       	rjmp	.+72     	; 0x10ac <LCD_Tick+0x356>
							}
			
		break;
 		case P2InputLCD :	if(GetBit(~PINA,5)){
    1064:	80 91 12 10 	lds	r24, 0x1012	; 0x801012 <lastClicked>
    1068:	80 93 0c 10 	sts	0x100C, r24	; 0x80100c <P2Guess>
									P2Guess = lastClicked;
    106c:	80 e2       	ldi	r24, 0x20	; 32
    106e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <character>
									character = ' ';
    1072:	10 92 00 10 	sts	0x1000, r1	; 0x801000 <click>
									click = 0;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	fd d8       	rcall	.-3590   	; 0x274 <LCD_Cursor>
									LCD_Cursor(1);
    107a:	80 e2       	ldi	r24, 0x20	; 32
    107c:	12 d9       	rcall	.-3548   	; 0x2a2 <LCD_WriteData>
    107e:	81 e0       	ldi	r24, 0x01	; 1
									LCD_WriteData(' ');
    1080:	f9 d8       	rcall	.-3598   	; 0x274 <LCD_Cursor>
    1082:	14 de       	rcall	.-984    	; 0xcac <CheckGuessed>
    1084:	43 de       	rcall	.-890    	; 0xd0c <CheckCorrect>
									LCD_Cursor(1);
    1086:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
    108a:	88 23       	and	r24, r24
						
									CheckGuessed();
    108c:	79 f0       	breq	.+30     	; 0x10ac <LCD_Tick+0x356>
									CheckCorrect();
    108e:	c0 e0       	ldi	r28, 0x00	; 0
    1090:	81 e1       	ldi	r24, 0x11	; 17
									for(unsigned char a = 0; a < WTG_Index; a++){
    1092:	8c 0f       	add	r24, r28
    1094:	ef d8       	rcall	.-3618   	; 0x274 <LCD_Cursor>
    1096:	ec 2f       	mov	r30, r28
    1098:	f0 e0       	ldi	r31, 0x00	; 0
										LCD_Cursor(a + 17);
    109a:	e0 50       	subi	r30, 0x00	; 0
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	80 81       	ld	r24, Z
    10a0:	00 d9       	rcall	.-3584   	; 0x2a2 <LCD_WriteData>
										LCD_WriteData(displayGuess[a]);
    10a2:	cf 5f       	subi	r28, 0xFF	; 255
    10a4:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <WTG_Index>
    10a8:	c8 17       	cp	r28, r24
    10aa:	90 f3       	brcs	.-28     	; 0x1090 <LCD_Tick+0x33a>
									LCD_WriteData(' ');
									LCD_Cursor(1);
						
									CheckGuessed();
									CheckCorrect();
									for(unsigned char a = 0; a < WTG_Index; a++){
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	e2 d8       	rcall	.-3644   	; 0x274 <LCD_Cursor>
    10b0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <character>
    10b4:	80 32       	cpi	r24, 0x20	; 32
										LCD_Cursor(a + 17);
										LCD_WriteData(displayGuess[a]);
									}
					
							}
							LCD_Cursor(1);
    10b6:	09 f4       	brne	.+2      	; 0x10ba <LCD_Tick+0x364>
    10b8:	62 c0       	rjmp	.+196    	; 0x117e <LCD_Tick+0x428>
    10ba:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
							if(character != ' '){
    10be:	f1 d8       	rcall	.-3614   	; 0x2a2 <LCD_WriteData>
    10c0:	85 e0       	ldi	r24, 0x05	; 5
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	69 c0       	rjmp	.+210    	; 0x1198 <LCD_Tick+0x442>
								lastClicked = character;
    10c6:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
								LCD_WriteData(character);
    10ca:	80 fd       	sbrc	r24, 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <LCD_Tick+0x37c>
    10ce:	cf d8       	rcall	.-3682   	; 0x26e <LCD_ClearScreen>
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <LCD_Tick+0x384>
    10d2:	69 eb       	ldi	r22, 0xB9	; 185
							}
				
							
		break;
		case WinLCD:	if(count % 2 == 0){
    10d4:	71 e0       	ldi	r23, 0x01	; 1
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	ed d8       	rcall	.-3622   	; 0x2b4 <LCD_DisplayString>
    10da:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
							LCD_ClearScreen();
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	80 93 f5 0f 	sts	0x0FF5, r24	; 0x800ff5 <count>
						}else {
							LCD_DisplayString(1, "YOU WIN! YOU WIN! YOU WIN!");
    10e4:	86 e0       	ldi	r24, 0x06	; 6
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	57 c0       	rjmp	.+174    	; 0x1198 <LCD_Tick+0x442>
    10ea:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
						}
						count++;
    10ee:	80 fd       	sbrc	r24, 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <LCD_Tick+0x3a0>
    10f2:	bd d8       	rcall	.-3718   	; 0x26e <LCD_ClearScreen>
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <LCD_Tick+0x3a8>
		break;
    10f6:	64 ed       	ldi	r22, 0xD4	; 212
    10f8:	71 e0       	ldi	r23, 0x01	; 1
    10fa:	81 e0       	ldi	r24, 0x01	; 1
		case LoseLCD :	if(count % 2 == 0){
    10fc:	db d8       	rcall	.-3658   	; 0x2b4 <LCD_DisplayString>
    10fe:	80 91 f5 0f 	lds	r24, 0x0FF5	; 0x800ff5 <count>
    1102:	8f 5f       	subi	r24, 0xFF	; 255
							LCD_ClearScreen();
    1104:	80 93 f5 0f 	sts	0x0FF5, r24	; 0x800ff5 <count>
						}else {
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
    1108:	87 e0       	ldi	r24, 0x07	; 7
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	45 c0       	rjmp	.+138    	; 0x1198 <LCD_Tick+0x442>
    110e:	10 92 f5 0f 	sts	0x0FF5, r1	; 0x800ff5 <count>
						}
						count++;
    1112:	ad d8       	rcall	.-3750   	; 0x26e <LCD_ClearScreen>
    1114:	4a db       	rcall	.-2412   	; 0x7aa <N5110_clear>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 f8 0f 	sts	0x0FF8, r24	; 0x800ff8 <LCDindex>
						
		break;
    111c:	10 92 f7 0f 	sts	0x0FF7, r1	; 0x800ff7 <WTG_Index>
    1120:	80 e2       	ldi	r24, 0x20	; 32
		case ResetLCD :	state = WelcomeLCD;
						count = 0;
    1122:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <lastClicked>
						LCD_ClearScreen();
    1126:	80 93 0c 10 	sts	0x100C, r24	; 0x80100c <P2Guess>
						N5110_clear();
    112a:	e0 e0       	ldi	r30, 0x00	; 0
    112c:	f1 e0       	ldi	r31, 0x01	; 1
						LCDindex = 1;
    112e:	a7 e6       	ldi	r26, 0x67	; 103
    1130:	b1 e0       	ldi	r27, 0x01	; 1
    1132:	21 e1       	ldi	r18, 0x11	; 17
						WTG_Index = 0; //world to guess index
    1134:	31 e0       	ldi	r19, 0x01	; 1
    1136:	9f e5       	ldi	r25, 0x5F	; 95
						lastClicked = ' ';  //last letter user clicked
    1138:	91 93       	st	Z+, r25
    113a:	8d 93       	st	X+, r24
    113c:	e2 17       	cp	r30, r18
						P2Guess = ' ';
    113e:	f3 07       	cpc	r31, r19
    1140:	d9 f7       	brne	.-10     	; 0x1138 <LCD_Tick+0x3e2>
    1142:	10 92 fc 0f 	sts	0x0FFC, r1	; 0x800ffc <letterFound>
    1146:	10 92 fb 0f 	sts	0x0FFB, r1	; 0x800ffb <WA_Count>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <index>
						for(unsigned char k = 0; k < 17; k++){
							displayGuess[k] = '_';
    1150:	10 92 00 10 	sts	0x1000, r1	; 0x801000 <click>
						N5110_clear();
						LCDindex = 1;
						WTG_Index = 0; //world to guess index
						lastClicked = ' ';  //last letter user clicked
						P2Guess = ' ';
						for(unsigned char k = 0; k < 17; k++){
    1154:	10 92 ff 0f 	sts	0x0FFF, r1	; 0x800fff <strike>
    1158:	10 92 fe 0f 	sts	0x0FFE, r1	; 0x800ffe <counter>
							displayGuess[k] = '_';
							wordToGuess[k] = ' ';
						}
						letterFound = 0; //checks is the letter P2 guess was in P1s word
    115c:	10 92 f6 0f 	sts	0x0FF6, r1	; 0x800ff6 <win>
						WA_Count = 0;
    1160:	80 93 fd 0f 	sts	0x0FFD, r24	; 0x800ffd <NOKIAReset>
						index = 1;
    1164:	80 93 fa 0f 	sts	0x0FFA, r24	; 0x800ffa <WAReset>
						click = 0;
    1168:	12 98       	cbi	0x02, 2	; 2
    116a:	13 98       	cbi	0x02, 3	; 2
						strike = 0;
    116c:	8c e1       	ldi	r24, 0x1C	; 28
    116e:	91 e0       	ldi	r25, 0x01	; 1
						counter = 0;
    1170:	40 dc       	rcall	.-1920   	; 0x9f2 <ResetWelcomeMessage>
    1172:	83 e0       	ldi	r24, 0x03	; 3
						win = 0; 
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <LCD_Tick+0x442>
						NOKIAReset = 1;
    1178:	84 e0       	ldi	r24, 0x04	; 4
    117a:	90 e0       	ldi	r25, 0x00	; 0
						WAReset = 1;
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <LCD_Tick+0x442>
    117e:	85 e0       	ldi	r24, 0x05	; 5
						PORTA = SetBit(PORTA,2,0);
    1180:	90 e0       	ldi	r25, 0x00	; 0
						PORTA = SetBit(PORTA,3,0);
    1182:	0a c0       	rjmp	.+20     	; 0x1198 <LCD_Tick+0x442>
						ResetWelcomeMessage(&welcomeMessage);
    1184:	01 e1       	ldi	r16, 0x11	; 17
    1186:	11 e0       	ldi	r17, 0x01	; 1
    1188:	0f 2e       	mov	r0, r31
    118a:	fc e1       	ldi	r31, 0x1C	; 28
							LCD_DisplayString(1, "YOU LOSE! YOU LOSE! YOU LOSE!");
						}
						count++;
						
		break;
		case ResetLCD :	state = WelcomeLCD;
    118c:	ef 2e       	mov	r14, r31
    118e:	f1 e0       	ldi	r31, 0x01	; 1
						NOKIAReset = 1;
						WAReset = 1;
						PORTA = SetBit(PORTA,2,0);
						PORTA = SetBit(PORTA,3,0);
						ResetWelcomeMessage(&welcomeMessage);
		break;
    1190:	ff 2e       	mov	r15, r31
    1192:	f0 2d       	mov	r31, r0
    1194:	c1 e1       	ldi	r28, 0x11	; 17
    1196:	1d ce       	rjmp	.-966    	; 0xdd2 <LCD_Tick+0x7c>
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
	}//end Initializations
	
	
	return state;
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	08 95       	ret

000011a4 <main>:
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	8a b9       	out	0x0a, r24	; 10
    11a8:	1b b8       	out	0x0b, r1	; 11
    11aa:	81 b9       	out	0x01, r24	; 1
    11ac:	82 b9       	out	0x02, r24	; 2
enum LCD_States{Init, Wait, MenuLCD, WelcomeLCD, P1InputLCD, P2InputLCD, WinLCD, LoseLCD, 
	ResetLCD};
unsigned char count = 0; //counts how long display message is being displayed


int LCD_Tick(int state){
    11ae:	84 b9       	out	0x04, r24	; 4
    11b0:	15 b8       	out	0x05, r1	; 5
		break;
	}//end Initializations
	
	
	return state;
}
    11b2:	80 ef       	ldi	r24, 0xF0	; 240
    11b4:	87 b9       	out	0x07, r24	; 7
    11b6:	8f e0       	ldi	r24, 0x0F	; 15
    11b8:	88 b9       	out	0x08, r24	; 8
    11ba:	ee eb       	ldi	r30, 0xBE	; 190
    11bc:	ff e0       	ldi	r31, 0x0F	; 15
	unsigned long LTPeriod = 500;
	
	unsigned long period = 100;
	unsigned char i = 0;
	
	Tasks[i].state = Init;
    11be:	10 82       	st	Z, r1
	Tasks[i].period = LCDPeriod;
    11c0:	84 ef       	ldi	r24, 0xF4	; 244
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	a0 e0       	ldi	r26, 0x00	; 0
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	81 83       	std	Z+1, r24	; 0x01
    11ca:	92 83       	std	Z+2, r25	; 0x02
    11cc:	a3 83       	std	Z+3, r26	; 0x03
    11ce:	b4 83       	std	Z+4, r27	; 0x04
	Tasks[i].elapsedTime = LCDPeriod;
    11d0:	85 83       	std	Z+5, r24	; 0x05
    11d2:	96 83       	std	Z+6, r25	; 0x06
    11d4:	a7 83       	std	Z+7, r26	; 0x07
    11d6:	b0 87       	std	Z+8, r27	; 0x08
	Tasks[i].TickFct = &LCD_Tick;
    11d8:	2b ea       	ldi	r18, 0xAB	; 171
    11da:	36 e0       	ldi	r19, 0x06	; 6
    11dc:	32 87       	std	Z+10, r19	; 0x0a
    11de:	21 87       	std	Z+9, r18	; 0x09
	i++;
	Tasks[i].state = Wait_KP;
    11e0:	13 86       	std	Z+11, r1	; 0x0b
	Tasks[i].period = KPPeriod;
    11e2:	4c e2       	ldi	r20, 0x2C	; 44
    11e4:	51 e0       	ldi	r21, 0x01	; 1
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	44 87       	std	Z+12, r20	; 0x0c
    11ec:	55 87       	std	Z+13, r21	; 0x0d
    11ee:	66 87       	std	Z+14, r22	; 0x0e
    11f0:	77 87       	std	Z+15, r23	; 0x0f
	Tasks[i].elapsedTime = KPPeriod;
    11f2:	40 8b       	std	Z+16, r20	; 0x10
    11f4:	51 8b       	std	Z+17, r21	; 0x11
    11f6:	62 8b       	std	Z+18, r22	; 0x12
    11f8:	73 8b       	std	Z+19, r23	; 0x13
	Tasks[i].TickFct = &KeypadTick;
    11fa:	27 e3       	ldi	r18, 0x37	; 55
    11fc:	32 e0       	ldi	r19, 0x02	; 2
    11fe:	35 8b       	std	Z+21, r19	; 0x15
    1200:	24 8b       	std	Z+20, r18	; 0x14
	i++;
	Tasks[i].state = WA_Wait;
    1202:	16 8a       	std	Z+22, r1	; 0x16
	Tasks[i].period = WAPeriod;
    1204:	44 e6       	ldi	r20, 0x64	; 100
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	47 8b       	std	Z+23, r20	; 0x17
    120e:	50 8f       	std	Z+24, r21	; 0x18
    1210:	61 8f       	std	Z+25, r22	; 0x19
    1212:	72 8f       	std	Z+26, r23	; 0x1a
	Tasks[i].elapsedTime = WAPeriod;
    1214:	43 8f       	std	Z+27, r20	; 0x1b
    1216:	54 8f       	std	Z+28, r21	; 0x1c
    1218:	65 8f       	std	Z+29, r22	; 0x1d
    121a:	76 8f       	std	Z+30, r23	; 0x1e
	Tasks[i].TickFct = &WA_Tick;
    121c:	2e ec       	ldi	r18, 0xCE	; 206
    121e:	35 e0       	ldi	r19, 0x05	; 5
    1220:	30 a3       	std	Z+32, r19	; 0x20
    1222:	27 8f       	std	Z+31, r18	; 0x1f
	i++;
	Tasks[i].state = Nokia_Init;
    1224:	11 a2       	std	Z+33, r1	; 0x21
	Tasks[i].period = NokiaPeriod;
    1226:	82 a3       	std	Z+34, r24	; 0x22
    1228:	93 a3       	std	Z+35, r25	; 0x23
    122a:	a4 a3       	std	Z+36, r26	; 0x24
    122c:	b5 a3       	std	Z+37, r27	; 0x25
	Tasks[i].elapsedTime = NokiaPeriod;
    122e:	86 a3       	std	Z+38, r24	; 0x26
    1230:	97 a3       	std	Z+39, r25	; 0x27
    1232:	a0 a7       	std	Z+40, r26	; 0x28
    1234:	b1 a7       	std	Z+41, r27	; 0x29
	Tasks[i].TickFct = &Nokia_Tick;
    1236:	2a ef       	ldi	r18, 0xFA	; 250
    1238:	33 e0       	ldi	r19, 0x03	; 3
    123a:	33 a7       	std	Z+43, r19	; 0x2b
    123c:	22 a7       	std	Z+42, r18	; 0x2a
	i++;
	Tasks[i].state = LT_Init;
    123e:	14 a6       	std	Z+44, r1	; 0x2c
	Tasks[i].period = LTPeriod;
    1240:	85 a7       	std	Z+45, r24	; 0x2d
    1242:	96 a7       	std	Z+46, r25	; 0x2e
    1244:	a7 a7       	std	Z+47, r26	; 0x2f
    1246:	b0 ab       	std	Z+48, r27	; 0x30
	Tasks[i].elapsedTime = LTPeriod;
    1248:	81 ab       	std	Z+49, r24	; 0x31
    124a:	92 ab       	std	Z+50, r25	; 0x32
    124c:	a3 ab       	std	Z+51, r26	; 0x33
    124e:	b4 ab       	std	Z+52, r27	; 0x34
	Tasks[i].TickFct = &LT_Tick;
    1250:	83 eb       	ldi	r24, 0xB3	; 179
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	96 ab       	std	Z+54, r25	; 0x36
    1256:	85 ab       	std	Z+53, r24	; 0x35
	
	//LCDBuildChar(0, customChar);
	TimerSet(period);
    1258:	64 e6       	ldi	r22, 0x64	; 100
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	42 d8       	rcall	.-3964   	; 0x2e6 <TimerSet>
	TimerOn();
    1262:	52 d8       	rcall	.-3932   	; 0x308 <TimerOn>
	LCD_init();
    1264:	0f d8       	rcall	.-4066   	; 0x284 <LCD_init>
    1266:	00 dd       	rcall	.-1536   	; 0xc68 <PWM_on>
	PWM_on();
    1268:	0f 2e       	mov	r0, r31
    126a:	f5 ef       	ldi	r31, 0xF5	; 245
    126c:	ef 2e       	mov	r14, r31
    126e:	ff e0       	ldi	r31, 0x0F	; 15
    1270:	ff 2e       	mov	r15, r31
    1272:	f0 2d       	mov	r31, r0
    1274:	ce eb       	ldi	r28, 0xBE	; 190
    1276:	df e0       	ldi	r29, 0x0F	; 15
    1278:	8e 01       	movw	r16, r28
    127a:	4d 81       	ldd	r20, Y+5	; 0x05
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 5; i++ ) {
			// Task is ready to tick
			if ( Tasks[i].elapsedTime == Tasks[i].period ) {
    127c:	5e 81       	ldd	r21, Y+6	; 0x06
    127e:	6f 81       	ldd	r22, Y+7	; 0x07
    1280:	78 85       	ldd	r23, Y+8	; 0x08
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	ab 81       	ldd	r26, Y+3	; 0x03
    1288:	bc 81       	ldd	r27, Y+4	; 0x04
    128a:	48 17       	cp	r20, r24
    128c:	59 07       	cpc	r21, r25
    128e:	6a 07       	cpc	r22, r26
    1290:	7b 07       	cpc	r23, r27
    1292:	61 f4       	brne	.+24     	; 0x12ac <main+0x108>
    1294:	88 81       	ld	r24, Y
				// Setting next state for task
				Tasks[i].state = Tasks[i].TickFct(Tasks[i].state);
    1296:	e9 85       	ldd	r30, Y+9	; 0x09
    1298:	fa 85       	ldd	r31, Y+10	; 0x0a
    129a:	08 2e       	mov	r0, r24
    129c:	00 0c       	add	r0, r0
    129e:	99 0b       	sbc	r25, r25
    12a0:	09 95       	icall
    12a2:	88 83       	st	Y, r24
    12a4:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				Tasks[i].elapsedTime = 0;
    12a6:	1e 82       	std	Y+6, r1	; 0x06
    12a8:	1f 82       	std	Y+7, r1	; 0x07
    12aa:	18 86       	std	Y+8, r1	; 0x08
    12ac:	f8 01       	movw	r30, r16
			}
			Tasks[i].elapsedTime += period;
    12ae:	85 81       	ldd	r24, Z+5	; 0x05
    12b0:	96 81       	ldd	r25, Z+6	; 0x06
    12b2:	a7 81       	ldd	r26, Z+7	; 0x07
    12b4:	b0 85       	ldd	r27, Z+8	; 0x08
    12b6:	8c 59       	subi	r24, 0x9C	; 156
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	af 4f       	sbci	r26, 0xFF	; 255
    12bc:	bf 4f       	sbci	r27, 0xFF	; 255
    12be:	85 83       	std	Z+5, r24	; 0x05
    12c0:	96 83       	std	Z+6, r25	; 0x06
    12c2:	a7 83       	std	Z+7, r26	; 0x07
    12c4:	b0 87       	std	Z+8, r27	; 0x08
    12c6:	2b 96       	adiw	r28, 0x0b	; 11
    12c8:	ce 15       	cp	r28, r14
	
	
	//LCD_DisplayString(1,"Please Work");
	
	while (1) {
		for ( i = 0; i < 5; i++ ) {
    12ca:	df 05       	cpc	r29, r15
    12cc:	a9 f6       	brne	.-86     	; 0x1278 <main+0xd4>
    12ce:	80 91 05 10 	lds	r24, 0x1005	; 0x801005 <TimerFlag>
				Tasks[i].elapsedTime = 0;
			}
			Tasks[i].elapsedTime += period;
		}
		
		while (!TimerFlag){}
    12d2:	88 23       	and	r24, r24
    12d4:	e1 f3       	breq	.-8      	; 0x12ce <main+0x12a>
    12d6:	10 92 05 10 	sts	0x1005, r1	; 0x801005 <TimerFlag>
		TimerFlag = 0;
    12da:	cc cf       	rjmp	.-104    	; 0x1274 <main+0xd0>

000012dc <SPI_SS_Enable>:
		
	}
    12dc:	2c 98       	cbi	0x05, 4	; 5
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
    12de:	08 95       	ret

000012e0 <SPI_SS_Disable>:
    12e0:	2c 9a       	sbi	0x05, 4	; 5
    12e2:	08 95       	ret

000012e4 <SPI_Init>:
    12e4:	83 eb       	ldi	r24, 0xB3	; 179
    12e6:	84 b9       	out	0x04, r24	; 4
    12e8:	28 9a       	sbi	0x05, 0	; 5
    12ea:	26 98       	cbi	0x04, 6	; 4
    12ec:	2c 9a       	sbi	0x05, 4	; 5
    12ee:	81 e5       	ldi	r24, 0x51	; 81
    12f0:	8c bd       	out	0x2c, r24	; 44
    12f2:	08 95       	ret

000012f4 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
    12f4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
    12f6:	0d b4       	in	r0, 0x2d	; 45
    12f8:	07 fe       	sbrs	r0, 7
    12fa:	fd cf       	rjmp	.-6      	; 0x12f6 <SPI_Write+0x2>
}
    12fc:	08 95       	ret

000012fe <__cmpsf2>:
    12fe:	9c d0       	rcall	.+312    	; 0x1438 <__fp_cmp>
    1300:	08 f4       	brcc	.+2      	; 0x1304 <__cmpsf2+0x6>
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	08 95       	ret

00001306 <__divsf3>:
    1306:	0c d0       	rcall	.+24     	; 0x1320 <__divsf3x>
    1308:	d2 c0       	rjmp	.+420    	; 0x14ae <__fp_round>
    130a:	ca d0       	rcall	.+404    	; 0x14a0 <__fp_pscB>
    130c:	40 f0       	brcs	.+16     	; 0x131e <__divsf3+0x18>
    130e:	c1 d0       	rcall	.+386    	; 0x1492 <__fp_pscA>
    1310:	30 f0       	brcs	.+12     	; 0x131e <__divsf3+0x18>
    1312:	21 f4       	brne	.+8      	; 0x131c <__divsf3+0x16>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	19 f0       	breq	.+6      	; 0x131e <__divsf3+0x18>
    1318:	b3 c0       	rjmp	.+358    	; 0x1480 <__fp_inf>
    131a:	51 11       	cpse	r21, r1
    131c:	fc c0       	rjmp	.+504    	; 0x1516 <__fp_szero>
    131e:	b6 c0       	rjmp	.+364    	; 0x148c <__fp_nan>

00001320 <__divsf3x>:
    1320:	d7 d0       	rcall	.+430    	; 0x14d0 <__fp_split3>
    1322:	98 f3       	brcs	.-26     	; 0x130a <__divsf3+0x4>

00001324 <__divsf3_pse>:
    1324:	99 23       	and	r25, r25
    1326:	c9 f3       	breq	.-14     	; 0x131a <__divsf3+0x14>
    1328:	55 23       	and	r21, r21
    132a:	b1 f3       	breq	.-20     	; 0x1318 <__divsf3+0x12>
    132c:	95 1b       	sub	r25, r21
    132e:	55 0b       	sbc	r21, r21
    1330:	bb 27       	eor	r27, r27
    1332:	aa 27       	eor	r26, r26
    1334:	62 17       	cp	r22, r18
    1336:	73 07       	cpc	r23, r19
    1338:	84 07       	cpc	r24, r20
    133a:	38 f0       	brcs	.+14     	; 0x134a <__divsf3_pse+0x26>
    133c:	9f 5f       	subi	r25, 0xFF	; 255
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	44 1f       	adc	r20, r20
    1346:	aa 1f       	adc	r26, r26
    1348:	a9 f3       	breq	.-22     	; 0x1334 <__divsf3_pse+0x10>
    134a:	33 d0       	rcall	.+102    	; 0x13b2 <__divsf3_pse+0x8e>
    134c:	0e 2e       	mov	r0, r30
    134e:	3a f0       	brmi	.+14     	; 0x135e <__divsf3_pse+0x3a>
    1350:	e0 e8       	ldi	r30, 0x80	; 128
    1352:	30 d0       	rcall	.+96     	; 0x13b4 <__divsf3_pse+0x90>
    1354:	91 50       	subi	r25, 0x01	; 1
    1356:	50 40       	sbci	r21, 0x00	; 0
    1358:	e6 95       	lsr	r30
    135a:	00 1c       	adc	r0, r0
    135c:	ca f7       	brpl	.-14     	; 0x1350 <__divsf3_pse+0x2c>
    135e:	29 d0       	rcall	.+82     	; 0x13b2 <__divsf3_pse+0x8e>
    1360:	fe 2f       	mov	r31, r30
    1362:	27 d0       	rcall	.+78     	; 0x13b2 <__divsf3_pse+0x8e>
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	bb 1f       	adc	r27, r27
    136c:	26 17       	cp	r18, r22
    136e:	37 07       	cpc	r19, r23
    1370:	48 07       	cpc	r20, r24
    1372:	ab 07       	cpc	r26, r27
    1374:	b0 e8       	ldi	r27, 0x80	; 128
    1376:	09 f0       	breq	.+2      	; 0x137a <__divsf3_pse+0x56>
    1378:	bb 0b       	sbc	r27, r27
    137a:	80 2d       	mov	r24, r0
    137c:	bf 01       	movw	r22, r30
    137e:	ff 27       	eor	r31, r31
    1380:	93 58       	subi	r25, 0x83	; 131
    1382:	5f 4f       	sbci	r21, 0xFF	; 255
    1384:	2a f0       	brmi	.+10     	; 0x1390 <__divsf3_pse+0x6c>
    1386:	9e 3f       	cpi	r25, 0xFE	; 254
    1388:	51 05       	cpc	r21, r1
    138a:	68 f0       	brcs	.+26     	; 0x13a6 <__divsf3_pse+0x82>
    138c:	79 c0       	rjmp	.+242    	; 0x1480 <__fp_inf>
    138e:	c3 c0       	rjmp	.+390    	; 0x1516 <__fp_szero>
    1390:	5f 3f       	cpi	r21, 0xFF	; 255
    1392:	ec f3       	brlt	.-6      	; 0x138e <__divsf3_pse+0x6a>
    1394:	98 3e       	cpi	r25, 0xE8	; 232
    1396:	dc f3       	brlt	.-10     	; 0x138e <__divsf3_pse+0x6a>
    1398:	86 95       	lsr	r24
    139a:	77 95       	ror	r23
    139c:	67 95       	ror	r22
    139e:	b7 95       	ror	r27
    13a0:	f7 95       	ror	r31
    13a2:	9f 5f       	subi	r25, 0xFF	; 255
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <__divsf3_pse+0x74>
    13a6:	88 0f       	add	r24, r24
    13a8:	91 1d       	adc	r25, r1
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	97 f9       	bld	r25, 7
    13b0:	08 95       	ret
    13b2:	e1 e0       	ldi	r30, 0x01	; 1
    13b4:	66 0f       	add	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	88 1f       	adc	r24, r24
    13ba:	bb 1f       	adc	r27, r27
    13bc:	62 17       	cp	r22, r18
    13be:	73 07       	cpc	r23, r19
    13c0:	84 07       	cpc	r24, r20
    13c2:	ba 07       	cpc	r27, r26
    13c4:	20 f0       	brcs	.+8      	; 0x13ce <__divsf3_pse+0xaa>
    13c6:	62 1b       	sub	r22, r18
    13c8:	73 0b       	sbc	r23, r19
    13ca:	84 0b       	sbc	r24, r20
    13cc:	ba 0b       	sbc	r27, r26
    13ce:	ee 1f       	adc	r30, r30
    13d0:	88 f7       	brcc	.-30     	; 0x13b4 <__divsf3_pse+0x90>
    13d2:	e0 95       	com	r30
    13d4:	08 95       	ret

000013d6 <__fixsfsi>:
    13d6:	04 d0       	rcall	.+8      	; 0x13e0 <__fixunssfsi>
    13d8:	68 94       	set
    13da:	b1 11       	cpse	r27, r1
    13dc:	9c c0       	rjmp	.+312    	; 0x1516 <__fp_szero>
    13de:	08 95       	ret

000013e0 <__fixunssfsi>:
    13e0:	7f d0       	rcall	.+254    	; 0x14e0 <__fp_splitA>
    13e2:	88 f0       	brcs	.+34     	; 0x1406 <__fixunssfsi+0x26>
    13e4:	9f 57       	subi	r25, 0x7F	; 127
    13e6:	90 f0       	brcs	.+36     	; 0x140c <__fixunssfsi+0x2c>
    13e8:	b9 2f       	mov	r27, r25
    13ea:	99 27       	eor	r25, r25
    13ec:	b7 51       	subi	r27, 0x17	; 23
    13ee:	a0 f0       	brcs	.+40     	; 0x1418 <__fixunssfsi+0x38>
    13f0:	d1 f0       	breq	.+52     	; 0x1426 <__fixunssfsi+0x46>
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	1a f0       	brmi	.+6      	; 0x1402 <__fixunssfsi+0x22>
    13fc:	ba 95       	dec	r27
    13fe:	c9 f7       	brne	.-14     	; 0x13f2 <__fixunssfsi+0x12>
    1400:	12 c0       	rjmp	.+36     	; 0x1426 <__fixunssfsi+0x46>
    1402:	b1 30       	cpi	r27, 0x01	; 1
    1404:	81 f0       	breq	.+32     	; 0x1426 <__fixunssfsi+0x46>
    1406:	86 d0       	rcall	.+268    	; 0x1514 <__fp_zero>
    1408:	b1 e0       	ldi	r27, 0x01	; 1
    140a:	08 95       	ret
    140c:	83 c0       	rjmp	.+262    	; 0x1514 <__fp_zero>
    140e:	67 2f       	mov	r22, r23
    1410:	78 2f       	mov	r23, r24
    1412:	88 27       	eor	r24, r24
    1414:	b8 5f       	subi	r27, 0xF8	; 248
    1416:	39 f0       	breq	.+14     	; 0x1426 <__fixunssfsi+0x46>
    1418:	b9 3f       	cpi	r27, 0xF9	; 249
    141a:	cc f3       	brlt	.-14     	; 0x140e <__fixunssfsi+0x2e>
    141c:	86 95       	lsr	r24
    141e:	77 95       	ror	r23
    1420:	67 95       	ror	r22
    1422:	b3 95       	inc	r27
    1424:	d9 f7       	brne	.-10     	; 0x141c <__fixunssfsi+0x3c>
    1426:	3e f4       	brtc	.+14     	; 0x1436 <__fixunssfsi+0x56>
    1428:	90 95       	com	r25
    142a:	80 95       	com	r24
    142c:	70 95       	com	r23
    142e:	61 95       	neg	r22
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	8f 4f       	sbci	r24, 0xFF	; 255
    1434:	9f 4f       	sbci	r25, 0xFF	; 255
    1436:	08 95       	ret

00001438 <__fp_cmp>:
    1438:	99 0f       	add	r25, r25
    143a:	00 08       	sbc	r0, r0
    143c:	55 0f       	add	r21, r21
    143e:	aa 0b       	sbc	r26, r26
    1440:	e0 e8       	ldi	r30, 0x80	; 128
    1442:	fe ef       	ldi	r31, 0xFE	; 254
    1444:	16 16       	cp	r1, r22
    1446:	17 06       	cpc	r1, r23
    1448:	e8 07       	cpc	r30, r24
    144a:	f9 07       	cpc	r31, r25
    144c:	c0 f0       	brcs	.+48     	; 0x147e <__fp_cmp+0x46>
    144e:	12 16       	cp	r1, r18
    1450:	13 06       	cpc	r1, r19
    1452:	e4 07       	cpc	r30, r20
    1454:	f5 07       	cpc	r31, r21
    1456:	98 f0       	brcs	.+38     	; 0x147e <__fp_cmp+0x46>
    1458:	62 1b       	sub	r22, r18
    145a:	73 0b       	sbc	r23, r19
    145c:	84 0b       	sbc	r24, r20
    145e:	95 0b       	sbc	r25, r21
    1460:	39 f4       	brne	.+14     	; 0x1470 <__fp_cmp+0x38>
    1462:	0a 26       	eor	r0, r26
    1464:	61 f0       	breq	.+24     	; 0x147e <__fp_cmp+0x46>
    1466:	23 2b       	or	r18, r19
    1468:	24 2b       	or	r18, r20
    146a:	25 2b       	or	r18, r21
    146c:	21 f4       	brne	.+8      	; 0x1476 <__fp_cmp+0x3e>
    146e:	08 95       	ret
    1470:	0a 26       	eor	r0, r26
    1472:	09 f4       	brne	.+2      	; 0x1476 <__fp_cmp+0x3e>
    1474:	a1 40       	sbci	r26, 0x01	; 1
    1476:	a6 95       	lsr	r26
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	81 1d       	adc	r24, r1
    147c:	81 1d       	adc	r24, r1
    147e:	08 95       	ret

00001480 <__fp_inf>:
    1480:	97 f9       	bld	r25, 7
    1482:	9f 67       	ori	r25, 0x7F	; 127
    1484:	80 e8       	ldi	r24, 0x80	; 128
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	08 95       	ret

0000148c <__fp_nan>:
    148c:	9f ef       	ldi	r25, 0xFF	; 255
    148e:	80 ec       	ldi	r24, 0xC0	; 192
    1490:	08 95       	ret

00001492 <__fp_pscA>:
    1492:	00 24       	eor	r0, r0
    1494:	0a 94       	dec	r0
    1496:	16 16       	cp	r1, r22
    1498:	17 06       	cpc	r1, r23
    149a:	18 06       	cpc	r1, r24
    149c:	09 06       	cpc	r0, r25
    149e:	08 95       	ret

000014a0 <__fp_pscB>:
    14a0:	00 24       	eor	r0, r0
    14a2:	0a 94       	dec	r0
    14a4:	12 16       	cp	r1, r18
    14a6:	13 06       	cpc	r1, r19
    14a8:	14 06       	cpc	r1, r20
    14aa:	05 06       	cpc	r0, r21
    14ac:	08 95       	ret

000014ae <__fp_round>:
    14ae:	09 2e       	mov	r0, r25
    14b0:	03 94       	inc	r0
    14b2:	00 0c       	add	r0, r0
    14b4:	11 f4       	brne	.+4      	; 0x14ba <__fp_round+0xc>
    14b6:	88 23       	and	r24, r24
    14b8:	52 f0       	brmi	.+20     	; 0x14ce <__fp_round+0x20>
    14ba:	bb 0f       	add	r27, r27
    14bc:	40 f4       	brcc	.+16     	; 0x14ce <__fp_round+0x20>
    14be:	bf 2b       	or	r27, r31
    14c0:	11 f4       	brne	.+4      	; 0x14c6 <__fp_round+0x18>
    14c2:	60 ff       	sbrs	r22, 0
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <__fp_round+0x20>
    14c6:	6f 5f       	subi	r22, 0xFF	; 255
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	8f 4f       	sbci	r24, 0xFF	; 255
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	08 95       	ret

000014d0 <__fp_split3>:
    14d0:	57 fd       	sbrc	r21, 7
    14d2:	90 58       	subi	r25, 0x80	; 128
    14d4:	44 0f       	add	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	59 f0       	breq	.+22     	; 0x14f0 <__fp_splitA+0x10>
    14da:	5f 3f       	cpi	r21, 0xFF	; 255
    14dc:	71 f0       	breq	.+28     	; 0x14fa <__fp_splitA+0x1a>
    14de:	47 95       	ror	r20

000014e0 <__fp_splitA>:
    14e0:	88 0f       	add	r24, r24
    14e2:	97 fb       	bst	r25, 7
    14e4:	99 1f       	adc	r25, r25
    14e6:	61 f0       	breq	.+24     	; 0x1500 <__fp_splitA+0x20>
    14e8:	9f 3f       	cpi	r25, 0xFF	; 255
    14ea:	79 f0       	breq	.+30     	; 0x150a <__fp_splitA+0x2a>
    14ec:	87 95       	ror	r24
    14ee:	08 95       	ret
    14f0:	12 16       	cp	r1, r18
    14f2:	13 06       	cpc	r1, r19
    14f4:	14 06       	cpc	r1, r20
    14f6:	55 1f       	adc	r21, r21
    14f8:	f2 cf       	rjmp	.-28     	; 0x14de <__fp_split3+0xe>
    14fa:	46 95       	lsr	r20
    14fc:	f1 df       	rcall	.-30     	; 0x14e0 <__fp_splitA>
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <__fp_splitA+0x30>
    1500:	16 16       	cp	r1, r22
    1502:	17 06       	cpc	r1, r23
    1504:	18 06       	cpc	r1, r24
    1506:	99 1f       	adc	r25, r25
    1508:	f1 cf       	rjmp	.-30     	; 0x14ec <__fp_splitA+0xc>
    150a:	86 95       	lsr	r24
    150c:	71 05       	cpc	r23, r1
    150e:	61 05       	cpc	r22, r1
    1510:	08 94       	sec
    1512:	08 95       	ret

00001514 <__fp_zero>:
    1514:	e8 94       	clt

00001516 <__fp_szero>:
    1516:	bb 27       	eor	r27, r27
    1518:	66 27       	eor	r22, r22
    151a:	77 27       	eor	r23, r23
    151c:	cb 01       	movw	r24, r22
    151e:	97 f9       	bld	r25, 7
    1520:	08 95       	ret

00001522 <__gesf2>:
    1522:	8a df       	rcall	.-236    	; 0x1438 <__fp_cmp>
    1524:	08 f4       	brcc	.+2      	; 0x1528 <__gesf2+0x6>
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	08 95       	ret

0000152a <__mulsf3>:
    152a:	0b d0       	rcall	.+22     	; 0x1542 <__mulsf3x>
    152c:	c0 cf       	rjmp	.-128    	; 0x14ae <__fp_round>
    152e:	b1 df       	rcall	.-158    	; 0x1492 <__fp_pscA>
    1530:	28 f0       	brcs	.+10     	; 0x153c <__mulsf3+0x12>
    1532:	b6 df       	rcall	.-148    	; 0x14a0 <__fp_pscB>
    1534:	18 f0       	brcs	.+6      	; 0x153c <__mulsf3+0x12>
    1536:	95 23       	and	r25, r21
    1538:	09 f0       	breq	.+2      	; 0x153c <__mulsf3+0x12>
    153a:	a2 cf       	rjmp	.-188    	; 0x1480 <__fp_inf>
    153c:	a7 cf       	rjmp	.-178    	; 0x148c <__fp_nan>
    153e:	11 24       	eor	r1, r1
    1540:	ea cf       	rjmp	.-44     	; 0x1516 <__fp_szero>

00001542 <__mulsf3x>:
    1542:	c6 df       	rcall	.-116    	; 0x14d0 <__fp_split3>
    1544:	a0 f3       	brcs	.-24     	; 0x152e <__mulsf3+0x4>

00001546 <__mulsf3_pse>:
    1546:	95 9f       	mul	r25, r21
    1548:	d1 f3       	breq	.-12     	; 0x153e <__mulsf3+0x14>
    154a:	95 0f       	add	r25, r21
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	55 1f       	adc	r21, r21
    1550:	62 9f       	mul	r22, r18
    1552:	f0 01       	movw	r30, r0
    1554:	72 9f       	mul	r23, r18
    1556:	bb 27       	eor	r27, r27
    1558:	f0 0d       	add	r31, r0
    155a:	b1 1d       	adc	r27, r1
    155c:	63 9f       	mul	r22, r19
    155e:	aa 27       	eor	r26, r26
    1560:	f0 0d       	add	r31, r0
    1562:	b1 1d       	adc	r27, r1
    1564:	aa 1f       	adc	r26, r26
    1566:	64 9f       	mul	r22, r20
    1568:	66 27       	eor	r22, r22
    156a:	b0 0d       	add	r27, r0
    156c:	a1 1d       	adc	r26, r1
    156e:	66 1f       	adc	r22, r22
    1570:	82 9f       	mul	r24, r18
    1572:	22 27       	eor	r18, r18
    1574:	b0 0d       	add	r27, r0
    1576:	a1 1d       	adc	r26, r1
    1578:	62 1f       	adc	r22, r18
    157a:	73 9f       	mul	r23, r19
    157c:	b0 0d       	add	r27, r0
    157e:	a1 1d       	adc	r26, r1
    1580:	62 1f       	adc	r22, r18
    1582:	83 9f       	mul	r24, r19
    1584:	a0 0d       	add	r26, r0
    1586:	61 1d       	adc	r22, r1
    1588:	22 1f       	adc	r18, r18
    158a:	74 9f       	mul	r23, r20
    158c:	33 27       	eor	r19, r19
    158e:	a0 0d       	add	r26, r0
    1590:	61 1d       	adc	r22, r1
    1592:	23 1f       	adc	r18, r19
    1594:	84 9f       	mul	r24, r20
    1596:	60 0d       	add	r22, r0
    1598:	21 1d       	adc	r18, r1
    159a:	82 2f       	mov	r24, r18
    159c:	76 2f       	mov	r23, r22
    159e:	6a 2f       	mov	r22, r26
    15a0:	11 24       	eor	r1, r1
    15a2:	9f 57       	subi	r25, 0x7F	; 127
    15a4:	50 40       	sbci	r21, 0x00	; 0
    15a6:	8a f0       	brmi	.+34     	; 0x15ca <__mulsf3_pse+0x84>
    15a8:	e1 f0       	breq	.+56     	; 0x15e2 <__mulsf3_pse+0x9c>
    15aa:	88 23       	and	r24, r24
    15ac:	4a f0       	brmi	.+18     	; 0x15c0 <__mulsf3_pse+0x7a>
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	bb 1f       	adc	r27, r27
    15b4:	66 1f       	adc	r22, r22
    15b6:	77 1f       	adc	r23, r23
    15b8:	88 1f       	adc	r24, r24
    15ba:	91 50       	subi	r25, 0x01	; 1
    15bc:	50 40       	sbci	r21, 0x00	; 0
    15be:	a9 f7       	brne	.-22     	; 0x15aa <__mulsf3_pse+0x64>
    15c0:	9e 3f       	cpi	r25, 0xFE	; 254
    15c2:	51 05       	cpc	r21, r1
    15c4:	70 f0       	brcs	.+28     	; 0x15e2 <__mulsf3_pse+0x9c>
    15c6:	5c cf       	rjmp	.-328    	; 0x1480 <__fp_inf>
    15c8:	a6 cf       	rjmp	.-180    	; 0x1516 <__fp_szero>
    15ca:	5f 3f       	cpi	r21, 0xFF	; 255
    15cc:	ec f3       	brlt	.-6      	; 0x15c8 <__mulsf3_pse+0x82>
    15ce:	98 3e       	cpi	r25, 0xE8	; 232
    15d0:	dc f3       	brlt	.-10     	; 0x15c8 <__mulsf3_pse+0x82>
    15d2:	86 95       	lsr	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	b7 95       	ror	r27
    15da:	f7 95       	ror	r31
    15dc:	e7 95       	ror	r30
    15de:	9f 5f       	subi	r25, 0xFF	; 255
    15e0:	c1 f7       	brne	.-16     	; 0x15d2 <__mulsf3_pse+0x8c>
    15e2:	fe 2b       	or	r31, r30
    15e4:	88 0f       	add	r24, r24
    15e6:	91 1d       	adc	r25, r1
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	97 f9       	bld	r25, 7
    15ee:	08 95       	ret

000015f0 <__tablejump2__>:
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	00 24       	eor	r0, r0
    15f6:	00 1c       	adc	r0, r0
    15f8:	0b be       	out	0x3b, r0	; 59
    15fa:	07 90       	elpm	r0, Z+
    15fc:	f6 91       	elpm	r31, Z
    15fe:	e0 2d       	mov	r30, r0
    1600:	09 94       	ijmp

00001602 <__umulhisi3>:
    1602:	a2 9f       	mul	r26, r18
    1604:	b0 01       	movw	r22, r0
    1606:	b3 9f       	mul	r27, r19
    1608:	c0 01       	movw	r24, r0
    160a:	a3 9f       	mul	r26, r19
    160c:	70 0d       	add	r23, r0
    160e:	81 1d       	adc	r24, r1
    1610:	11 24       	eor	r1, r1
    1612:	91 1d       	adc	r25, r1
    1614:	b2 9f       	mul	r27, r18
    1616:	70 0d       	add	r23, r0
    1618:	81 1d       	adc	r24, r1
    161a:	11 24       	eor	r1, r1
    161c:	91 1d       	adc	r25, r1
    161e:	08 95       	ret

00001620 <eeprom_read_word>:
    1620:	a8 e1       	ldi	r26, 0x18	; 24
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	42 e0       	ldi	r20, 0x02	; 2
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <eeprom_read_blraw>

0000162a <eeprom_update_word>:
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	27 2f       	mov	r18, r23
    162e:	12 d0       	rcall	.+36     	; 0x1654 <eeprom_update_r18>
    1630:	10 c0       	rjmp	.+32     	; 0x1652 <eeprom_update_byte>

00001632 <eeprom_read_block>:
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22

00001636 <eeprom_read_blraw>:
    1636:	fc 01       	movw	r30, r24
    1638:	f9 99       	sbic	0x1f, 1	; 31
    163a:	fe cf       	rjmp	.-4      	; 0x1638 <eeprom_read_blraw+0x2>
    163c:	06 c0       	rjmp	.+12     	; 0x164a <eeprom_read_blraw+0x14>
    163e:	f2 bd       	out	0x22, r31	; 34
    1640:	e1 bd       	out	0x21, r30	; 33
    1642:	f8 9a       	sbi	0x1f, 0	; 31
    1644:	31 96       	adiw	r30, 0x01	; 1
    1646:	00 b4       	in	r0, 0x20	; 32
    1648:	0d 92       	st	X+, r0
    164a:	41 50       	subi	r20, 0x01	; 1
    164c:	50 40       	sbci	r21, 0x00	; 0
    164e:	b8 f7       	brcc	.-18     	; 0x163e <eeprom_read_blraw+0x8>
    1650:	08 95       	ret

00001652 <eeprom_update_byte>:
    1652:	26 2f       	mov	r18, r22

00001654 <eeprom_update_r18>:
    1654:	f9 99       	sbic	0x1f, 1	; 31
    1656:	fe cf       	rjmp	.-4      	; 0x1654 <eeprom_update_r18>
    1658:	92 bd       	out	0x22, r25	; 34
    165a:	81 bd       	out	0x21, r24	; 33
    165c:	f8 9a       	sbi	0x1f, 0	; 31
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	00 b4       	in	r0, 0x20	; 32
    1662:	02 16       	cp	r0, r18
    1664:	39 f0       	breq	.+14     	; 0x1674 <eeprom_update_r18+0x20>
    1666:	1f ba       	out	0x1f, r1	; 31
    1668:	20 bd       	out	0x20, r18	; 32
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	fa 9a       	sbi	0x1f, 2	; 31
    1670:	f9 9a       	sbi	0x1f, 1	; 31
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	08 95       	ret

00001676 <_exit>:
    1676:	f8 94       	cli

00001678 <__stop_program>:
    1678:	ff cf       	rjmp	.-2      	; 0x1678 <__stop_program>
